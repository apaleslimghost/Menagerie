/******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}

/******/ 	
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "9fd446a3eeedca7aab22"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				Object.defineProperty(fn, name, (function(name) {
/******/ 					return {
/******/ 						configurable: true,
/******/ 						enumerable: true,
/******/ 						get: function() {
/******/ 							return __webpack_require__[name];
/******/ 						},
/******/ 						set: function(value) {
/******/ 							__webpack_require__[name] = value;
/******/ 						}
/******/ 					};
/******/ 				}(name)));
/******/ 			}
/******/ 		}
/******/ 		Object.defineProperty(fn, "e", {
/******/ 			enumerable: true,
/******/ 			value: function(chunkId, callback) {
/******/ 				if(hotStatus === "ready")
/******/ 					hotSetStatus("prepare");
/******/ 				hotChunksLoading++;
/******/ 				__webpack_require__.e(chunkId, function() {
/******/ 					try {
/******/ 						callback.call(null, fn);
/******/ 					} finally {
/******/ 						finishChunkLoading();
/******/ 					}
/******/ 	
/******/ 					function finishChunkLoading() {
/******/ 						hotChunksLoading--;
/******/ 						if(hotStatus === "prepare") {
/******/ 							if(!hotWaitingFilesMap[chunkId]) {
/******/ 								hotEnsureUpdateChunk(chunkId);
/******/ 							}
/******/ 							if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 								hotUpdateDownloaded();
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		});
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static/";

/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };

/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(444);
	__webpack_require__(446);
	module.exports = __webpack_require__(212);


/***/ },
/* 1 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(330);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	'use strict';

	var emptyFunction = __webpack_require__(17);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }

	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(217);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	'use strict';

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(31);
	var ReactBrowserEventEmitter = __webpack_require__(53);
	var ReactCurrentOwner = __webpack_require__(20);
	var ReactDOMFeatureFlags = __webpack_require__(149);
	var ReactElement = __webpack_require__(12);
	var ReactEmptyComponentRegistry = __webpack_require__(156);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactMarkupChecksum = __webpack_require__(159);
	var ReactPerf = __webpack_require__(13);
	var ReactReconciler = __webpack_require__(32);
	var ReactUpdateQueue = __webpack_require__(87);
	var ReactUpdates = __webpack_require__(15);

	var assign = __webpack_require__(5);
	var emptyObject = __webpack_require__(40);
	var containsNode = __webpack_require__(128);
	var instantiateReactComponent = __webpack_require__(94);
	var invariant = __webpack_require__(3);
	var setInnerHTML = __webpack_require__(60);
	var shouldUpdateReactComponent = __webpack_require__(97);
	var validateDOMNesting = __webpack_require__(99);
	var warning = __webpack_require__(6);

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);

	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }

	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}

	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}

	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);

	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}

	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {

	  TopLevelWrapper: TopLevelWrapper,

	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },

	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);

	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }

	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },

	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }

	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }

	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },

	  ownerDocumentContextKey: ownerDocumentContextKey,

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  isValid: isValid,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , EventTarget = __webpack_require__(170)
	  ;

	function EventEmitter() {
	  EventTarget.call(this);
	}

	inherits(EventEmitter, EventTarget);

	EventEmitter.prototype.removeAllListeners = function(type) {
	  if (type) {
	    delete this._listeners[type];
	  } else {
	    this._listeners = {};
	  }
	};

	EventEmitter.prototype.once = function(type, listener) {
	  var self = this
	    , fired = false;

	  function g() {
	    self.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  this.on(type, g);
	};

	EventEmitter.prototype.emit = function(type) {
	  var listeners = this._listeners[type];
	  if (!listeners) {
	    return;
	  }
	  var args = Array.prototype.slice.call(arguments, 1);
	  for (var i = 0; i < listeners.length; i++) {
	    listeners[i].apply(this, args);
	  }
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
	EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

	module.exports.EventEmitter = EventEmitter;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(20);

	var assign = __webpack_require__(5);
	var canDefineProperty = __webpack_require__(58);

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }

	  return element;
	};

	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }

	  return newElement;
	};

	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var URL = __webpack_require__(112);

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:utils:url');
	}

	module.exports = {
	  getOrigin: function(url) {
	    if (!url) {
	      return null;
	    }

	    var p = new URL(url);
	    if (p.protocol === 'file:') {
	      return null;
	    }

	    var port = p.port;
	    if (!port) {
	      port = (p.protocol === 'https:') ? '443' : '80';
	    }

	    return p.protocol + '//' + p.hostname + ':' + port;
	  }

	, isOriginEqual: function(a, b) {
	    var res = this.getOrigin(a) === this.getOrigin(b);
	    debug('same', a, b, res);
	    return res;
	  }

	, isSchemeEqual: function(a, b) {
	    return (a.split(':')[0] === b.split(':')[0]);
	  }

	, addPath: function (url, path) {
	    var qs = url.split('?');
	    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
	  }

	, addQuery: function (url, q) {
	    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(81);
	var PooledClass = __webpack_require__(24);
	var ReactPerf = __webpack_require__(13);
	var ReactReconciler = __webpack_require__(32);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}

	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}

	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(66);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	"use strict";

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(445);

	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };

	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window] && window || this,
	      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }

	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());

	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];

	    // Delegate to the native `stringify` and `parse` implementations.
	    if (typeof nativeJSON == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }

	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        isProperty, forEach, undef;

	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	        // Safari < 2.0.2 stores the internal millisecond time value correctly,
	        // but clips the values returned by the date methods to the range of
	        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}

	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function () {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	                // Firefox 3.1b1 and b2 serialize string, number, and boolean
	                // primitives as object literals.
	                stringify(0) === "0" &&
	                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	                // literals.
	                stringify(new Number()) === "0" &&
	                stringify(new String()) == '""' &&
	                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	                // does not define a canonical JSON representation (this applies to
	                // objects with `toJSON` properties as well, *unless* they are nested
	                // within an object or array).
	                stringify(getClass) === undef &&
	                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	                // FF 3.1b3 pass this test.
	                stringify(undef) === undef &&
	                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	                // respectively, if the value is omitted entirely.
	                stringify() === undef &&
	                // FF 3.1b1, 2 throw an error if the given value is not a number,
	                // string, array, object, Boolean, or `null` literal. This applies to
	                // objects with custom `toJSON` methods as well, unless they are nested
	                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	                // methods entirely.
	                stringify(value) === "1" &&
	                stringify([value]) == "[1]" &&
	                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	                // `"[null]"`.
	                stringify([undef]) == "[null]" &&
	                // YUI 3.0.0b1 fails to serialize `null` literals.
	                stringify(null) == "null" &&
	                // FF 3.1b1, 2 halts serialization if an array contains a function:
	                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	                // elides non-JSON values from objects and arrays, unless they
	                // define custom `toJSON` methods.
	                stringify([undef, getClass, null]) == "[null,null,null]" &&
	                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	                // where character escape codes are expected (e.g., `\b` => `\u0008`).
	                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	                stringify(null, value) === "1" &&
	                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	                // serialize extended years.
	                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	                // The milliseconds are optional in ES 5, but required in 5.1.
	                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	                // four-digit years instead of six-digit years. Credits: @Yaffle.
	                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	                // values less than 1000. Credits: @Yaffle.
	                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }

	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";

	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");

	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function (year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }

	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(isProperty = objectProto.hasOwnProperty)) {
	        isProperty = function (property) {
	          var members = {}, constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            isProperty = function (property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__, result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            isProperty = function (property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return isProperty.call(this, property);
	        };
	      }

	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      forEach = function (object, callback) {
	        var size = 0, Properties, members, property;

	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function () {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;

	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;

	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          forEach = function (object, callback) {
	            // Create a set of iterated properties.
	            var members = {}, isFunction = getClass.call(object) == functionClass, property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	              callback(property);
	            }
	          };
	        }
	        return forEach(object, callback);
	      };

	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };

	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function (width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };

	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function (value) {
	          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };

	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if (typeof value == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                  // Months, dates, hours, minutes, and seconds should have two
	                  // digits; milliseconds should have three.
	                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                  // Milliseconds are optional in ES 5.0, but required in 5.1.
	                  "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if (typeof value == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };

	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }

	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;

	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };

	        // Internal: Stores the parser state.
	        var Index, Source;

	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function () {
	          Index = Source = null;
	          throw SyntaxError();
	        };

	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function () {
	          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9: case 10: case 13: case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123: case 125: case 91: case 93: case 58: case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };

	        // Internal: Parses a JSON `value` token.
	        var get = function (value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };

	        // Internal: Updates a traversed object member.
	        var update = function (source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };

	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function (source, property, callback) {
	          var value = source[property], length;
	          if (typeof value == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };

	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }

	    exports["runInContext"] = runInContext;
	    return exports;
	  }

	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;

	    var JSON3 = runInContext(root, (root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function () {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    }));

	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)(module), (function() { return this; }())))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(51);

	var PropagationPhases = keyMirror({ bubbled: null, captured: null });

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;

/***/ },
/* 20 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 21 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = warnOnce;
	var printed = {};

	function warnOnce(message) {
	    if (printed[message]) return;
	    printed[message] = true;

	    if (typeof console !== 'undefined' && console.warn) console.warn(message);
	}
	module.exports = exports['default'];

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (value) {
		if (value == null) throw new TypeError("Cannot use null or undefined");
		return value;
	};


/***/ },
/* 23 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";

	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};

	module.exports = keyOf;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var random = __webpack_require__(36);

	var onUnload = {}
	  , afterUnload = false
	    // detect google chrome packaged apps because they don't allow the 'unload' event
	  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
	  ;

	module.exports = {
	  attachEvent: function(event, listener) {
	    if (typeof global.addEventListener !== 'undefined') {
	      global.addEventListener(event, listener, false);
	    } else if (global.document && global.attachEvent) {
	      // IE quirks.
	      // According to: http://stevesouders.com/misc/test-postmessage.php
	      // the message gets delivered only to 'document', not 'window'.
	      global.document.attachEvent('on' + event, listener);
	      // I get 'window' for ie8.
	      global.attachEvent('on' + event, listener);
	    }
	  }

	, detachEvent: function(event, listener) {
	    if (typeof global.addEventListener !== 'undefined') {
	      global.removeEventListener(event, listener, false);
	    } else if (global.document && global.detachEvent) {
	      global.document.detachEvent('on' + event, listener);
	      global.detachEvent('on' + event, listener);
	    }
	  }

	, unloadAdd: function(listener) {
	    if (isChromePackagedApp) {
	      return null;
	    }

	    var ref = random.string(8);
	    onUnload[ref] = listener;
	    if (afterUnload) {
	      setTimeout(this.triggerUnloadCallbacks, 0);
	    }
	    return ref;
	  }

	, unloadDel: function(ref) {
	    if (ref in onUnload) {
	      delete onUnload[ref];
	    }
	  }

	, triggerUnloadCallbacks: function() {
	    for (var ref in onUnload) {
	      onUnload[ref]();
	      delete onUnload[ref];
	    }
	  }
	};

	var unloadTriggered = function() {
	  if (afterUnload) {
	    return;
	  }
	  afterUnload = true;
	  module.exports.triggerUnloadCallbacks();
	};

	// 'unload' alone is not reliable in opera within an iframe, but we
	// can't use `beforeunload` as IE fires it on javascript: links.
	if (!isChromePackagedApp) {
	  module.exports.attachEvent('unload', unloadTriggered);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign        = __webpack_require__(75)
	  , normalizeOpts = __webpack_require__(251)
	  , isCallable    = __webpack_require__(245)
	  , contains      = __webpack_require__(76)

	  , d;

	d = module.exports = function (dscr, value/*, options*/) {
		var c, e, w, options, desc;
		if ((arguments.length < 2) || (typeof dscr !== 'string')) {
			options = value;
			value = dscr;
			dscr = null;
		} else {
			options = arguments[2];
		}
		if (dscr == null) {
			c = w = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
			w = contains.call(dscr, 'w');
		}

		desc = { value: value, configurable: c, enumerable: e, writable: w };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};

	d.gs = function (dscr, get, set/*, options*/) {
		var c, e, options, desc;
		if (typeof dscr !== 'string') {
			options = set;
			set = get;
			get = dscr;
			dscr = null;
		} else {
			options = arguments[3];
		}
		if (get == null) {
			get = undefined;
		} else if (!isCallable(get)) {
			options = get;
			get = set = undefined;
		} else if (set == null) {
			set = undefined;
		} else if (!isCallable(set)) {
			options = set;
			set = undefined;
		}
		if (dscr == null) {
			c = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
		}

		desc = { get: get, set: set, configurable: c, enumerable: e };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(48);

	var ReactCurrentOwner = __webpack_require__(49);

	var warning = __webpack_require__(16);
	var canDefineProperty = __webpack_require__(72);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(119);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 29 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (fn) {
		if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
		return fn;
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }

	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];

	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,

	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };

	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }

	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }

	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }

	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(351);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.

	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(24);

	var assign = __webpack_require__(5);
	var emptyFunction = __webpack_require__(17);
	var warning = __webpack_require__(6);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }

	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(164);

	var invariant = __webpack_require__(3);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(4)
	  , urlUtils = __webpack_require__(14)
	  , SenderReceiver = __webpack_require__(179)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:ajax-based');
	}

	function createAjaxSender(AjaxObject) {
	  return function(url, payload, callback) {
	    debug('create ajax sender', url, payload);
	    var opt = {};
	    if (typeof payload === 'string') {
	      opt.headers = {'Content-type':'text/plain'};
	    }
	    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
	    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
	    xo.once('finish', function(status) {
	      debug('finish', status);
	      xo = null;

	      if (status !== 200 && status !== 204) {
	        return callback(new Error('http status ' + status));
	      }
	      callback();
	    });
	    return function() {
	      debug('abort');
	      xo.close();
	      xo = null;

	      var err = new Error('Aborted');
	      err.code = 1000;
	      callback(err);
	    };
	  };
	}

	function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
	  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
	}

	inherits(AjaxBasedTransport, SenderReceiver);

	module.exports = AjaxBasedTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* global crypto:true */
	var crypto = __webpack_require__(403);

	// This string has length 32, a power of 2, so the modulus doesn't introduce a
	// bias.
	var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
	module.exports = {
	  string: function(length) {
	    var max = _randomStringChars.length;
	    var bytes = crypto.randomBytes(length);
	    var ret = [];
	    for (var i = 0; i < length; i++) {
	      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
	    }
	    return ret.join('');
	  }

	, number: function(max) {
	    return Math.floor(Math.random() * max);
	  }

	, numberString: function(max) {
	    var t = ('' + (max - 1)).length;
	    var p = new Array(t + 1).join('0');
	    return (p + this.number(max)).slice(-t);
	  }
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ThemeProvider = exports.injectGlobal = exports.keyframes = exports.css = undefined;

	var _generateAlphabeticName = __webpack_require__(415);

	var _generateAlphabeticName2 = _interopRequireDefault(_generateAlphabeticName);

	var _css = __webpack_require__(63);

	var _css2 = _interopRequireDefault(_css);

	var _injectGlobal = __webpack_require__(408);

	var _injectGlobal2 = _interopRequireDefault(_injectGlobal);

	var _StyledComponent = __webpack_require__(413);

	var _StyledComponent2 = _interopRequireDefault(_StyledComponent);

	var _styled2 = __webpack_require__(410);

	var _styled3 = _interopRequireDefault(_styled2);

	var _keyframes2 = __webpack_require__(409);

	var _keyframes3 = _interopRequireDefault(_keyframes2);

	var _ComponentStyle2 = __webpack_require__(412);

	var _ComponentStyle3 = _interopRequireDefault(_ComponentStyle2);

	var _ThemeProvider = __webpack_require__(64);

	var _ThemeProvider2 = _interopRequireDefault(_ThemeProvider);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/* Instantiate singletons */


	/* Import singletons */
	var keyframes = (0, _keyframes3.default)(_generateAlphabeticName2.default);

	/* Import components */


	/* Import singleton constructors */

	var styled = (0, _styled3.default)((0, _StyledComponent2.default)((0, _ComponentStyle3.default)(_generateAlphabeticName2.default)));

	/* Export everything */
	exports.default = styled;
	exports.css = _css2.default;
	exports.keyframes = keyframes;
	exports.injectGlobal = _injectGlobal2.default;
	exports.ThemeProvider = _ThemeProvider2.default;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	function classNames() {
		var classes = '';
		var arg;

		for (var i = 0; i < arguments.length; i++) {
			arg = arguments[i];
			if (!arg) {
				continue;
			}

			if ('string' === typeof arg || 'number' === typeof arg) {
				classes += ' ' + arg;
			} else if (Object.prototype.toString.call(arg) === '[object Array]') {
				classes += ' ' + classNames.apply(null, arg);
			} else if ('object' === typeof arg) {
				for (var key in arg) {
					if (!arg.hasOwnProperty(key) || !arg[key]) {
						continue;
					}
					classes += ' ' + key;
				}
			}
		}
		return classes.substr(1);
	}

	// safely export classNames for node / browserify
	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	}

	// safely export classNames for RequireJS
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return classNames;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(263)() ? Symbol : __webpack_require__(265);


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(144);
	var EventPluginUtils = __webpack_require__(327);
	var ReactErrorUtils = __webpack_require__(157);

	var accumulateInto = __webpack_require__(166);
	var forEachAccumulated = __webpack_require__(167);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;

	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }

	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }

	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }

	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },

	  __getListenerBank: function () {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(41);

	var warning = __webpack_require__(6);

	var accumulateInto = __webpack_require__(166);
	var forEachAccumulated = __webpack_require__(167);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}

	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}

	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}

	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 43 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function (key) {
	    return key._reactInternalInstance;
	  },

	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(33);

	var getEventTarget = __webpack_require__(92);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , XhrDriver = __webpack_require__(174)
	  ;

	function XHRLocalObject(method, url, payload /*, opts */) {
	  XhrDriver.call(this, method, url, payload, {
	    noCredentials: true
	  });
	}

	inherits(XHRLocalObject, XhrDriver);

	XHRLocalObject.enabled = XhrDriver.enabled;

	module.exports = XHRLocalObject;


/***/ },
/* 46 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	module.exports = {
	  isOpera: function() {
	    return global.navigator &&
	      /opera/i.test(global.navigator.userAgent);
	  }

	, isKonqueror: function() {
	    return global.navigator &&
	      /konqueror/i.test(global.navigator.userAgent);
	  }

	  // #187 wrap document.domain in try/catch because of WP8 from file:///
	, hasDomain: function () {
	    // non-browser client always has a domain
	    if (!global.document) {
	      return true;
	    }

	    try {
	      return !!global.document.domain;
	    } catch (e) {
	      return false;
	    }
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var eventUtils = __webpack_require__(25)
	  , JSON3 = __webpack_require__(18)
	  , browser = __webpack_require__(46)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:utils:iframe');
	}

	module.exports = {
	  WPrefix: '_jp'
	, currentWindowId: null

	, polluteGlobalNamespace: function() {
	    if (!(module.exports.WPrefix in global)) {
	      global[module.exports.WPrefix] = {};
	    }
	  }

	, postMessage: function(type, data) {
	    if (global.parent !== global) {
	      global.parent.postMessage(JSON3.stringify({
	        windowId: module.exports.currentWindowId
	      , type: type
	      , data: data || ''
	      }), '*');
	    } else {
	      debug('Cannot postMessage, no parent window.', type, data);
	    }
	  }

	, createIframe: function(iframeUrl, errorCallback) {
	    var iframe = global.document.createElement('iframe');
	    var tref, unloadRef;
	    var unattach = function() {
	      debug('unattach');
	      clearTimeout(tref);
	      // Explorer had problems with that.
	      try {
	        iframe.onload = null;
	      } catch (x) {}
	      iframe.onerror = null;
	    };
	    var cleanup = function() {
	      debug('cleanup');
	      if (iframe) {
	        unattach();
	        // This timeout makes chrome fire onbeforeunload event
	        // within iframe. Without the timeout it goes straight to
	        // onunload.
	        setTimeout(function() {
	          if (iframe) {
	            iframe.parentNode.removeChild(iframe);
	          }
	          iframe = null;
	        }, 0);
	        eventUtils.unloadDel(unloadRef);
	      }
	    };
	    var onerror = function(err) {
	      debug('onerror', err);
	      if (iframe) {
	        cleanup();
	        errorCallback(err);
	      }
	    };
	    var post = function(msg, origin) {
	      debug('post', msg, origin);
	      try {
	        // When the iframe is not loaded, IE raises an exception
	        // on 'contentWindow'.
	        setTimeout(function() {
	          if (iframe && iframe.contentWindow) {
	            iframe.contentWindow.postMessage(msg, origin);
	          }
	        }, 0);
	      } catch (x) {}
	    };

	    iframe.src = iframeUrl;
	    iframe.style.display = 'none';
	    iframe.style.position = 'absolute';
	    iframe.onerror = function() {
	      onerror('onerror');
	    };
	    iframe.onload = function() {
	      debug('onload');
	      // `onload` is triggered before scripts on the iframe are
	      // executed. Give it few seconds to actually load stuff.
	      clearTimeout(tref);
	      tref = setTimeout(function() {
	        onerror('onload timeout');
	      }, 2000);
	    };
	    global.document.body.appendChild(iframe);
	    tref = setTimeout(function() {
	      onerror('timeout');
	    }, 15000);
	    unloadRef = eventUtils.unloadAdd(cleanup);
	    return {
	      post: post
	    , cleanup: cleanup
	    , loaded: unattach
	    };
	  }

	/* jshint undef: false, newcap: false */
	/* eslint no-undef: 0, new-cap: 0 */
	, createHtmlfile: function(iframeUrl, errorCallback) {
	    var axo = ['Active'].concat('Object').join('X');
	    var doc = new global[axo]('htmlfile');
	    var tref, unloadRef;
	    var iframe;
	    var unattach = function() {
	      clearTimeout(tref);
	      iframe.onerror = null;
	    };
	    var cleanup = function() {
	      if (doc) {
	        unattach();
	        eventUtils.unloadDel(unloadRef);
	        iframe.parentNode.removeChild(iframe);
	        iframe = doc = null;
	        CollectGarbage();
	      }
	    };
	    var onerror = function(r)  {
	      debug('onerror', r);
	      if (doc) {
	        cleanup();
	        errorCallback(r);
	      }
	    };
	    var post = function(msg, origin) {
	      try {
	        // When the iframe is not loaded, IE raises an exception
	        // on 'contentWindow'.
	        setTimeout(function() {
	          if (iframe && iframe.contentWindow) {
	              iframe.contentWindow.postMessage(msg, origin);
	          }
	        }, 0);
	      } catch (x) {}
	    };

	    doc.open();
	    doc.write('<html><s' + 'cript>' +
	              'document.domain="' + global.document.domain + '";' +
	              '</s' + 'cript></html>');
	    doc.close();
	    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
	    var c = doc.createElement('div');
	    doc.body.appendChild(c);
	    iframe = doc.createElement('iframe');
	    c.appendChild(iframe);
	    iframe.src = iframeUrl;
	    iframe.onerror = function() {
	      onerror('onerror');
	    };
	    tref = setTimeout(function() {
	      onerror('timeout');
	    }, 15000);
	    unloadRef = eventUtils.unloadAdd(cleanup);
	    return {
	      post: post
	    , cleanup: cleanup
	    , loaded: unattach
	    };
	  }
	};

	module.exports.iframeEnabled = false;
	if (global.document) {
	  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
	  // huge delay, or not at all.
	  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
	    typeof global.postMessage === 'object') && (!browser.isKonqueror());
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 48 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(123)()
		? Object.setPrototypeOf
		: __webpack_require__(124);


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	// returns a style object with a single concated prefixed value string

	exports.default = function (property, value) {
	  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
	    return prefix + value;
	  } : arguments[2];
	  return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
	    return replacer(prefix, value);
	  }));
	};

	module.exports = exports['default'];

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(41);
	var EventPluginRegistry = __webpack_require__(144);
	var ReactEventEmitterMixin = __webpack_require__(344);
	var ReactPerf = __webpack_require__(13);
	var ViewportMetrics = __webpack_require__(165);

	var assign = __webpack_require__(5);
	var isEventSupported = __webpack_require__(95);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },

	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});

	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(51);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(44);
	var ViewportMetrics = __webpack_require__(165);

	var getEventModifierState = __webpack_require__(91);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:receiver:xhr');
	}

	function XhrReceiver(url, AjaxObject) {
	  debug(url);
	  EventEmitter.call(this);
	  var self = this;

	  this.bufferPosition = 0;

	  this.xo = new AjaxObject('POST', url, null);
	  this.xo.on('chunk', this._chunkHandler.bind(this));
	  this.xo.once('finish', function(status, text) {
	    debug('finish', status, text);
	    self._chunkHandler(status, text);
	    self.xo = null;
	    var reason = status === 200 ? 'network' : 'permanent';
	    debug('close', reason);
	    self.emit('close', null, reason);
	    self._cleanup();
	  });
	}

	inherits(XhrReceiver, EventEmitter);

	XhrReceiver.prototype._chunkHandler = function(status, text) {
	  debug('_chunkHandler', status);
	  if (status !== 200 || !text) {
	    return;
	  }

	  for (var idx = -1; ; this.bufferPosition += idx + 1) {
	    var buf = text.slice(this.bufferPosition);
	    idx = buf.indexOf('\n');
	    if (idx === -1) {
	      break;
	    }
	    var msg = buf.slice(0, idx);
	    if (msg) {
	      debug('message', msg);
	      this.emit('message', msg);
	    }
	  }
	};

	XhrReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  this.removeAllListeners();
	};

	XhrReceiver.prototype.abort = function() {
	  debug('abort');
	  if (this.xo) {
	    this.xo.close();
	    debug('close');
	    this.emit('close', null, 'user');
	    this.xo = null;
	  }
	  this._cleanup();
	};

	module.exports = XhrReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , XhrDriver = __webpack_require__(174)
	  ;

	function XHRCorsObject(method, url, payload, opts) {
	  XhrDriver.call(this, method, url, payload, opts);
	}

	inherits(XHRCorsObject, XhrDriver);

	XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

	module.exports = XHRCorsObject;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _interleave = __webpack_require__(416);

	var _interleave2 = _interopRequireDefault(_interleave);

	var _flatten = __webpack_require__(104);

	var _flatten2 = _interopRequireDefault(_flatten);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var babelPluginFlowReactPropTypes_proptype_RuleSet = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_RuleSet || __webpack_require__(2).PropTypes.any;

	var babelPluginFlowReactPropTypes_proptype_Interpolation = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Interpolation || __webpack_require__(2).PropTypes.any;

	exports.default = function (strings) {
	  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    interpolations[_key - 1] = arguments[_key];
	  }

	  return (0, _flatten2.default)((0, _interleave2.default)(strings, interpolations));
	};

	module.exports = exports['default'];

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.CHANNEL = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _isFunction = __webpack_require__(435);

	var _isFunction2 = _interopRequireDefault(_isFunction);

	var _isPlainObject = __webpack_require__(198);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	var _createBroadcast = __webpack_require__(185);

	var _createBroadcast2 = _interopRequireDefault(_createBroadcast);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	/* globals React$Element */


	// NOTE: DO NOT CHANGE, changing this is a semver major change!
	var babelPluginFlowReactPropTypes_proptype_Broadcast = __webpack_require__(185).babelPluginFlowReactPropTypes_proptype_Broadcast || __webpack_require__(2).PropTypes.any;

	var CHANNEL = exports.CHANNEL = '__styled-components__';

	Object.defineProperty(module.exports, 'babelPluginFlowReactPropTypes_proptype_Theme', __webpack_require__(2).PropTypes.shape({}));

	/**
	 * Provide a theme to an entire react component tree via context and event listeners (have to do
	 * both context and event emitter as pure components block context updates)
	 */
	var ThemeProvider = function (_Component) {
	  _inherits(ThemeProvider, _Component);

	  function ThemeProvider() {
	    _classCallCheck(this, ThemeProvider);

	    var _this = _possibleConstructorReturn(this, (ThemeProvider.__proto__ || Object.getPrototypeOf(ThemeProvider)).call(this));

	    _this.getTheme = _this.getTheme.bind(_this);
	    return _this;
	  }

	  _createClass(ThemeProvider, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _this2 = this;

	      // If there is a ThemeProvider wrapper anywhere around this theme provider, merge this theme
	      // with the outer theme
	      if (this.context[CHANNEL]) {
	        var subscribe = this.context[CHANNEL];
	        this.unsubscribeToOuter = subscribe(function (theme) {
	          _this2.outerTheme = theme;
	        });
	      }
	      this.broadcast = (0, _createBroadcast2.default)(this.getTheme());
	    }
	  }, {
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return _extends({}, this.context, _defineProperty({}, CHANNEL, this.broadcast.subscribe));
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (this.props.theme !== nextProps.theme) this.broadcast.publish(this.getTheme(nextProps.theme));
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.context[CHANNEL]) {
	        this.unsubscribeToOuter();
	      }
	    }

	    // Get the theme from the props, supporting both (outerTheme) => {} as well as object notation

	  }, {
	    key: 'getTheme',
	    value: function getTheme(passedTheme) {
	      var theme = passedTheme || this.props.theme;
	      if ((0, _isFunction2.default)(theme)) {
	        var mergedTheme = theme(this.outerTheme);
	        if (!(0, _isPlainObject2.default)(mergedTheme)) {
	          throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');
	        }
	        return mergedTheme;
	      }
	      if (!(0, _isPlainObject2.default)(theme)) {
	        throw new Error('[ThemeProvider] Please make your theme prop a plain object');
	      }
	      return _extends({}, this.outerTheme, theme);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!this.props.children) {
	        return null;
	      }
	      return _react2.default.Children.only(this.props.children);
	    }
	  }]);

	  return ThemeProvider;
	}(_react.Component);

	ThemeProvider.propTypes = {
	  children: __webpack_require__(2).PropTypes.any,
	  theme: __webpack_require__(2).PropTypes.oneOfType([__webpack_require__(2).PropTypes.shape({}), __webpack_require__(2).PropTypes.func]).isRequired
	};


	ThemeProvider.childContextTypes = _defineProperty({}, CHANNEL, _react.PropTypes.func.isRequired);
	ThemeProvider.contextTypes = _defineProperty({}, CHANNEL, _react.PropTypes.func);

	exports.default = ThemeProvider;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _parse = __webpack_require__(191);

	var _parse2 = _interopRequireDefault(_parse);

	var _root = __webpack_require__(109);

	var _root2 = _interopRequireDefault(_root);

	var _rule = __webpack_require__(110);

	var _rule2 = _interopRequireDefault(_rule);

	var _atRule = __webpack_require__(105);

	var _atRule2 = _interopRequireDefault(_atRule);

	var _declaration = __webpack_require__(189);

	var _declaration2 = _interopRequireDefault(_declaration);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	var _comment = __webpack_require__(106);

	var _comment2 = _interopRequireDefault(_comment);

	var _node = __webpack_require__(108);

	var _node2 = _interopRequireDefault(_node);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	function cleanSource(nodes) {
	    return nodes.map(function (i) {
	        if (i.nodes) i.nodes = cleanSource(i.nodes);
	        delete i.source;
	        return i;
	    });
	}

	/**
	 * @callback childCondition
	 * @param {Node} node    - container child
	 * @param {number} index - child index
	 * @param {Node[]} nodes - all container children
	 * @return {boolean}
	 */

	/**
	 * @callback childIterator
	 * @param {Node} node    - container child
	 * @param {number} index - child index
	 * @return {false|undefined} returning `false` will break iteration
	 */

	/**
	 * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes
	 * inherit some common methods to help work with their children.
	 *
	 * Note that all containers can store any content. If you write a rule inside
	 * a rule, PostCSS will parse it.
	 *
	 * @extends Node
	 * @abstract
	 */

	var Container = function (_Node) {
	    _inherits(Container, _Node);

	    function Container() {
	        _classCallCheck(this, Container);

	        return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
	    }

	    _createClass(Container, [{
	        key: 'push',
	        value: function push(child) {
	            child.parent = this;
	            this.nodes.push(child);
	            return this;
	        }

	        /**
	         * Iterates through the container’s immediate children,
	         * calling `callback` for each child.
	         *
	         * Returning `false` in the callback will break iteration.
	         *
	         * This method only iterates through the container’s immediate children.
	         * If you need to recursively iterate through all the container’s descendant
	         * nodes, use {@link Container#walk}.
	         *
	         * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe
	         * if you are mutating the array of child nodes during iteration.
	         * PostCSS will adjust the current index to match the mutations.
	         *
	         * @param {childIterator} callback - iterator receives each node and index
	         *
	         * @return {false|undefined} returns `false` if iteration was broke
	         *
	         * @example
	         * const root = postcss.parse('a { color: black; z-index: 1 }');
	         * const rule = root.first;
	         *
	         * for ( let decl of rule.nodes ) {
	         *     decl.cloneBefore({ prop: '-webkit-' + decl.prop });
	         *     // Cycle will be infinite, because cloneBefore moves the current node
	         *     // to the next index
	         * }
	         *
	         * rule.each(decl => {
	         *     decl.cloneBefore({ prop: '-webkit-' + decl.prop });
	         *     // Will be executed only for color and z-index
	         * });
	         */

	    }, {
	        key: 'each',
	        value: function each(callback) {
	            if (!this.lastEach) this.lastEach = 0;
	            if (!this.indexes) this.indexes = {};

	            this.lastEach += 1;
	            var id = this.lastEach;
	            this.indexes[id] = 0;

	            if (!this.nodes) return undefined;

	            var index = void 0,
	                result = void 0;
	            while (this.indexes[id] < this.nodes.length) {
	                index = this.indexes[id];
	                result = callback(this.nodes[index], index);
	                if (result === false) break;

	                this.indexes[id] += 1;
	            }

	            delete this.indexes[id];

	            return result;
	        }

	        /**
	         * Traverses the container’s descendant nodes, calling callback
	         * for each node.
	         *
	         * Like container.each(), this method is safe to use
	         * if you are mutating arrays during iteration.
	         *
	         * If you only need to iterate through the container’s immediate children,
	         * use {@link Container#each}.
	         *
	         * @param {childIterator} callback - iterator receives each node and index
	         *
	         * @return {false|undefined} returns `false` if iteration was broke
	         *
	         * @example
	         * root.walk(node => {
	         *   // Traverses all descendant nodes.
	         * });
	         */

	    }, {
	        key: 'walk',
	        value: function walk(callback) {
	            return this.each(function (child, i) {
	                var result = callback(child, i);
	                if (result !== false && child.walk) {
	                    result = child.walk(callback);
	                }
	                return result;
	            });
	        }

	        /**
	         * Traverses the container’s descendant nodes, calling callback
	         * for each declaration node.
	         *
	         * If you pass a filter, iteration will only happen over declarations
	         * with matching properties.
	         *
	         * Like {@link Container#each}, this method is safe
	         * to use if you are mutating arrays during iteration.
	         *
	         * @param {string|RegExp} [prop]   - string or regular expression
	         *                                   to filter declarations by property name
	         * @param {childIterator} callback - iterator receives each node and index
	         *
	         * @return {false|undefined} returns `false` if iteration was broke
	         *
	         * @example
	         * root.walkDecls(decl => {
	         *   checkPropertySupport(decl.prop);
	         * });
	         *
	         * root.walkDecls('border-radius', decl => {
	         *   decl.remove();
	         * });
	         *
	         * root.walkDecls(/^background/, decl => {
	         *   decl.value = takeFirstColorFromGradient(decl.value);
	         * });
	         */

	    }, {
	        key: 'walkDecls',
	        value: function walkDecls(prop, callback) {
	            if (!callback) {
	                callback = prop;
	                return this.walk(function (child, i) {
	                    if (child.type === 'decl') {
	                        return callback(child, i);
	                    }
	                });
	            } else if (prop instanceof RegExp) {
	                return this.walk(function (child, i) {
	                    if (child.type === 'decl' && prop.test(child.prop)) {
	                        return callback(child, i);
	                    }
	                });
	            } else {
	                return this.walk(function (child, i) {
	                    if (child.type === 'decl' && child.prop === prop) {
	                        return callback(child, i);
	                    }
	                });
	            }
	        }

	        /**
	         * Traverses the container’s descendant nodes, calling callback
	         * for each rule node.
	         *
	         * If you pass a filter, iteration will only happen over rules
	         * with matching selectors.
	         *
	         * Like {@link Container#each}, this method is safe
	         * to use if you are mutating arrays during iteration.
	         *
	         * @param {string|RegExp} [selector] - string or regular expression
	         *                                     to filter rules by selector
	         * @param {childIterator} callback   - iterator receives each node and index
	         *
	         * @return {false|undefined} returns `false` if iteration was broke
	         *
	         * @example
	         * const selectors = [];
	         * root.walkRules(rule => {
	         *   selectors.push(rule.selector);
	         * });
	         * console.log(`Your CSS uses ${selectors.length} selectors`);
	         */

	    }, {
	        key: 'walkRules',
	        value: function walkRules(selector, callback) {
	            if (!callback) {
	                callback = selector;

	                return this.walk(function (child, i) {
	                    if (child.type === 'rule') {
	                        return callback(child, i);
	                    }
	                });
	            } else if (selector instanceof RegExp) {
	                return this.walk(function (child, i) {
	                    if (child.type === 'rule' && selector.test(child.selector)) {
	                        return callback(child, i);
	                    }
	                });
	            } else {
	                return this.walk(function (child, i) {
	                    if (child.type === 'rule' && child.selector === selector) {
	                        return callback(child, i);
	                    }
	                });
	            }
	        }

	        /**
	         * Traverses the container’s descendant nodes, calling callback
	         * for each at-rule node.
	         *
	         * If you pass a filter, iteration will only happen over at-rules
	         * that have matching names.
	         *
	         * Like {@link Container#each}, this method is safe
	         * to use if you are mutating arrays during iteration.
	         *
	         * @param {string|RegExp} [name]   - string or regular expression
	         *                                   to filter at-rules by name
	         * @param {childIterator} callback - iterator receives each node and index
	         *
	         * @return {false|undefined} returns `false` if iteration was broke
	         *
	         * @example
	         * root.walkAtRules(rule => {
	         *   if ( isOld(rule.name) ) rule.remove();
	         * });
	         *
	         * let first = false;
	         * root.walkAtRules('charset', rule => {
	         *   if ( !first ) {
	         *     first = true;
	         *   } else {
	         *     rule.remove();
	         *   }
	         * });
	         */

	    }, {
	        key: 'walkAtRules',
	        value: function walkAtRules(name, callback) {
	            if (!callback) {
	                callback = name;
	                return this.walk(function (child, i) {
	                    if (child.type === 'atrule') {
	                        return callback(child, i);
	                    }
	                });
	            } else if (name instanceof RegExp) {
	                return this.walk(function (child, i) {
	                    if (child.type === 'atrule' && name.test(child.name)) {
	                        return callback(child, i);
	                    }
	                });
	            } else {
	                return this.walk(function (child, i) {
	                    if (child.type === 'atrule' && child.name === name) {
	                        return callback(child, i);
	                    }
	                });
	            }
	        }

	        /**
	         * Traverses the container’s descendant nodes, calling callback
	         * for each comment node.
	         *
	         * Like {@link Container#each}, this method is safe
	         * to use if you are mutating arrays during iteration.
	         *
	         * @param {childIterator} callback - iterator receives each node and index
	         *
	         * @return {false|undefined} returns `false` if iteration was broke
	         *
	         * @example
	         * root.walkComments(comment => {
	         *   comment.remove();
	         * });
	         */

	    }, {
	        key: 'walkComments',
	        value: function walkComments(callback) {
	            return this.walk(function (child, i) {
	                if (child.type === 'comment') {
	                    return callback(child, i);
	                }
	            });
	        }

	        /**
	         * Inserts new nodes to the start of the container.
	         *
	         * @param {...(Node|object|string|Node[])} children - new nodes
	         *
	         * @return {Node} this node for methods chain
	         *
	         * @example
	         * const decl1 = postcss.decl({ prop: 'color', value: 'black' });
	         * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' });
	         * rule.append(decl1, decl2);
	         *
	         * root.append({ name: 'charset', params: '"UTF-8"' });  // at-rule
	         * root.append({ selector: 'a' });                       // rule
	         * rule.append({ prop: 'color', value: 'black' });       // declaration
	         * rule.append({ text: 'Comment' })                      // comment
	         *
	         * root.append('a {}');
	         * root.first.append('color: black; z-index: 1');
	         */

	    }, {
	        key: 'append',
	        value: function append() {
	            var _this2 = this;

	            for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {
	                children[_key] = arguments[_key];
	            }

	            children.forEach(function (child) {
	                var nodes = _this2.normalize(child, _this2.last);
	                nodes.forEach(function (node) {
	                    return _this2.nodes.push(node);
	                });
	            });
	            return this;
	        }

	        /**
	         * Inserts new nodes to the end of the container.
	         *
	         * @param {...(Node|object|string|Node[])} children - new nodes
	         *
	         * @return {Node} this node for methods chain
	         *
	         * @example
	         * const decl1 = postcss.decl({ prop: 'color', value: 'black' });
	         * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' });
	         * rule.prepend(decl1, decl2);
	         *
	         * root.append({ name: 'charset', params: '"UTF-8"' });  // at-rule
	         * root.append({ selector: 'a' });                       // rule
	         * rule.append({ prop: 'color', value: 'black' });       // declaration
	         * rule.append({ text: 'Comment' })                      // comment
	         *
	         * root.append('a {}');
	         * root.first.append('color: black; z-index: 1');
	         */

	    }, {
	        key: 'prepend',
	        value: function prepend() {
	            var _this3 = this;

	            for (var _len2 = arguments.length, children = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                children[_key2] = arguments[_key2];
	            }

	            children = children.reverse();
	            children.forEach(function (child) {
	                var nodes = _this3.normalize(child, _this3.first, 'prepend').reverse();
	                nodes.forEach(function (node) {
	                    return _this3.nodes.unshift(node);
	                });
	                for (var id in _this3.indexes) {
	                    _this3.indexes[id] = _this3.indexes[id] + nodes.length;
	                }
	            });
	            return this;
	        }
	    }, {
	        key: 'cleanRaws',
	        value: function cleanRaws(keepBetween) {
	            _get(Container.prototype.__proto__ || Object.getPrototypeOf(Container.prototype), 'cleanRaws', this).call(this, keepBetween);
	            if (this.nodes) {
	                this.nodes.forEach(function (node) {
	                    return node.cleanRaws(keepBetween);
	                });
	            }
	        }

	        /**
	         * Insert new node before old node within the container.
	         *
	         * @param {Node|number} exist             - child or child’s index.
	         * @param {Node|object|string|Node[]} add - new node
	         *
	         * @return {Node} this node for methods chain
	         *
	         * @example
	         * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }));
	         */

	    }, {
	        key: 'insertBefore',
	        value: function insertBefore(exist, add) {
	            var _this4 = this;

	            exist = this.index(exist);

	            var type = exist === 0 ? 'prepend' : false;
	            var nodes = this.normalize(add, this.nodes[exist], type).reverse();
	            nodes.forEach(function (node) {
	                return _this4.nodes.splice(exist, 0, node);
	            });

	            var index = void 0;
	            for (var id in this.indexes) {
	                index = this.indexes[id];
	                if (exist <= index) {
	                    this.indexes[id] = index + nodes.length;
	                }
	            }

	            return this;
	        }

	        /**
	         * Insert new node after old node within the container.
	         *
	         * @param {Node|number} exist             - child or child’s index
	         * @param {Node|object|string|Node[]} add - new node
	         *
	         * @return {Node} this node for methods chain
	         */

	    }, {
	        key: 'insertAfter',
	        value: function insertAfter(exist, add) {
	            var _this5 = this;

	            exist = this.index(exist);

	            var nodes = this.normalize(add, this.nodes[exist]).reverse();
	            nodes.forEach(function (node) {
	                return _this5.nodes.splice(exist + 1, 0, node);
	            });

	            var index = void 0;
	            for (var id in this.indexes) {
	                index = this.indexes[id];
	                if (exist < index) {
	                    this.indexes[id] = index + nodes.length;
	                }
	            }

	            return this;
	        }
	    }, {
	        key: 'remove',
	        value: function remove(child) {
	            if (typeof child !== 'undefined') {
	                (0, _warnOnce2.default)('Container#remove is deprecated. ' + 'Use Container#removeChild');
	                this.removeChild(child);
	            } else {
	                _get(Container.prototype.__proto__ || Object.getPrototypeOf(Container.prototype), 'remove', this).call(this);
	            }
	            return this;
	        }

	        /**
	         * Removes node from the container and cleans the parent properties
	         * from the node and its children.
	         *
	         * @param {Node|number} child - child or child’s index
	         *
	         * @return {Node} this node for methods chain
	         *
	         * @example
	         * rule.nodes.length  //=> 5
	         * rule.removeChild(decl);
	         * rule.nodes.length  //=> 4
	         * decl.parent        //=> undefined
	         */

	    }, {
	        key: 'removeChild',
	        value: function removeChild(child) {
	            child = this.index(child);
	            this.nodes[child].parent = undefined;
	            this.nodes.splice(child, 1);

	            var index = void 0;
	            for (var id in this.indexes) {
	                index = this.indexes[id];
	                if (index >= child) {
	                    this.indexes[id] = index - 1;
	                }
	            }

	            return this;
	        }

	        /**
	         * Removes all children from the container
	         * and cleans their parent properties.
	         *
	         * @return {Node} this node for methods chain
	         *
	         * @example
	         * rule.removeAll();
	         * rule.nodes.length //=> 0
	         */

	    }, {
	        key: 'removeAll',
	        value: function removeAll() {
	            this.nodes.forEach(function (node) {
	                return node.parent = undefined;
	            });
	            this.nodes = [];
	            return this;
	        }

	        /**
	         * Passes all declaration values within the container that match pattern
	         * through callback, replacing those values with the returned result
	         * of callback.
	         *
	         * This method is useful if you are using a custom unit or function
	         * and need to iterate through all values.
	         *
	         * @param {string|RegExp} pattern      - replace pattern
	         * @param {object} opts                - options to speed up the search
	         * @param {string|string[]} opts.props - an array of property names
	         * @param {string} opts.fast           - string that’s used
	         *                                       to narrow down values and speed up
	                                                 the regexp search
	         * @param {function|string} callback   - string to replace pattern
	         *                                       or callback that returns a new
	         *                                       value.
	         *                                       The callback will receive
	         *                                       the same arguments as those
	         *                                       passed to a function parameter
	         *                                       of `String#replace`.
	         *
	         * @return {Node} this node for methods chain
	         *
	         * @example
	         * root.replaceValues(/\d+rem/, { fast: 'rem' }, string => {
	         *   return 15 * parseInt(string) + 'px';
	         * });
	         */

	    }, {
	        key: 'replaceValues',
	        value: function replaceValues(pattern, opts, callback) {
	            if (!callback) {
	                callback = opts;
	                opts = {};
	            }

	            this.walkDecls(function (decl) {
	                if (opts.props && opts.props.indexOf(decl.prop) === -1) return;
	                if (opts.fast && decl.value.indexOf(opts.fast) === -1) return;

	                decl.value = decl.value.replace(pattern, callback);
	            });

	            return this;
	        }

	        /**
	         * Returns `true` if callback returns `true`
	         * for all of the container’s children.
	         *
	         * @param {childCondition} condition - iterator returns true or false.
	         *
	         * @return {boolean} is every child pass condition
	         *
	         * @example
	         * const noPrefixes = rule.every(i => i.prop[0] !== '-');
	         */

	    }, {
	        key: 'every',
	        value: function every(condition) {
	            return this.nodes.every(condition);
	        }

	        /**
	         * Returns `true` if callback returns `true` for (at least) one
	         * of the container’s children.
	         *
	         * @param {childCondition} condition - iterator returns true or false.
	         *
	         * @return {boolean} is some child pass condition
	         *
	         * @example
	         * const hasPrefix = rule.some(i => i.prop[0] === '-');
	         */

	    }, {
	        key: 'some',
	        value: function some(condition) {
	            return this.nodes.some(condition);
	        }

	        /**
	         * Returns a `child`’s index within the {@link Container#nodes} array.
	         *
	         * @param {Node} child - child of the current container.
	         *
	         * @return {number} child index
	         *
	         * @example
	         * rule.index( rule.nodes[2] ) //=> 2
	         */

	    }, {
	        key: 'index',
	        value: function index(child) {
	            if (typeof child === 'number') {
	                return child;
	            } else {
	                return this.nodes.indexOf(child);
	            }
	        }

	        /**
	         * The container’s first child.
	         *
	         * @type {Node}
	         *
	         * @example
	         * rule.first == rules.nodes[0];
	         */

	    }, {
	        key: 'normalize',
	        value: function normalize(nodes, sample) {
	            var _this6 = this;

	            if (typeof nodes === 'string') {
	                nodes = cleanSource((0, _parse2.default)(nodes).nodes);
	            } else if (!Array.isArray(nodes)) {
	                if (nodes.type === 'root') {
	                    nodes = nodes.nodes;
	                } else if (nodes.type) {
	                    nodes = [nodes];
	                } else if (nodes.prop) {
	                    if (typeof nodes.value === 'undefined') {
	                        throw new Error('Value field is missed in node creation');
	                    } else if (typeof nodes.value !== 'string') {
	                        nodes.value = String(nodes.value);
	                    }
	                    nodes = [new _declaration2.default(nodes)];
	                } else if (nodes.selector) {
	                    nodes = [new _rule2.default(nodes)];
	                } else if (nodes.name) {
	                    nodes = [new _atRule2.default(nodes)];
	                } else if (nodes.text) {
	                    nodes = [new _comment2.default(nodes)];
	                } else {
	                    throw new Error('Unknown node type in node creation');
	                }
	            }

	            var processed = nodes.map(function (i) {
	                if (typeof i.raws === 'undefined') i = _this6.rebuild(i);

	                if (i.parent) i = i.clone();
	                if (typeof i.raws.before === 'undefined') {
	                    if (sample && typeof sample.raws.before !== 'undefined') {
	                        i.raws.before = sample.raws.before.replace(/[^\s]/g, '');
	                    }
	                }
	                i.parent = _this6;
	                return i;
	            });

	            return processed;
	        }
	    }, {
	        key: 'rebuild',
	        value: function rebuild(node, parent) {
	            var _this7 = this;

	            var fix = void 0;
	            if (node.type === 'root') {
	                fix = new _root2.default();
	            } else if (node.type === 'atrule') {
	                fix = new _atRule2.default();
	            } else if (node.type === 'rule') {
	                fix = new _rule2.default();
	            } else if (node.type === 'decl') {
	                fix = new _declaration2.default();
	            } else if (node.type === 'comment') {
	                fix = new _comment2.default();
	            }

	            for (var i in node) {
	                if (i === 'nodes') {
	                    fix.nodes = node.nodes.map(function (j) {
	                        return _this7.rebuild(j, fix);
	                    });
	                } else if (i === 'parent' && parent) {
	                    fix.parent = parent;
	                } else if (node.hasOwnProperty(i)) {
	                    fix[i] = node[i];
	                }
	            }

	            return fix;
	        }
	    }, {
	        key: 'eachInside',
	        value: function eachInside(callback) {
	            (0, _warnOnce2.default)('Container#eachInside is deprecated. ' + 'Use Container#walk instead.');
	            return this.walk(callback);
	        }
	    }, {
	        key: 'eachDecl',
	        value: function eachDecl(prop, callback) {
	            (0, _warnOnce2.default)('Container#eachDecl is deprecated. ' + 'Use Container#walkDecls instead.');
	            return this.walkDecls(prop, callback);
	        }
	    }, {
	        key: 'eachRule',
	        value: function eachRule(selector, callback) {
	            (0, _warnOnce2.default)('Container#eachRule is deprecated. ' + 'Use Container#walkRules instead.');
	            return this.walkRules(selector, callback);
	        }
	    }, {
	        key: 'eachAtRule',
	        value: function eachAtRule(name, callback) {
	            (0, _warnOnce2.default)('Container#eachAtRule is deprecated. ' + 'Use Container#walkAtRules instead.');
	            return this.walkAtRules(name, callback);
	        }
	    }, {
	        key: 'eachComment',
	        value: function eachComment(callback) {
	            (0, _warnOnce2.default)('Container#eachComment is deprecated. ' + 'Use Container#walkComments instead.');
	            return this.walkComments(callback);
	        }
	    }, {
	        key: 'first',
	        get: function get() {
	            if (!this.nodes) return undefined;
	            return this.nodes[0];
	        }

	        /**
	         * The container’s last child.
	         *
	         * @type {Node}
	         *
	         * @example
	         * rule.last == rule.nodes[rule.nodes.length - 1];
	         */

	    }, {
	        key: 'last',
	        get: function get() {
	            if (!this.nodes) return undefined;
	            return this.nodes[this.nodes.length - 1];
	        }
	    }, {
	        key: 'semicolon',
	        get: function get() {
	            (0, _warnOnce2.default)('Node#semicolon is deprecated. Use Node#raws.semicolon');
	            return this.raws.semicolon;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Node#semicolon is deprecated. Use Node#raws.semicolon');
	            this.raws.semicolon = val;
	        }
	    }, {
	        key: 'after',
	        get: function get() {
	            (0, _warnOnce2.default)('Node#after is deprecated. Use Node#raws.after');
	            return this.raws.after;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Node#after is deprecated. Use Node#raws.after');
	            this.raws.after = val;
	        }

	        /**
	         * @memberof Container#
	         * @member {Node[]} nodes - an array containing the container’s children
	         *
	         * @example
	         * const root = postcss.parse('a { color: black }');
	         * root.nodes.length           //=> 1
	         * root.nodes[0].selector      //=> 'a'
	         * root.nodes[0].nodes[0].prop //=> 'color'
	         */

	    }]);

	    return Container;
	}(_node2.default);

	exports.default = Container;
	module.exports = exports['default'];

/***/ },
/* 66 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactNoopUpdateQueue = __webpack_require__(70);

	var canDefineProperty = __webpack_require__(72);
	var emptyObject = __webpack_require__(67);
	var invariant = __webpack_require__(27);
	var warning = __webpack_require__(16);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactCurrentOwner = __webpack_require__(49);

	var invariant = __webpack_require__(27);
	var warning = __webpack_require__(16);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(16);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 74 */
/***/ function(module, exports) {

	'use strict';

	var toString = Object.prototype.toString

	  , id = toString.call((function () { return arguments; }()));

	module.exports = function (x) { return (toString.call(x) === id); };


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(240)()
		? Object.assign
		: __webpack_require__(241);


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(252)()
		? String.prototype.contains
		: __webpack_require__(253);


/***/ },
/* 77 */
/***/ function(module, exports) {

	'use strict';

	var toString = Object.prototype.toString

	  , id = toString.call('');

	module.exports = function (x) {
		return (typeof x === 'string') || (x && (typeof x === 'object') &&
			((x instanceof String) || (toString.call(x) === id))) || false;
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clear    = __webpack_require__(122)
	  , assign   = __webpack_require__(75)
	  , callable = __webpack_require__(30)
	  , value    = __webpack_require__(22)
	  , d        = __webpack_require__(26)
	  , autoBind = __webpack_require__(216)
	  , Symbol   = __webpack_require__(39)

	  , defineProperty = Object.defineProperty
	  , defineProperties = Object.defineProperties
	  , Iterator;

	module.exports = Iterator = function (list, context) {
		if (!(this instanceof Iterator)) return new Iterator(list, context);
		defineProperties(this, {
			__list__: d('w', value(list)),
			__context__: d('w', context),
			__nextIndex__: d('w', 0)
		});
		if (!context) return;
		callable(context.on);
		context.on('_add', this._onAdd);
		context.on('_delete', this._onDelete);
		context.on('_clear', this._onClear);
	};

	defineProperties(Iterator.prototype, assign({
		constructor: d(Iterator),
		_next: d(function () {
			var i;
			if (!this.__list__) return;
			if (this.__redo__) {
				i = this.__redo__.shift();
				if (i !== undefined) return i;
			}
			if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
			this._unBind();
		}),
		next: d(function () { return this._createResult(this._next()); }),
		_createResult: d(function (i) {
			if (i === undefined) return { done: true, value: undefined };
			return { done: false, value: this._resolve(i) };
		}),
		_resolve: d(function (i) { return this.__list__[i]; }),
		_unBind: d(function () {
			this.__list__ = null;
			delete this.__redo__;
			if (!this.__context__) return;
			this.__context__.off('_add', this._onAdd);
			this.__context__.off('_delete', this._onDelete);
			this.__context__.off('_clear', this._onClear);
			this.__context__ = null;
		}),
		toString: d(function () { return '[object Iterator]'; })
	}, autoBind({
		_onAdd: d(function (index) {
			if (index >= this.__nextIndex__) return;
			++this.__nextIndex__;
			if (!this.__redo__) {
				defineProperty(this, '__redo__', d('c', [index]));
				return;
			}
			this.__redo__.forEach(function (redo, i) {
				if (redo >= index) this.__redo__[i] = ++redo;
			}, this);
			this.__redo__.push(index);
		}),
		_onDelete: d(function (index) {
			var i;
			if (index >= this.__nextIndex__) return;
			--this.__nextIndex__;
			if (!this.__redo__) return;
			i = this.__redo__.indexOf(index);
			if (i !== -1) this.__redo__.splice(i, 1);
			this.__redo__.forEach(function (redo, i) {
				if (redo > index) this.__redo__[i] = --redo;
			}, this);
		}),
		_onClear: d(function () {
			if (this.__redo__) clear.call(this.__redo__);
			this.__nextIndex__ = 0;
		})
	})));

	defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
		return this;
	}));
	defineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));


/***/ },
/* 79 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (value) {
	  if (Array.isArray(value)) value = value.join(',');

	  return value.match(/-webkit-|-moz-|-ms-/) !== null;
	};

	module.exports = exports['default'];

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var sentenceCase = __webpack_require__(377)

	/**
	 * Param case a string.
	 *
	 * @param  {String} string
	 * @param  {String} [locale]
	 * @return {String}
	 */
	module.exports = function (string, locale) {
	  return sentenceCase(string, locale, '-')
	}


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(24);

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(31);
	var ReactPerf = __webpack_require__(13);

	var quoteAttributeValueForBrowser = __webpack_require__(374);
	var warning = __webpack_require__(6);

	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};

	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}

	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}

	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },

	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },

	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }

	};

	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});

	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(163);
	var ReactPropTypeLocations = __webpack_require__(55);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}

	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}

	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};

	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },

	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};

	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(86);
	var ReactMount = __webpack_require__(9);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(143);
	var DOMPropertyOperations = __webpack_require__(82);
	var ReactMount = __webpack_require__(9);
	var ReactPerf = __webpack_require__(13);

	var invariant = __webpack_require__(3);

	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(20);
	var ReactElement = __webpack_require__(12);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactUpdates = __webpack_require__(15);

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

	    if (!internalInstance) {
	      return;
	    }

	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },

	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },

	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

	    enqueueUpdate(topLevelWrapper);
	  },

	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */

	'use strict';

	module.exports = '0.14.7';

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(20);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactMount = __webpack_require__(9);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}

	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 90 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;

/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;

/***/ },
/* 92 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;

/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(333);
	var ReactEmptyComponent = __webpack_require__(155);
	var ReactNativeComponent = __webpack_require__(161);

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;

	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);
	var escapeTextContentForBrowser = __webpack_require__(59);
	var setInnerHTML = __webpack_require__(60);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }

	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(20);
	var ReactElement = __webpack_require__(12);
	var ReactInstanceHandles = __webpack_require__(34);

	var getIteratorFn = __webpack_require__(93);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */

	'use strict';

	var assign = __webpack_require__(5);
	var emptyFunction = __webpack_require__(17);
	var warning = __webpack_require__(6);

	var validateDOMNesting = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.

	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];

	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);

	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

	  var emptyAncestorInfo = {
	    parentTag: null,

	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,

	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }

	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.parentTag = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };

	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }

	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };

	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':

	      case 'pre':
	      case 'listing':

	      case 'table':

	      case 'hr':

	      case 'xmp':

	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }

	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };

	  var didWarn = {};

	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;

	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;

	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);

	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;

	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }

	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;

	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };

	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}

	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 100 */
/***/ function(module, exports) {

	'use strict';

	function Event(eventType) {
	  this.type = eventType;
	}

	Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
	  this.type = eventType;
	  this.bubbles = canBubble;
	  this.cancelable = cancelable;
	  this.timeStamp = +new Date();
	  return this;
	};

	Event.prototype.stopPropagation = function() {};
	Event.prototype.preventDefault  = function() {};

	Event.CAPTURING_PHASE = 1;
	Event.AT_TARGET       = 2;
	Event.BUBBLING_PHASE  = 3;

	module.exports = Event;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var inherits = __webpack_require__(4)
	  , IframeTransport = __webpack_require__(178)
	  , objectUtils = __webpack_require__(103)
	  ;

	module.exports = function(transport) {

	  function IframeWrapTransport(transUrl, baseUrl) {
	    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
	  }

	  inherits(IframeWrapTransport, IframeTransport);

	  IframeWrapTransport.enabled = function(url, info) {
	    if (!global.document) {
	      return false;
	    }

	    var iframeInfo = objectUtils.extend({}, info);
	    iframeInfo.sameOrigin = true;
	    return transport.enabled(iframeInfo) && IframeTransport.enabled();
	  };

	  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
	  IframeWrapTransport.needBody = true;
	  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

	  IframeWrapTransport.facadeTransport = transport;

	  return IframeWrapTransport;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var EventEmitter = __webpack_require__(10).EventEmitter
	  , inherits = __webpack_require__(4)
	  , eventUtils = __webpack_require__(25)
	  , browser = __webpack_require__(46)
	  , urlUtils = __webpack_require__(14)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:sender:xdr');
	}

	// References:
	//   http://ajaxian.com/archives/100-line-ajax-wrapper
	//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

	function XDRObject(method, url, payload) {
	  debug(method, url);
	  var self = this;
	  EventEmitter.call(this);

	  setTimeout(function() {
	    self._start(method, url, payload);
	  }, 0);
	}

	inherits(XDRObject, EventEmitter);

	XDRObject.prototype._start = function(method, url, payload) {
	  debug('_start');
	  var self = this;
	  var xdr = new global.XDomainRequest();
	  // IE caches even POSTs
	  url = urlUtils.addQuery(url, 't=' + (+new Date()));

	  xdr.onerror = function() {
	    debug('onerror');
	    self._error();
	  };
	  xdr.ontimeout = function() {
	    debug('ontimeout');
	    self._error();
	  };
	  xdr.onprogress = function() {
	    debug('progress', xdr.responseText);
	    self.emit('chunk', 200, xdr.responseText);
	  };
	  xdr.onload = function() {
	    debug('load');
	    self.emit('finish', 200, xdr.responseText);
	    self._cleanup(false);
	  };
	  this.xdr = xdr;
	  this.unloadRef = eventUtils.unloadAdd(function() {
	    self._cleanup(true);
	  });
	  try {
	    // Fails with AccessDenied if port number is bogus
	    this.xdr.open(method, url);
	    if (this.timeout) {
	      this.xdr.timeout = this.timeout;
	    }
	    this.xdr.send(payload);
	  } catch (x) {
	    this._error();
	  }
	};

	XDRObject.prototype._error = function() {
	  this.emit('finish', 0, '');
	  this._cleanup(false);
	};

	XDRObject.prototype._cleanup = function(abort) {
	  debug('cleanup', abort);
	  if (!this.xdr) {
	    return;
	  }
	  this.removeAllListeners();
	  eventUtils.unloadDel(this.unloadRef);

	  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
	  if (abort) {
	    try {
	      this.xdr.abort();
	    } catch (x) {}
	  }
	  this.unloadRef = this.xdr = null;
	};

	XDRObject.prototype.close = function() {
	  debug('close');
	  this._cleanup(true);
	};

	// IE 8/9 if the request target uses the same scheme - #79
	XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

	module.exports = XDRObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 103 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  isObject: function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  }

	, extend: function(obj) {
	    if (!this.isObject(obj)) {
	      return obj;
	    }
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      source = arguments[i];
	      for (prop in source) {
	        if (Object.prototype.hasOwnProperty.call(source, prop)) {
	          obj[prop] = source[prop];
	        }
	      }
	    }
	    return obj;
	  }
	};


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.objToCss = undefined;

	var _hyphenateStyleName = __webpack_require__(195);

	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

	var _isPlainObject = __webpack_require__(198);

	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var babelPluginFlowReactPropTypes_proptype_Interpolation = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Interpolation || __webpack_require__(2).PropTypes.any;

	var objToCss = exports.objToCss = function objToCss(obj) {
	  return Object.keys(obj).map(function (key) {
	    return (0, _hyphenateStyleName2.default)(key) + ': ' + obj[key] + ';';
	  }).join(' ');
	};

	var flatten = function flatten(chunks, executionContext) {
	  return chunks.reduce(function (ruleSet, chunk) {
	    /* Remove falsey values */
	    if (chunk === undefined || chunk === null || chunk === false || chunk === '') return ruleSet;
	    /* Flatten ruleSet */
	    if (Array.isArray(chunk)) return [].concat(_toConsumableArray(ruleSet), _toConsumableArray(flatten(chunk, executionContext)));
	    /* Either execute or defer the function */
	    if (typeof chunk === 'function') {
	      return executionContext ? ruleSet.concat.apply(ruleSet, _toConsumableArray(flatten([chunk(executionContext)], executionContext))) : ruleSet.concat(chunk);
	    }

	    /* Handle objects */
	    // $FlowIssue have to add %checks somehow to isPlainObject
	    return ruleSet.concat((0, _isPlainObject2.default)(chunk) ? objToCss(chunk) : chunk.toString());
	  }, []);
	};

	exports.default = flatten;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _container = __webpack_require__(65);

	var _container2 = _interopRequireDefault(_container);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Represents an at-rule.
	 *
	 * If it’s followed in the CSS by a {} block, this node will have
	 * a nodes property representing its children.
	 *
	 * @extends Container
	 *
	 * @example
	 * const root = postcss.parse('@charset "UTF-8"; @media print {}');
	 *
	 * const charset = root.first;
	 * charset.type  //=> 'atrule'
	 * charset.nodes //=> undefined
	 *
	 * const media = root.last;
	 * media.nodes   //=> []
	 */
	var AtRule = function (_Container) {
	    _inherits(AtRule, _Container);

	    function AtRule(defaults) {
	        _classCallCheck(this, AtRule);

	        var _this = _possibleConstructorReturn(this, (AtRule.__proto__ || Object.getPrototypeOf(AtRule)).call(this, defaults));

	        _this.type = 'atrule';
	        return _this;
	    }

	    _createClass(AtRule, [{
	        key: 'append',
	        value: function append() {
	            var _get2;

	            if (!this.nodes) this.nodes = [];

	            for (var _len = arguments.length, children = Array(_len), _key = 0; _key < _len; _key++) {
	                children[_key] = arguments[_key];
	            }

	            return (_get2 = _get(AtRule.prototype.__proto__ || Object.getPrototypeOf(AtRule.prototype), 'append', this)).call.apply(_get2, [this].concat(children));
	        }
	    }, {
	        key: 'prepend',
	        value: function prepend() {
	            var _get3;

	            if (!this.nodes) this.nodes = [];

	            for (var _len2 = arguments.length, children = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                children[_key2] = arguments[_key2];
	            }

	            return (_get3 = _get(AtRule.prototype.__proto__ || Object.getPrototypeOf(AtRule.prototype), 'prepend', this)).call.apply(_get3, [this].concat(children));
	        }
	    }, {
	        key: 'afterName',
	        get: function get() {
	            (0, _warnOnce2.default)('AtRule#afterName was deprecated. Use AtRule#raws.afterName');
	            return this.raws.afterName;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('AtRule#afterName was deprecated. Use AtRule#raws.afterName');
	            this.raws.afterName = val;
	        }
	    }, {
	        key: '_params',
	        get: function get() {
	            (0, _warnOnce2.default)('AtRule#_params was deprecated. Use AtRule#raws.params');
	            return this.raws.params;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('AtRule#_params was deprecated. Use AtRule#raws.params');
	            this.raws.params = val;
	        }

	        /**
	         * @memberof AtRule#
	         * @member {string} name - the at-rule’s name immediately follows the `@`
	         *
	         * @example
	         * const root  = postcss.parse('@media print {}');
	         * media.name //=> 'media'
	         * const media = root.first;
	         */

	        /**
	         * @memberof AtRule#
	         * @member {string} params - the at-rule’s parameters, the values
	         *                           that follow the at-rule’s name but precede
	         *                           any {} block
	         *
	         * @example
	         * const root  = postcss.parse('@media print, screen {}');
	         * const media = root.first;
	         * media.params //=> 'print, screen'
	         */

	        /**
	         * @memberof AtRule#
	         * @member {object} raws - Information to generate byte-to-byte equal
	         *                         node string as it was in the origin input.
	         *
	         * Every parser saves its own properties,
	         * but the default CSS parser uses:
	         *
	         * * `before`: the space symbols before the node. It also stores `*`
	         *   and `_` symbols before the declaration (IE hack).
	         * * `after`: the space symbols after the last child of the node
	         *   to the end of the node.
	         * * `between`: the symbols between the property and value
	         *   for declarations, selector and `{` for rules, or last parameter
	         *   and `{` for at-rules.
	         * * `semicolon`: contains true if the last child has
	         *   an (optional) semicolon.
	         * * `afterName`: the space between the at-rule name and its parameters.
	         *
	         * PostCSS cleans at-rule parameters from comments and extra spaces,
	         * but it stores origin content in raws properties.
	         * As such, if you don’t change a declaration’s value,
	         * PostCSS will use the raw value with comments.
	         *
	         * @example
	         * const root = postcss.parse('  @media\nprint {\n}')
	         * root.first.first.raws //=> { before: '  ',
	         *                       //     between: ' ',
	         *                       //     afterName: '\n',
	         *                       //     after: '\n' }
	         */

	    }]);

	    return AtRule;
	}(_container2.default);

	exports.default = AtRule;
	module.exports = exports['default'];

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	var _node = __webpack_require__(108);

	var _node2 = _interopRequireDefault(_node);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Represents a comment between declarations or statements (rule and at-rules).
	 *
	 * Comments inside selectors, at-rule parameters, or declaration values
	 * will be stored in the `raws` properties explained above.
	 *
	 * @extends Node
	 */
	var Comment = function (_Node) {
	    _inherits(Comment, _Node);

	    function Comment(defaults) {
	        _classCallCheck(this, Comment);

	        var _this = _possibleConstructorReturn(this, (Comment.__proto__ || Object.getPrototypeOf(Comment)).call(this, defaults));

	        _this.type = 'comment';
	        return _this;
	    }

	    _createClass(Comment, [{
	        key: 'left',
	        get: function get() {
	            (0, _warnOnce2.default)('Comment#left was deprecated. Use Comment#raws.left');
	            return this.raws.left;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Comment#left was deprecated. Use Comment#raws.left');
	            this.raws.left = val;
	        }
	    }, {
	        key: 'right',
	        get: function get() {
	            (0, _warnOnce2.default)('Comment#right was deprecated. Use Comment#raws.right');
	            return this.raws.right;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Comment#right was deprecated. Use Comment#raws.right');
	            this.raws.right = val;
	        }

	        /**
	         * @memberof Comment#
	         * @member {string} text - the comment’s text
	         */

	        /**
	         * @memberof Comment#
	         * @member {object} raws - Information to generate byte-to-byte equal
	         *                         node string as it was in the origin input.
	         *
	         * Every parser saves its own properties,
	         * but the default CSS parser uses:
	         *
	         * * `before`: the space symbols before the node.
	         * * `left`: the space symbols between `/*` and the comment’s text.
	         * * `right`: the space symbols between the comment’s text.
	         */

	    }]);

	    return Comment;
	}(_node2.default);

	exports.default = Comment;
	module.exports = exports['default'];

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // break cyclical dependency deadlock – #87

	__webpack_require__(109);

	var _cssSyntaxError = __webpack_require__(188);

	var _cssSyntaxError2 = _interopRequireDefault(_cssSyntaxError);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// import PreviousMap    from './previous-map';

	var sequence = 0;

	/**
	 * @typedef  {object} filePosition
	 * @property {string} file   - path to file
	 * @property {number} line   - source line in file
	 * @property {number} column - source column in file
	 */

	/**
	 * Represents the source CSS.
	 *
	 * @example
	 * const root  = postcss.parse(css, { from: file });
	 * const input = root.source.input;
	 */

	var Input = function () {

	    /**
	     * @param {string} css    - input CSS source
	     * @param {object} [opts] - {@link Processor#process} options
	     */
	    function Input(css) {
	        var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	        _classCallCheck(this, Input);

	        /**
	         * @member {string} - input CSS source
	         *
	         * @example
	         * const input = postcss.parse('a{}', { from: file }).input;
	         * input.css //=> "a{}";
	         */
	        this.css = css.toString();

	        if (this.css[0] === '\uFEFF' || this.css[0] === '\uFFFE') {
	            this.css = this.css.slice(1);
	        }

	        if (opts.from) {
	            if (/^\w+:\/\//.test(opts.from)) {
	                /**
	                 * @member {string} - The absolute path to the CSS source file
	                 *                    defined with the `from` option.
	                 *
	                 * @example
	                 * const root = postcss.parse(css, { from: 'a.css' });
	                 * root.source.input.file //=> '/home/ai/a.css'
	                 */
	                this.file = opts.from;
	            } else {
	                this.file = path.resolve(opts.from);
	            }
	        }

	        /*
	                let map = new PreviousMap(this.css, opts);
	                if ( map.text ) {
	                    /!**
	                     * @member {PreviousMap} - The input source map passed from
	                     *                         a compilation step before PostCSS
	                     *                         (for example, from Sass compiler).
	                     *
	                     * @example
	                     * root.source.input.map.consumer().sources //=> ['a.sass']
	                     *!/
	                    this.map = map;
	                    let file = map.consumer().file;
	                    if ( !this.file && file ) this.file = this.mapResolve(file);
	                }
	        */

	        if (!this.file) {
	            sequence += 1;
	            /**
	             * @member {string} - The unique ID of the CSS source. It will be
	             *                    created if `from` option is not provided
	             *                    (because PostCSS does not know the file path).
	             *
	             * @example
	             * const root = postcss.parse(css);
	             * root.source.input.file //=> undefined
	             * root.source.input.id   //=> "<input css 1>"
	             */
	            this.id = '<input css ' + sequence + '>';
	        }
	        if (this.map) this.map.file = this.from;
	    }

	    _createClass(Input, [{
	        key: 'error',
	        value: function error(message, line, column) {
	            var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

	            var result = void 0;
	            var origin = this.origin(line, column);
	            if (origin) {
	                result = new _cssSyntaxError2.default(message, origin.line, origin.column, origin.source, origin.file, opts.plugin);
	            } else {
	                result = new _cssSyntaxError2.default(message, line, column, this.css, this.file, opts.plugin);
	            }

	            result.input = { line: line, column: column, source: this.css };
	            if (this.file) result.input.file = this.file;

	            return result;
	        }

	        /**
	         * Reads the input source map and returns a symbol position
	         * in the input source (e.g., in a Sass file that was compiled
	         * to CSS before being passed to PostCSS).
	         *
	         * @param {number} line   - line in input CSS
	         * @param {number} column - column in input CSS
	         *
	         * @return {filePosition} position in input source
	         *
	         * @example
	         * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }
	         */

	    }, {
	        key: 'origin',
	        value: function origin(line, column) {
	            if (!this.map) return false;
	            var consumer = this.map.consumer();

	            var from = consumer.originalPositionFor({ line: line, column: column });
	            if (!from.source) return false;

	            var result = {
	                file: this.mapResolve(from.source),
	                line: from.line,
	                column: from.column
	            };

	            var source = consumer.sourceContentFor(from.source);
	            if (source) result.source = source;

	            return result;
	        }
	    }, {
	        key: 'mapResolve',
	        value: function mapResolve(file) {
	            if (/^\w+:\/\//.test(file)) {
	                return file;
	            } else {
	                return path.resolve(this.map.consumer().sourceRoot || '.', file);
	            }
	        }

	        /**
	         * The CSS source identifier. Contains {@link Input#file} if the user
	         * set the `from` option, or {@link Input#id} if they did not.
	         * @type {string}
	         *
	         * @example
	         * const root = postcss.parse(css, { from: 'a.css' });
	         * root.source.input.from //=> "/home/ai/a.css"
	         *
	         * const root = postcss.parse(css);
	         * root.source.input.from //=> "<input css 1>"
	         */

	    }, {
	        key: 'from',
	        get: function get() {
	            return this.file || this.id;
	        }
	    }]);

	    return Input;
	}();

	exports.default = Input;
	module.exports = exports['default'];

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _cssSyntaxError = __webpack_require__(188);

	var _cssSyntaxError2 = _interopRequireDefault(_cssSyntaxError);

	var _stringifier = __webpack_require__(193);

	var _stringifier2 = _interopRequireDefault(_stringifier);

	var _stringify = __webpack_require__(194);

	var _stringify2 = _interopRequireDefault(_stringify);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @typedef {object} position
	 * @property {number} line   - source line in file
	 * @property {number} column - source column in file
	 */

	/**
	 * @typedef {object} source
	 * @property {Input} input    - {@link Input} with input file
	 * @property {position} start - The starting position of the node’s source
	 * @property {position} end   - The ending position of the node’s source
	 */

	var cloneNode = function cloneNode(obj, parent) {
	    var cloned = new obj.constructor();

	    for (var i in obj) {
	        if (!obj.hasOwnProperty(i)) continue;
	        var value = obj[i];
	        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

	        if (i === 'parent' && type === 'object') {
	            if (parent) cloned[i] = parent;
	        } else if (i === 'source') {
	            cloned[i] = value;
	        } else if (value instanceof Array) {
	            cloned[i] = value.map(function (j) {
	                return cloneNode(j, cloned);
	            });
	        } else if (i !== 'before' && i !== 'after' && i !== 'between' && i !== 'semicolon') {
	            if (type === 'object' && value !== null) value = cloneNode(value);
	            cloned[i] = value;
	        }
	    }

	    return cloned;
	};

	/**
	 * All node classes inherit the following common methods.
	 *
	 * @abstract
	 */

	var Node = function () {

	    /**
	     * @param {object} [defaults] - value for node properties
	     */
	    function Node() {
	        var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	        _classCallCheck(this, Node);

	        this.raws = {};
	        for (var name in defaults) {
	            this[name] = defaults[name];
	        }
	    }

	    /**
	     * Returns a CssSyntaxError instance containing the original position
	     * of the node in the source, showing line and column numbers and also
	     * a small excerpt to facilitate debugging.
	     *
	     * If present, an input source map will be used to get the original position
	     * of the source, even from a previous compilation step
	     * (e.g., from Sass compilation).
	     *
	     * This method produces very useful error messages.
	     *
	     * @param {string} message     - error description
	     * @param {object} [opts]      - options
	     * @param {string} opts.plugin - plugin name that created this error.
	     *                               PostCSS will set it automatically.
	     * @param {string} opts.word   - a word inside a node’s string that should
	     *                               be highlighted as the source of the error
	     * @param {number} opts.index  - an index inside a node’s string that should
	     *                               be highlighted as the source of the error
	     *
	     * @return {CssSyntaxError} error object to throw it
	     *
	     * @example
	     * if ( !variables[name] ) {
	     *   throw decl.error('Unknown variable ' + name, { word: name });
	     *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black
	     *   //   color: $black
	     *   // a
	     *   //          ^
	     *   //   background: white
	     * }
	     */


	    _createClass(Node, [{
	        key: 'error',
	        value: function error(message) {
	            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	            if (this.source) {
	                var pos = this.positionBy(opts);
	                return this.source.input.error(message, pos.line, pos.column, opts);
	            } else {
	                return new _cssSyntaxError2.default(message);
	            }
	        }

	        /**
	         * This method is provided as a convenience wrapper for {@link Result#warn}.
	         *
	         * @param {Result} result      - the {@link Result} instance
	         *                               that will receive the warning
	         * @param {string} text        - warning message
	         * @param {object} [opts]      - options
	         * @param {string} opts.plugin - plugin name that created this warning.
	         *                               PostCSS will set it automatically.
	         * @param {string} opts.word   - a word inside a node’s string that should
	         *                               be highlighted as the source of the warning
	         * @param {number} opts.index  - an index inside a node’s string that should
	         *                               be highlighted as the source of the warning
	         *
	         * @return {Warning} created warning object
	         *
	         * @example
	         * const plugin = postcss.plugin('postcss-deprecated', () => {
	         *   return (root, result) => {
	         *     root.walkDecls('bad', decl => {
	         *       decl.warn(result, 'Deprecated property bad');
	         *     });
	         *   };
	         * });
	         */

	    }, {
	        key: 'warn',
	        value: function warn(result, text, opts) {
	            var data = { node: this };
	            for (var i in opts) {
	                data[i] = opts[i];
	            }return result.warn(text, data);
	        }

	        /**
	         * Removes the node from its parent and cleans the parent properties
	         * from the node and its children.
	         *
	         * @example
	         * if ( decl.prop.match(/^-webkit-/) ) {
	         *   decl.remove();
	         * }
	         *
	         * @return {Node} node to make calls chain
	         */

	    }, {
	        key: 'remove',
	        value: function remove() {
	            if (this.parent) {
	                this.parent.removeChild(this);
	            }
	            this.parent = undefined;
	            return this;
	        }

	        /**
	         * Returns a CSS string representing the node.
	         *
	         * @param {stringifier|syntax} [stringifier] - a syntax to use
	         *                                             in string generation
	         *
	         * @return {string} CSS string of this node
	         *
	         * @example
	         * postcss.rule({ selector: 'a' }).toString() //=> "a {}"
	         */

	    }, {
	        key: 'toString',
	        value: function toString() {
	            var stringifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _stringify2.default;

	            if (stringifier.stringify) stringifier = stringifier.stringify;
	            var result = '';
	            stringifier(this, function (i) {
	                result += i;
	            });
	            return result;
	        }

	        /**
	         * Returns a clone of the node.
	         *
	         * The resulting cloned node and its (cloned) children will have
	         * a clean parent and code style properties.
	         *
	         * @param {object} [overrides] - new properties to override in the clone.
	         *
	         * @example
	         * const cloned = decl.clone({ prop: '-moz-' + decl.prop });
	         * cloned.raws.before  //=> undefined
	         * cloned.parent       //=> undefined
	         * cloned.toString()   //=> -moz-transform: scale(0)
	         *
	         * @return {Node} clone of the node
	         */

	    }, {
	        key: 'clone',
	        value: function clone() {
	            var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	            var cloned = cloneNode(this);
	            for (var name in overrides) {
	                cloned[name] = overrides[name];
	            }
	            return cloned;
	        }

	        /**
	         * Shortcut to clone the node and insert the resulting cloned node
	         * before the current node.
	         *
	         * @param {object} [overrides] - new properties to override in the clone.
	         *
	         * @example
	         * decl.cloneBefore({ prop: '-moz-' + decl.prop });
	         *
	         * @return {Node} - new node
	         */

	    }, {
	        key: 'cloneBefore',
	        value: function cloneBefore() {
	            var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	            var cloned = this.clone(overrides);
	            this.parent.insertBefore(this, cloned);
	            return cloned;
	        }

	        /**
	         * Shortcut to clone the node and insert the resulting cloned node
	         * after the current node.
	         *
	         * @param {object} [overrides] - new properties to override in the clone.
	         *
	         * @return {Node} - new node
	         */

	    }, {
	        key: 'cloneAfter',
	        value: function cloneAfter() {
	            var overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	            var cloned = this.clone(overrides);
	            this.parent.insertAfter(this, cloned);
	            return cloned;
	        }

	        /**
	         * Inserts node(s) before the current node and removes the current node.
	         *
	         * @param {...Node} nodes - node(s) to replace current one
	         *
	         * @example
	         * if ( atrule.name == 'mixin' ) {
	         *   atrule.replaceWith(mixinRules[atrule.params]);
	         * }
	         *
	         * @return {Node} current node to methods chain
	         */

	    }, {
	        key: 'replaceWith',
	        value: function replaceWith() {
	            var _this = this;

	            if (this.parent) {
	                for (var _len = arguments.length, nodes = Array(_len), _key = 0; _key < _len; _key++) {
	                    nodes[_key] = arguments[_key];
	                }

	                nodes.forEach(function (node) {
	                    _this.parent.insertBefore(_this, node);
	                });

	                this.remove();
	            }

	            return this;
	        }

	        /**
	         * Removes the node from its current parent and inserts it
	         * at the end of `newParent`.
	         *
	         * This will clean the `before` and `after` code {@link Node#raws} data
	         * from the node and replace them with the indentation style of `newParent`.
	         * It will also clean the `between` property
	         * if `newParent` is in another {@link Root}.
	         *
	         * @param {Container} newParent - container node where the current node
	         *                                will be moved
	         *
	         * @example
	         * atrule.moveTo(atrule.root());
	         *
	         * @return {Node} current node to methods chain
	         */

	    }, {
	        key: 'moveTo',
	        value: function moveTo(newParent) {
	            this.cleanRaws(this.root() === newParent.root());
	            this.remove();
	            newParent.append(this);
	            return this;
	        }

	        /**
	         * Removes the node from its current parent and inserts it into
	         * a new parent before `otherNode`.
	         *
	         * This will also clean the node’s code style properties just as it would
	         * in {@link Node#moveTo}.
	         *
	         * @param {Node} otherNode - node that will be before current node
	         *
	         * @return {Node} current node to methods chain
	         */

	    }, {
	        key: 'moveBefore',
	        value: function moveBefore(otherNode) {
	            this.cleanRaws(this.root() === otherNode.root());
	            this.remove();
	            otherNode.parent.insertBefore(otherNode, this);
	            return this;
	        }

	        /**
	         * Removes the node from its current parent and inserts it into
	         * a new parent after `otherNode`.
	         *
	         * This will also clean the node’s code style properties just as it would
	         * in {@link Node#moveTo}.
	         *
	         * @param {Node} otherNode - node that will be after current node
	         *
	         * @return {Node} current node to methods chain
	         */

	    }, {
	        key: 'moveAfter',
	        value: function moveAfter(otherNode) {
	            this.cleanRaws(this.root() === otherNode.root());
	            this.remove();
	            otherNode.parent.insertAfter(otherNode, this);
	            return this;
	        }

	        /**
	         * Returns the next child of the node’s parent.
	         * Returns `undefined` if the current node is the last child.
	         *
	         * @return {Node|undefined} next node
	         *
	         * @example
	         * if ( comment.text === 'delete next' ) {
	         *   const next = comment.next();
	         *   if ( next ) {
	         *     next.remove();
	         *   }
	         * }
	         */

	    }, {
	        key: 'next',
	        value: function next() {
	            var index = this.parent.index(this);
	            return this.parent.nodes[index + 1];
	        }

	        /**
	         * Returns the previous child of the node’s parent.
	         * Returns `undefined` if the current node is the first child.
	         *
	         * @return {Node|undefined} previous node
	         *
	         * @example
	         * const annotation = decl.prev();
	         * if ( annotation.type == 'comment' ) {
	         *  readAnnotation(annotation.text);
	         * }
	         */

	    }, {
	        key: 'prev',
	        value: function prev() {
	            var index = this.parent.index(this);
	            return this.parent.nodes[index - 1];
	        }
	    }, {
	        key: 'toJSON',
	        value: function toJSON() {
	            var fixed = {};

	            for (var name in this) {
	                if (!this.hasOwnProperty(name)) continue;
	                if (name === 'parent') continue;
	                var value = this[name];

	                if (value instanceof Array) {
	                    fixed[name] = value.map(function (i) {
	                        if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && i.toJSON) {
	                            return i.toJSON();
	                        } else {
	                            return i;
	                        }
	                    });
	                } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.toJSON) {
	                    fixed[name] = value.toJSON();
	                } else {
	                    fixed[name] = value;
	                }
	            }

	            return fixed;
	        }

	        /**
	         * Returns a {@link Node#raws} value. If the node is missing
	         * the code style property (because the node was manually built or cloned),
	         * PostCSS will try to autodetect the code style property by looking
	         * at other nodes in the tree.
	         *
	         * @param {string} prop          - name of code style property
	         * @param {string} [defaultType] - name of default value, it can be missed
	         *                                 if the value is the same as prop
	         *
	         * @example
	         * const root = postcss.parse('a { background: white }');
	         * root.nodes[0].append({ prop: 'color', value: 'black' });
	         * root.nodes[0].nodes[1].raws.before   //=> undefined
	         * root.nodes[0].nodes[1].raw('before') //=> ' '
	         *
	         * @return {string} code style value
	         */

	    }, {
	        key: 'raw',
	        value: function raw(prop, defaultType) {
	            var str = new _stringifier2.default();
	            return str.raw(this, prop, defaultType);
	        }

	        /**
	         * Finds the Root instance of the node’s tree.
	         *
	         * @example
	         * root.nodes[0].nodes[0].root() === root
	         *
	         * @return {Root} root parent
	         */

	    }, {
	        key: 'root',
	        value: function root() {
	            var result = this;
	            while (result.parent) {
	                result = result.parent;
	            }return result;
	        }
	    }, {
	        key: 'cleanRaws',
	        value: function cleanRaws(keepBetween) {
	            delete this.raws.before;
	            delete this.raws.after;
	            if (!keepBetween) delete this.raws.between;
	        }
	    }, {
	        key: 'positionInside',
	        value: function positionInside(index) {
	            var string = this.toString();
	            var column = this.source.start.column;
	            var line = this.source.start.line;

	            for (var i = 0; i < index; i++) {
	                if (string[i] === '\n') {
	                    column = 1;
	                    line += 1;
	                } else {
	                    column += 1;
	                }
	            }

	            return { line: line, column: column };
	        }
	    }, {
	        key: 'positionBy',
	        value: function positionBy(opts) {
	            var pos = this.source.start;
	            if (opts.index) {
	                pos = this.positionInside(opts.index);
	            } else if (opts.word) {
	                var index = this.toString().indexOf(opts.word);
	                if (index !== -1) pos = this.positionInside(index);
	            }
	            return pos;
	        }
	    }, {
	        key: 'removeSelf',
	        value: function removeSelf() {
	            (0, _warnOnce2.default)('Node#removeSelf is deprecated. Use Node#remove.');
	            return this.remove();
	        }
	    }, {
	        key: 'replace',
	        value: function replace(nodes) {
	            (0, _warnOnce2.default)('Node#replace is deprecated. Use Node#replaceWith');
	            return this.replaceWith(nodes);
	        }
	    }, {
	        key: 'style',
	        value: function style(own, detect) {
	            (0, _warnOnce2.default)('Node#style() is deprecated. Use Node#raw()');
	            return this.raw(own, detect);
	        }
	    }, {
	        key: 'cleanStyles',
	        value: function cleanStyles(keepBetween) {
	            (0, _warnOnce2.default)('Node#cleanStyles() is deprecated. Use Node#cleanRaws()');
	            return this.cleanRaws(keepBetween);
	        }
	    }, {
	        key: 'before',
	        get: function get() {
	            (0, _warnOnce2.default)('Node#before is deprecated. Use Node#raws.before');
	            return this.raws.before;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Node#before is deprecated. Use Node#raws.before');
	            this.raws.before = val;
	        }
	    }, {
	        key: 'between',
	        get: function get() {
	            (0, _warnOnce2.default)('Node#between is deprecated. Use Node#raws.between');
	            return this.raws.between;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Node#between is deprecated. Use Node#raws.between');
	            this.raws.between = val;
	        }

	        /**
	         * @memberof Node#
	         * @member {string} type - String representing the node’s type.
	         *                         Possible values are `root`, `atrule`, `rule`,
	         *                         `decl`, or `comment`.
	         *
	         * @example
	         * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'
	         */

	        /**
	         * @memberof Node#
	         * @member {Container} parent - the node’s parent node.
	         *
	         * @example
	         * root.nodes[0].parent == root;
	         */

	        /**
	         * @memberof Node#
	         * @member {source} source - the input source of the node
	         *
	         * The property is used in source map generation.
	         *
	         * If you create a node manually (e.g., with `postcss.decl()`),
	         * that node will not have a `source` property and will be absent
	         * from the source map. For this reason, the plugin developer should
	         * consider cloning nodes to create new ones (in which case the new node’s
	         * source will reference the original, cloned node) or setting
	         * the `source` property manually.
	         *
	         * ```js
	         * // Bad
	         * const prefixed = postcss.decl({
	         *   prop: '-moz-' + decl.prop,
	         *   value: decl.value
	         * });
	         *
	         * // Good
	         * const prefixed = decl.clone({ prop: '-moz-' + decl.prop });
	         * ```
	         *
	         * ```js
	         * if ( atrule.name == 'add-link' ) {
	         *   const rule = postcss.rule({ selector: 'a', source: atrule.source });
	         *   atrule.parent.insertBefore(atrule, rule);
	         * }
	         * ```
	         *
	         * @example
	         * decl.source.input.from //=> '/home/ai/a.sass'
	         * decl.source.start      //=> { line: 10, column: 2 }
	         * decl.source.end        //=> { line: 10, column: 12 }
	         */

	        /**
	         * @memberof Node#
	         * @member {object} raws - Information to generate byte-to-byte equal
	         *                         node string as it was in the origin input.
	         *
	         * Every parser saves its own properties,
	         * but the default CSS parser uses:
	         *
	         * * `before`: the space symbols before the node. It also stores `*`
	         *   and `_` symbols before the declaration (IE hack).
	         * * `after`: the space symbols after the last child of the node
	         *   to the end of the node.
	         * * `between`: the symbols between the property and value
	         *   for declarations, selector and `{` for rules, or last parameter
	         *   and `{` for at-rules.
	         * * `semicolon`: contains true if the last child has
	         *   an (optional) semicolon.
	         * * `afterName`: the space between the at-rule name and its parameters.
	         * * `left`: the space symbols between `/*` and the comment’s text.
	         * * `right`: the space symbols between the comment’s text
	         *   and <code>*&#47;</code>.
	         * * `important`: the content of the important statement,
	         *   if it is not just `!important`.
	         *
	         * PostCSS cleans selectors, declaration values and at-rule parameters
	         * from comments and extra spaces, but it stores origin content in raws
	         * properties. As such, if you don’t change a declaration’s value,
	         * PostCSS will use the raw value with comments.
	         *
	         * @example
	         * const root = postcss.parse('a {\n  color:black\n}')
	         * root.first.first.raws //=> { before: '\n  ', between: ':' }
	         */

	    }]);

	    return Node;
	}();

	exports.default = Node;
	module.exports = exports['default'];

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	__webpack_require__(110);

	var _container = __webpack_require__(65);

	var _container2 = _interopRequireDefault(_container);

	var _lazyResult = __webpack_require__(190);

	var _lazyResult2 = _interopRequireDefault(_lazyResult);

	var _processor = __webpack_require__(422);

	var _processor2 = _interopRequireDefault(_processor);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // break cyclical dependency deadlock – #87

	/**
	 * Represents a CSS file and contains all its parsed nodes.
	 *
	 * @extends Container
	 *
	 * @example
	 * const root = postcss.parse('a{color:black} b{z-index:2}');
	 * root.type         //=> 'root'
	 * root.nodes.length //=> 2
	 */
	var Root = function (_Container) {
	    _inherits(Root, _Container);

	    function Root(defaults) {
	        _classCallCheck(this, Root);

	        var _this = _possibleConstructorReturn(this, (Root.__proto__ || Object.getPrototypeOf(Root)).call(this, defaults));

	        _this.type = 'root';
	        if (!_this.nodes) _this.nodes = [];
	        return _this;
	    }

	    _createClass(Root, [{
	        key: 'removeChild',
	        value: function removeChild(child) {
	            child = this.index(child);

	            if (child === 0 && this.nodes.length > 1) {
	                this.nodes[1].raws.before = this.nodes[child].raws.before;
	            }

	            return _get(Root.prototype.__proto__ || Object.getPrototypeOf(Root.prototype), 'removeChild', this).call(this, child);
	        }
	    }, {
	        key: 'normalize',
	        value: function normalize(child, sample, type) {
	            var nodes = _get(Root.prototype.__proto__ || Object.getPrototypeOf(Root.prototype), 'normalize', this).call(this, child);

	            if (sample) {
	                if (type === 'prepend') {
	                    if (this.nodes.length > 1) {
	                        sample.raws.before = this.nodes[1].raws.before;
	                    } else {
	                        delete sample.raws.before;
	                    }
	                } else if (this.first !== sample) {
	                    nodes.forEach(function (node) {
	                        node.raws.before = sample.raws.before;
	                    });
	                }
	            }

	            return nodes;
	        }

	        /**
	         * Returns a {@link Result} instance representing the root’s CSS.
	         *
	         * @param {processOptions} [opts] - options with only `to` and `map` keys
	         *
	         * @return {Result} result with current root’s CSS
	         *
	         * @example
	         * const root1 = postcss.parse(css1, { from: 'a.css' });
	         * const root2 = postcss.parse(css2, { from: 'b.css' });
	         * root1.append(root2);
	         * const result = root1.toResult({ to: 'all.css', map: true });
	         */

	    }, {
	        key: 'toResult',
	        value: function toResult() {
	            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	            var lazy = new _lazyResult2.default(new _processor2.default(), this, opts);
	            return lazy.stringify();
	        }
	    }, {
	        key: 'remove',
	        value: function remove(child) {
	            (0, _warnOnce2.default)('Root#remove is deprecated. Use Root#removeChild');
	            this.removeChild(child);
	        }
	    }, {
	        key: 'prevMap',
	        value: function prevMap() {
	            (0, _warnOnce2.default)('Root#prevMap is deprecated. Use Root#source.input.map');
	            return this.source.input.map;
	        }

	        /**
	         * @memberof Root#
	         * @member {object} raws - Information to generate byte-to-byte equal
	         *                         node string as it was in the origin input.
	         *
	         * Every parser saves its own properties,
	         * but the default CSS parser uses:
	         *
	         * * `after`: the space symbols after the last child to the end of file.
	         * * `semicolon`: is the last child has an (optional) semicolon.
	         *
	         * @example
	         * postcss.parse('a {}\n').raws //=> { after: '\n' }
	         * postcss.parse('a {}').raws   //=> { after: '' }
	         */

	    }]);

	    return Root;
	}(_container2.default);

	exports.default = Root;
	module.exports = exports['default'];

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	__webpack_require__(105);

	var _container = __webpack_require__(65);

	var _container2 = _interopRequireDefault(_container);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	var _list = __webpack_require__(421);

	var _list2 = _interopRequireDefault(_list);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // break cyclical dependency deadlock – #87

	/**
	 * Represents a CSS rule: a selector followed by a declaration block.
	 *
	 * @extends Container
	 *
	 * @example
	 * const root = postcss.parse('a{}');
	 * const rule = root.first;
	 * rule.type       //=> 'rule'
	 * rule.toString() //=> 'a{}'
	 */
	var Rule = function (_Container) {
	    _inherits(Rule, _Container);

	    function Rule(defaults) {
	        _classCallCheck(this, Rule);

	        var _this = _possibleConstructorReturn(this, (Rule.__proto__ || Object.getPrototypeOf(Rule)).call(this, defaults));

	        _this.type = 'rule';
	        if (!_this.nodes) _this.nodes = [];
	        return _this;
	    }

	    /**
	     * An array containing the rule’s individual selectors.
	     * Groups of selectors are split at commas.
	     *
	     * @type {string[]}
	     *
	     * @example
	     * const root = postcss.parse('a, b { }');
	     * const rule = root.first;
	     *
	     * rule.selector  //=> 'a, b'
	     * rule.selectors //=> ['a', 'b']
	     *
	     * rule.selectors = ['a', 'strong'];
	     * rule.selector //=> 'a, strong'
	     */


	    _createClass(Rule, [{
	        key: 'selectors',
	        get: function get() {
	            return _list2.default.comma(this.selector);
	        },
	        set: function set(values) {
	            var match = this.selector ? this.selector.match(/,\s*/) : null;
	            var sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
	            this.selector = values.join(sep);
	        }
	    }, {
	        key: '_selector',
	        get: function get() {
	            (0, _warnOnce2.default)('Rule#_selector is deprecated. Use Rule#raws.selector');
	            return this.raws.selector;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Rule#_selector is deprecated. Use Rule#raws.selector');
	            this.raws.selector = val;
	        }

	        /**
	         * @memberof Rule#
	         * @member {string} selector - the rule’s full selector represented
	         *                             as a string
	         *
	         * @example
	         * const root = postcss.parse('a, b { }');
	         * const rule = root.first;
	         * rule.selector //=> 'a, b'
	         */

	        /**
	         * @memberof Rule#
	         * @member {object} raws - Information to generate byte-to-byte equal
	         *                         node string as it was in the origin input.
	         *
	         * Every parser saves its own properties,
	         * but the default CSS parser uses:
	         *
	         * * `before`: the space symbols before the node. It also stores `*`
	         *   and `_` symbols before the declaration (IE hack).
	         * * `after`: the space symbols after the last child of the node
	         *   to the end of the node.
	         * * `between`: the symbols between the property and value
	         *   for declarations, selector and `{` for rules, or last parameter
	         *   and `{` for at-rules.
	         * * `semicolon`: contains true if the last child has
	         *   an (optional) semicolon.
	         *
	         * PostCSS cleans selectors from comments and extra spaces,
	         * but it stores origin content in raws properties.
	         * As such, if you don’t change a declaration’s value,
	         * PostCSS will use the raw value with comments.
	         *
	         * @example
	         * const root = postcss.parse('a {\n  color:black\n}')
	         * root.first.first.raws //=> { before: '', between: ' ', after: '\n' }
	         */

	    }]);

	    return Rule;
	}(_container2.default);

	exports.default = Rule;
	module.exports = exports['default'];

/***/ },
/* 111 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = tokenize;
	var SINGLE_QUOTE = '\''.charCodeAt(0);
	var DOUBLE_QUOTE = '"'.charCodeAt(0);
	var BACKSLASH = '\\'.charCodeAt(0);
	var SLASH = '/'.charCodeAt(0);
	var NEWLINE = '\n'.charCodeAt(0);
	var SPACE = ' '.charCodeAt(0);
	var FEED = '\f'.charCodeAt(0);
	var TAB = '\t'.charCodeAt(0);
	var CR = '\r'.charCodeAt(0);
	var OPEN_SQUARE = '['.charCodeAt(0);
	var CLOSE_SQUARE = ']'.charCodeAt(0);
	var OPEN_PARENTHESES = '('.charCodeAt(0);
	var CLOSE_PARENTHESES = ')'.charCodeAt(0);
	var OPEN_CURLY = '{'.charCodeAt(0);
	var CLOSE_CURLY = '}'.charCodeAt(0);
	var SEMICOLON = ';'.charCodeAt(0);
	var ASTERISK = '*'.charCodeAt(0);
	var COLON = ':'.charCodeAt(0);
	var AT = '@'.charCodeAt(0);

	var RE_AT_END = /[ \n\t\r\f\{\(\)'"\\;/\[\]#]/g;
	var RE_WORD_END = /[ \n\t\r\f\(\)\{\}:;@!'"\\\]\[#]|\/(?=\*)/g;
	var RE_BAD_BRACKET = /.[\\\/\("'\n]/;

	function tokenize(input) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var tokens = [];
	    var css = input.css.valueOf();

	    var ignore = options.ignoreErrors;

	    var code = void 0,
	        next = void 0,
	        quote = void 0,
	        lines = void 0,
	        last = void 0,
	        content = void 0,
	        escape = void 0,
	        nextLine = void 0,
	        nextOffset = void 0,
	        escaped = void 0,
	        escapePos = void 0,
	        prev = void 0,
	        n = void 0;

	    var length = css.length;
	    var offset = -1;
	    var line = 1;
	    var pos = 0;

	    function unclosed(what) {
	        throw input.error('Unclosed ' + what, line, pos - offset);
	    }

	    while (pos < length) {
	        code = css.charCodeAt(pos);

	        if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {
	            offset = pos;
	            line += 1;
	        }

	        switch (code) {
	            case NEWLINE:
	            case SPACE:
	            case TAB:
	            case CR:
	            case FEED:
	                next = pos;
	                do {
	                    next += 1;
	                    code = css.charCodeAt(next);
	                    if (code === NEWLINE) {
	                        offset = next;
	                        line += 1;
	                    }
	                } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);

	                tokens.push(['space', css.slice(pos, next)]);
	                pos = next - 1;
	                break;

	            case OPEN_SQUARE:
	                tokens.push(['[', '[', line, pos - offset]);
	                break;

	            case CLOSE_SQUARE:
	                tokens.push([']', ']', line, pos - offset]);
	                break;

	            case OPEN_CURLY:
	                tokens.push(['{', '{', line, pos - offset]);
	                break;

	            case CLOSE_CURLY:
	                tokens.push(['}', '}', line, pos - offset]);
	                break;

	            case COLON:
	                tokens.push([':', ':', line, pos - offset]);
	                break;

	            case SEMICOLON:
	                tokens.push([';', ';', line, pos - offset]);
	                break;

	            case OPEN_PARENTHESES:
	                prev = tokens.length ? tokens[tokens.length - 1][1] : '';
	                n = css.charCodeAt(pos + 1);
	                if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {
	                    next = pos;
	                    do {
	                        escaped = false;
	                        next = css.indexOf(')', next + 1);
	                        if (next === -1) {
	                            if (ignore) {
	                                next = pos;
	                                break;
	                            } else {
	                                unclosed('bracket');
	                            }
	                        }
	                        escapePos = next;
	                        while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
	                            escapePos -= 1;
	                            escaped = !escaped;
	                        }
	                    } while (escaped);

	                    tokens.push(['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);
	                    pos = next;
	                } else {
	                    next = css.indexOf(')', pos + 1);
	                    content = css.slice(pos, next + 1);

	                    if (next === -1 || RE_BAD_BRACKET.test(content)) {
	                        tokens.push(['(', '(', line, pos - offset]);
	                    } else {
	                        tokens.push(['brackets', content, line, pos - offset, line, next - offset]);
	                        pos = next;
	                    }
	                }

	                break;

	            case CLOSE_PARENTHESES:
	                tokens.push([')', ')', line, pos - offset]);
	                break;

	            case SINGLE_QUOTE:
	            case DOUBLE_QUOTE:
	                quote = code === SINGLE_QUOTE ? '\'' : '"';
	                next = pos;
	                do {
	                    escaped = false;
	                    next = css.indexOf(quote, next + 1);
	                    if (next === -1) {
	                        if (ignore) {
	                            next = pos + 1;
	                            break;
	                        } else {
	                            unclosed('quote');
	                        }
	                    }
	                    escapePos = next;
	                    while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
	                        escapePos -= 1;
	                        escaped = !escaped;
	                    }
	                } while (escaped);

	                content = css.slice(pos, next + 1);
	                lines = content.split('\n');
	                last = lines.length - 1;

	                if (last > 0) {
	                    nextLine = line + last;
	                    nextOffset = next - lines[last].length;
	                } else {
	                    nextLine = line;
	                    nextOffset = offset;
	                }

	                tokens.push(['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset]);

	                offset = nextOffset;
	                line = nextLine;
	                pos = next;
	                break;

	            case AT:
	                RE_AT_END.lastIndex = pos + 1;
	                RE_AT_END.test(css);
	                if (RE_AT_END.lastIndex === 0) {
	                    next = css.length - 1;
	                } else {
	                    next = RE_AT_END.lastIndex - 2;
	                }
	                tokens.push(['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);
	                pos = next;
	                break;

	            case BACKSLASH:
	                next = pos;
	                escape = true;
	                while (css.charCodeAt(next + 1) === BACKSLASH) {
	                    next += 1;
	                    escape = !escape;
	                }
	                code = css.charCodeAt(next + 1);
	                if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
	                    next += 1;
	                }
	                tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);
	                pos = next;
	                break;

	            default:
	                if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
	                    next = css.indexOf('*/', pos + 2) + 1;
	                    if (next === 0) {
	                        if (ignore) {
	                            next = css.length;
	                        } else {
	                            unclosed('comment');
	                        }
	                    }

	                    content = css.slice(pos, next + 1);
	                    lines = content.split('\n');
	                    last = lines.length - 1;

	                    if (last > 0) {
	                        nextLine = line + last;
	                        nextOffset = next - lines[last].length;
	                    } else {
	                        nextLine = line;
	                        nextOffset = offset;
	                    }

	                    tokens.push(['comment', content, line, pos - offset, nextLine, next - nextOffset]);

	                    offset = nextOffset;
	                    line = nextLine;
	                    pos = next;
	                } else {
	                    RE_WORD_END.lastIndex = pos + 1;
	                    RE_WORD_END.test(css);
	                    if (RE_WORD_END.lastIndex === 0) {
	                        next = css.length - 1;
	                    } else {
	                        next = RE_WORD_END.lastIndex - 2;
	                    }

	                    tokens.push(['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset]);
	                    pos = next;
	                }

	                break;
	        }

	        pos++;
	    }

	    return tokens;
	}
	module.exports = exports['default'];

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var required = __webpack_require__(376)
	  , lolcation = __webpack_require__(439)
	  , qs = __webpack_require__(312)
	  , relativere = /^\/(?!\/)/;

	/**
	 * These are the parse instructions for the URL parsers, it informs the parser
	 * about:
	 *
	 * 0. The char it Needs to parse, if it's a string it should be done using
	 *    indexOf, RegExp using exec and NaN means set as current value.
	 * 1. The property we should set when parsing this value.
	 * 2. Indication if it's backwards or forward parsing, when set as number it's
	 *    the value of extra chars that should be split off.
	 * 3. Inherit from location if non existing in the parser.
	 * 4. `toLowerCase` the resulting value.
	 */
	var instructions = [
	  ['#', 'hash'],                        // Extract from the back.
	  ['?', 'query'],                       // Extract from the back.
	  ['//', 'protocol', 2, 1, 1],          // Extract from the front.
	  ['/', 'pathname'],                    // Extract from the back.
	  ['@', 'auth', 1],                     // Extract from the front.
	  [NaN, 'host', undefined, 1, 1],       // Set left over value.
	  [/\:(\d+)$/, 'port'],                 // RegExp the back.
	  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
	];

	/**
	 * The actual URL instance. Instead of returning an object we've opted-in to
	 * create an actual constructor as it's much more memory efficient and
	 * faster and it pleases my CDO.
	 *
	 * @constructor
	 * @param {String} address URL we want to parse.
	 * @param {Boolean|function} parser Parser for the query string.
	 * @param {Object} location Location defaults for relative paths.
	 * @api public
	 */
	function URL(address, location, parser) {
	  if (!(this instanceof URL)) {
	    return new URL(address, location, parser);
	  }

	  var relative = relativere.test(address)
	    , parse, instruction, index, key
	    , type = typeof location
	    , url = this
	    , i = 0;

	  //
	  // The following if statements allows this module two have compatibility with
	  // 2 different API:
	  //
	  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
	  //    where the boolean indicates that the query string should also be parsed.
	  //
	  // 2. The `URL` interface of the browser which accepts a URL, object as
	  //    arguments. The supplied object will be used as default values / fall-back
	  //    for relative paths.
	  //
	  if ('object' !== type && 'string' !== type) {
	    parser = location;
	    location = null;
	  }

	  if (parser && 'function' !== typeof parser) {
	    parser = qs.parse;
	  }

	  location = lolcation(location);

	  for (; i < instructions.length; i++) {
	    instruction = instructions[i];
	    parse = instruction[0];
	    key = instruction[1];

	    if (parse !== parse) {
	      url[key] = address;
	    } else if ('string' === typeof parse) {
	      if (~(index = address.indexOf(parse))) {
	        if ('number' === typeof instruction[2]) {
	          url[key] = address.slice(0, index);
	          address = address.slice(index + instruction[2]);
	        } else {
	          url[key] = address.slice(index);
	          address = address.slice(0, index);
	        }
	      }
	    } else if (index = parse.exec(address)) {
	      url[key] = index[1];
	      address = address.slice(0, address.length - index[0].length);
	    }

	    url[key] = url[key] || (instruction[3] || ('port' === key && relative) ? location[key] || '' : '');

	    //
	    // Hostname, host and protocol should be lowercased so they can be used to
	    // create a proper `origin`.
	    //
	    if (instruction[4]) {
	      url[key] = url[key].toLowerCase();
	    }
	  }

	  //
	  // Also parse the supplied query string in to an object. If we're supplied
	  // with a custom parser as function use that instead of the default build-in
	  // parser.
	  //
	  if (parser) url.query = parser(url.query);

	  //
	  // We should not add port numbers if they are already the default port number
	  // for a given protocol. As the host also contains the port number we're going
	  // override it with the hostname which contains no port number.
	  //
	  if (!required(url.port, url.protocol)) {
	    url.host = url.hostname;
	    url.port = '';
	  }

	  //
	  // Parse down the `auth` for the username and password.
	  //
	  url.username = url.password = '';
	  if (url.auth) {
	    instruction = url.auth.split(':');
	    url.username = instruction[0] || '';
	    url.password = instruction[1] || '';
	  }

	  //
	  // The href is just the compiled result.
	  //
	  url.href = url.toString();
	}

	/**
	 * This is convenience method for changing properties in the URL instance to
	 * insure that they all propagate correctly.
	 *
	 * @param {String} prop Property we need to adjust.
	 * @param {Mixed} value The newly assigned value.
	 * @returns {URL}
	 * @api public
	 */
	URL.prototype.set = function set(part, value, fn) {
	  var url = this;

	  if ('query' === part) {
	    if ('string' === typeof value && value.length) {
	      value = (fn || qs.parse)(value);
	    }

	    url[part] = value;
	  } else if ('port' === part) {
	    url[part] = value;

	    if (!required(value, url.protocol)) {
	      url.host = url.hostname;
	      url[part] = '';
	    } else if (value) {
	      url.host = url.hostname +':'+ value;
	    }
	  } else if ('hostname' === part) {
	    url[part] = value;

	    if (url.port) value += ':'+ url.port;
	    url.host = value;
	  } else if ('host' === part) {
	    url[part] = value;

	    if (/\:\d+/.test(value)) {
	      value = value.split(':');
	      url.hostname = value[0];
	      url.port = value[1];
	    }
	  } else {
	    url[part] = value;
	  }

	  url.href = url.toString();
	  return url;
	};

	/**
	 * Transform the properties back in to a valid and full URL string.
	 *
	 * @param {Function} stringify Optional query stringify function.
	 * @returns {String}
	 * @api public
	 */
	URL.prototype.toString = function toString(stringify) {
	  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

	  var query
	    , url = this
	    , result = url.protocol +'//';

	  if (url.username) {
	    result += url.username;
	    if (url.password) result += ':'+ url.password;
	    result += '@';
	  }

	  result += url.hostname;
	  if (url.port) result += ':'+ url.port;

	  result += url.pathname;

	  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
	  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

	  if (url.hash) result += url.hash;

	  return result;
	};

	//
	// Expose the URL parser and some additional properties that might be useful for
	// others.
	//
	URL.qs = qs;
	URL.location = lolcation;
	module.exports = URL;


/***/ },
/* 113 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _markdown = __webpack_require__(306);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Markdown = function (_Component) {
		_inherits(Markdown, _Component);

		function Markdown() {
			_classCallCheck(this, Markdown);

			return _possibleConstructorReturn(this, Object.getPrototypeOf(Markdown).apply(this, arguments));
		}

		_createClass(Markdown, [{
			key: 'render',
			value: function render() {
				return _react2.default.createElement('div', { dangerouslySetInnerHTML: { __html: _markdown.markdown.toHTML(this.props.text, 'Maruku') } });
			}
		}]);

		return Markdown;
	}(_react.Component);

	exports.default = Markdown;
	module.exports = exports['default'];

/***/ },
/* 115 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var get = function get(obj) {
		return function (key) {
			return obj[key];
		};
	};
	var getKeys = exports.getKeys = function getKeys(keys, obj) {
		return keys.map(get(obj));
	};
	var notKeys = exports.notKeys = function notKeys(keys, obj) {
		return Object.keys(obj).filter(function (key) {
			return !keys.includes(key);
		}).map(get(obj));
	};

	var asSet = exports.asSet = function asSet(fn) {
		return function (arr) {
			for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				args[_key - 1] = arguments[_key];
			}

			var set = new Set(arr);
			fn.apply(undefined, [set].concat(args));
			return Array.from(set);
		};
	};
	var addUniq = exports.addUniq = asSet(function (a, x) {
		return a.add(x);
	});
	var remove = exports.remove = asSet(function (a, x) {
		return a.delete(x);
	});

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.Subtitle = exports.Title = exports.Card = exports.Description = exports.Def = exports.DefinitionList = undefined;

	var _templateObject = _taggedTemplateLiteral(['\ndisplay: flex;\nflex-flow: row wrap;\n'], ['\ndisplay: flex;\nflex-flow: row wrap;\n']),
	    _templateObject2 = _taggedTemplateLiteral(['\nmargin-bottom: .5em;\nfont-weight: bold;\n'], ['\nmargin-bottom: .5em;\nfont-weight: bold;\n']),
	    _templateObject3 = _taggedTemplateLiteral(['\nmargin: 0;\nfont-size: .8rem;\n'], ['\nmargin: 0;\nfont-size: .8rem;\n']),
	    _templateObject4 = _taggedTemplateLiteral(['\ntext-align: center;\nwidth: 50%;\npadding: .5rem;\nborder-bottom: .2rem solid ', ';\n\n&:nth-child(2n + 1) {\n\tborder-right: .1rem solid ', ';\n}\n&:nth-child(2n) {\n\tborder-left: .1rem solid ', ';\n}\n'], ['\ntext-align: center;\nwidth: 50%;\npadding: .5rem;\nborder-bottom: .2rem solid ', ';\n\n&:nth-child(2n + 1) {\n\tborder-right: .1rem solid ', ';\n}\n&:nth-child(2n) {\n\tborder-left: .1rem solid ', ';\n}\n']),
	    _templateObject5 = _taggedTemplateLiteral(['\nfont-family: Georgia;\nfont-size: .9em;\nline-height: 1.4;\npadding: .5em;\n\np:first-child {\n\tmargin-top: 0;\n}\np:last-child {\n\tmargin-bottom: 0;\n}\n'], ['\nfont-family: Georgia;\nfont-size: .9em;\nline-height: 1.4;\npadding: .5em;\n\np:first-child {\n\tmargin-top: 0;\n}\np:last-child {\n\tmargin-bottom: 0;\n}\n']),
	    _templateObject6 = _taggedTemplateLiteral(['\ndisplay: inline-block;\nwidth: 100%;\nborder: .4em solid ', ';\nborder-radius: .4em;\n'], ['\ndisplay: inline-block;\nwidth: 100%;\nborder: .4em solid ', ';\nborder-radius: .4em;\n']),
	    _templateObject7 = _taggedTemplateLiteral(['\nfont-family: Georgia;\nfont-weight: normal;\nmargin: .2rem 0;\ntext-align: center;\n'], ['\nfont-family: Georgia;\nfont-weight: normal;\nmargin: .2rem 0;\ntext-align: center;\n']),
	    _templateObject8 = _taggedTemplateLiteral(['\nfont-family: Georgia;\nmargin: 0;\ntext-align: center;\nfont-size: .8rem;\npadding: .1rem;\ncolor: ', ';\n\n&:before {\n\tcontent: \'\';\n\tdisplay: block;\n\tborder-top: 1.3rem solid ', ';\n\tmargin: 0rem -2px -1.1rem;\n}\n'], ['\nfont-family: Georgia;\nmargin: 0;\ntext-align: center;\nfont-size: .8rem;\npadding: .1rem;\ncolor: ', ';\n\n&:before {\n\tcontent: \'\';\n\tdisplay: block;\n\tborder-top: 1.3rem solid ', ';\n\tmargin: 0rem -2px -1.1rem;\n}\n']);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _styledComponents = __webpack_require__(37);

	var _styledComponents2 = _interopRequireDefault(_styledComponents);

	var _contrast = __webpack_require__(215);

	var _contrast2 = _interopRequireDefault(_contrast);

	var _markdown = __webpack_require__(114);

	var _markdown2 = _interopRequireDefault(_markdown);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	var DefinitionList = exports.DefinitionList = _styledComponents2.default.dl(_templateObject);
	var DefinitionTitle = _styledComponents2.default.dt(_templateObject2);
	var Definition = _styledComponents2.default.dd(_templateObject3);
	var DefinitionWrapper = _styledComponents2.default.div(_templateObject4, function (_ref) {
		var theme = _ref.theme;
		return theme.main;
	}, function (_ref2) {
		var theme = _ref2.theme;
		return theme.main;
	}, function (_ref3) {
		var theme = _ref3.theme;
		return theme.main;
	});

	var Def = exports.Def = function Def(_ref4) {
		var title = _ref4.title;
		var children = _ref4.children;
		return _react2.default.createElement(
			DefinitionWrapper,
			null,
			_react2.default.createElement(
				DefinitionTitle,
				null,
				title
			),
			_react2.default.createElement(
				Definition,
				null,
				children
			)
		);
	};

	var DescriptionBody = _styledComponents2.default.div(_templateObject5);

	var Description = exports.Description = function Description(_ref5) {
		var text = _ref5.text;
		return _react2.default.createElement(
			DescriptionBody,
			null,
			_react2.default.createElement(_markdown2.default, { text: text })
		);
	};

	var Card = exports.Card = _styledComponents2.default.article(_templateObject6, function (_ref6) {
		var theme = _ref6.theme;
		return theme.main;
	});

	var Title = exports.Title = _styledComponents2.default.h2(_templateObject7);

	var Subtitle = exports.Subtitle = _styledComponents2.default.h3(_templateObject8, function (_ref7) {
		var theme = _ref7.theme;
		return (0, _contrast2.default)(theme.main) === 'light' ? 'black' : 'white';
	}, function (_ref8) {
		var theme = _ref8.theme;
		return theme.main;
	});

/***/ },
/* 117 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	var orangeCard = exports.orangeCard = {
		main: '#d90'
	};

	var redCard = exports.redCard = {
		main: '#911'
	};

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.observe = undefined;

	var _enviante = __webpack_require__(232);

	var _enviante2 = _interopRequireDefault(_enviante);

	var _envianteLocalstorage = __webpack_require__(199);

	var _envianteReact = __webpack_require__(218);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var connect = (0, _enviante2.default)({
		spells: (0, _envianteLocalstorage.read)('spells', []),
		monsters: (0, _envianteLocalstorage.read)('monsters', [])
	});

	connect((0, _envianteLocalstorage.write)('spells', 'spells', []));
	connect((0, _envianteLocalstorage.write)('monsters', 'monsters', []));

	var observe = exports.observe = (0, _envianteReact.createObserve)(connect);
	exports.default = connect;

/***/ },
/* 119 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(49);
	var ReactComponentTreeHook = __webpack_require__(69);
	var ReactElement = __webpack_require__(28);

	var checkReactTypeSpec = __webpack_require__(228);

	var canDefineProperty = __webpack_require__(72);
	var getIteratorFn = __webpack_require__(73);
	var warning = __webpack_require__(16);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : void 0;
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 121 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	// Inspired by Google Closure:
	// http://closure-library.googlecode.com/svn/docs/
	// closure_goog_array_array.js.html#goog.array.clear

	'use strict';

	var value = __webpack_require__(22);

	module.exports = function () {
		value(this).length = 0;
		return this;
	};


/***/ },
/* 123 */
/***/ function(module, exports) {

	'use strict';

	var create = Object.create, getPrototypeOf = Object.getPrototypeOf
	  , x = {};

	module.exports = function (/*customCreate*/) {
		var setPrototypeOf = Object.setPrototypeOf
		  , customCreate = arguments[0] || create;
		if (typeof setPrototypeOf !== 'function') return false;
		return getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;
	};


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	// Big thanks to @WebReflection for sorting this out
	// https://gist.github.com/WebReflection/5593554

	'use strict';

	var isObject      = __webpack_require__(246)
	  , value         = __webpack_require__(22)

	  , isPrototypeOf = Object.prototype.isPrototypeOf
	  , defineProperty = Object.defineProperty
	  , nullDesc = { configurable: true, enumerable: false, writable: true,
			value: undefined }
	  , validate;

	validate = function (obj, prototype) {
		value(obj);
		if ((prototype === null) || isObject(prototype)) return obj;
		throw new TypeError('Prototype must be null or an object');
	};

	module.exports = (function (status) {
		var fn, set;
		if (!status) return null;
		if (status.level === 2) {
			if (status.set) {
				set = status.set;
				fn = function (obj, prototype) {
					set.call(validate(obj, prototype), prototype);
					return obj;
				};
			} else {
				fn = function (obj, prototype) {
					validate(obj, prototype).__proto__ = prototype;
					return obj;
				};
			}
		} else {
			fn = function self(obj, prototype) {
				var isNullBase;
				validate(obj, prototype);
				isNullBase = isPrototypeOf.call(self.nullPolyfill, obj);
				if (isNullBase) delete self.nullPolyfill.__proto__;
				if (prototype === null) prototype = self.nullPolyfill;
				obj.__proto__ = prototype;
				if (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);
				return obj;
			};
		}
		return Object.defineProperty(fn, 'level', { configurable: false,
			enumerable: false, writable: false, value: status.level });
	}((function () {
		var x = Object.create(null), y = {}, set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(x, y);
			} catch (ignore) { }
			if (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };
		}

		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 2 };

		x = {};
		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 1 };

		return false;
	}())));

	__webpack_require__(243);


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isIterable = __webpack_require__(257);

	module.exports = function (value) {
		if (!isIterable(value)) throw new TypeError(value + " is not iterable");
		return value;
	};


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(259)() ? Set : __webpack_require__(262);


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	'use strict';

	var emptyFunction = __webpack_require__(17);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },

	  registerDefault: function () {}
	};

	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	'use strict';

	var isTextNode = __webpack_require__(276);

	/*eslint-disable no-bitwise */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;

	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;

	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}

	module.exports = containsNode;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	'use strict';

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}

	module.exports = focusNode;

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/* eslint-disable fb-www/typeof-undefined */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';

	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	/*eslint-disable fb-www/unsafe-html */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var invariant = __webpack_require__(3);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */

	var shouldWrap = {};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap
	};

	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}

	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  }

	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }

	  return true;
	}

	module.exports = shallowEqual;

/***/ },
/* 133 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = doHash;
	// murmurhash2 via https://gist.github.com/raycmorgan/588423

	function doHash(str, seed) {
	  var m = 0x5bd1e995;
	  var r = 24;
	  var h = seed ^ str.length;
	  var length = str.length;
	  var currentIndex = 0;

	  while (length >= 4) {
	    var k = UInt32(str, currentIndex);

	    k = Umul32(k, m);
	    k ^= k >>> r;
	    k = Umul32(k, m);

	    h = Umul32(h, m);
	    h ^= k;

	    currentIndex += 4;
	    length -= 4;
	  }

	  switch (length) {
	    case 3:
	      h ^= UInt16(str, currentIndex);
	      h ^= str.charCodeAt(currentIndex + 2) << 16;
	      h = Umul32(h, m);
	      break;

	    case 2:
	      h ^= UInt16(str, currentIndex);
	      h = Umul32(h, m);
	      break;

	    case 1:
	      h ^= str.charCodeAt(currentIndex);
	      h = Umul32(h, m);
	      break;
	  }

	  h ^= h >>> 13;
	  h = Umul32(h, m);
	  h ^= h >>> 15;

	  return h >>> 0;
	}

	function UInt32(str, pos) {
	  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
	}

	function UInt16(str, pos) {
	  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
	}

	function Umul32(n, m) {
	  n = n | 0;
	  m = m | 0;
	  var nlo = n & 0xffff;
	  var nhi = n >>> 16;
	  var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;
	  return res;
	}

/***/ },
/* 134 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
	module.exports = exports["default"];

/***/ },
/* 135 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// helper to capitalize strings

	exports.default = function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};

	module.exports = exports["default"];

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * lodash 4.5.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;

	/** Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns). */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the new array of key-value pairs.
	 */
	function baseToPairs(object, props) {
	  return arrayMap(props, function(key) {
	    return [key, object[key]];
	  });
	}

	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Converts `map` to an array.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Converts `set` to an array.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototypeOf = Object.getPrototypeOf,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = Object.keys;

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var mapCtorString = Map ? funcToString.call(Map) : '',
	    setCtorString = Set ? funcToString.call(Set) : '',
	    weakMapCtorString = WeakMap ? funcToString.call(WeakMap) : '';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = Symbol ? symbolProto.valueOf : undefined,
	    symbolToString = Symbol ? symbolProto.toString : undefined;

	/**
	 * Creates an hash object.
	 *
	 * @private
	 * @constructor
	 * @returns {Object} Returns the new hash object.
	 */
	function Hash() {}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(hash, key) {
	  return hashHas(hash, key) && delete hash[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @param {Object} hash The hash to query.
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(hash, key) {
	  if (nativeCreate) {
	    var result = hash[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @param {Object} hash The hash to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(hash, key) {
	  return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 */
	function hashSet(hash, key, value) {
	  hash[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	}

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function MapCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = values[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': Map ? new Map : [],
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapDelete(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map['delete'](key) : assocDelete(data.map, key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapGet(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashGet(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map.get(key) : assocGet(data.map, key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapHas(key) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    return hashHas(typeof key == 'string' ? data.string : data.hash, key);
	  }
	  return Map ? data.map.has(key) : assocHas(data.map, key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache object.
	 */
	function mapSet(key, value) {
	  var data = this.__data__;
	  if (isKeyable(key)) {
	    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
	  } else if (Map) {
	    data.map.set(key, value);
	  } else {
	    assocSet(data.map, key, value);
	  }
	  return this;
	}

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function Stack(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = values[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = { 'array': [], 'map': null };
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocDelete(array, key) : data.map['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocGet(array, key) : data.map.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  var data = this.__data__,
	      array = data.array;

	  return array ? assocHas(array, key) : data.map.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache object.
	 */
	function stackSet(key, value) {
	  var data = this.__data__,
	      array = data.array;

	  if (array) {
	    if (array.length < (LARGE_ARRAY_SIZE - 1)) {
	      assocSet(array, key, value);
	    } else {
	      data.array = null;
	      data.map = new MapCache(array);
	    }
	  }
	  var map = data.map;
	  if (map) {
	    map.set(key, value);
	  }
	  return this;
	}

	/**
	 * Removes `key` and its value from the associative array.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function assocDelete(array, key) {
	  var index = assocIndexOf(array, key);
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = array.length - 1;
	  if (index == lastIndex) {
	    array.pop();
	  } else {
	    splice.call(array, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the associative array value for `key`.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function assocGet(array, key) {
	  var index = assocIndexOf(array, key);
	  return index < 0 ? undefined : array[index][1];
	}

	/**
	 * Checks if an associative array value for `key` exists.
	 *
	 * @private
	 * @param {Array} array The array to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function assocHas(array, key) {
	  return assocIndexOf(array, key) > -1;
	}

	/**
	 * Gets the index at which the first occurrence of `key` is found in `array`
	 * of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * Sets the associative array `key` to `value`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 */
	function assocSet(array, key, value) {
	  var index = assocIndexOf(array, key);
	  if (index < 0) {
	    array.push([key, value]);
	  } else {
	    array[index][1] = value;
	  }
	}

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function baseCastPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path + ''] : baseCastPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	  // that are composed entirely of index properties, return `false` for
	  // `hasOwnProperty` checks of them.
	  return hasOwnProperty.call(object, key) ||
	    (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
	}

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return key in Object(object);
	}

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag && !isHostObject(object),
	      othIsObj = othTag == objectTag && !isHostObject(other),
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag, equalFunc, customizer, bitmask);
	  }
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	  if (!isPartial) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, bitmask, stack);
	}

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack,
	          result = customizer ? customizer(objValue, srcValue, key, object, source, stack) : undefined;

	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  var type = typeof value;
	  if (type == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	/**
	 * The base implementation of `_.keys` which doesn't skip the constructor
	 * property of prototypes or treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  return nativeKeys(Object(object));
	}

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value &&
	        (value !== undefined || (key in Object(object)));
	    };
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @param {Object} [stack] Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var index = -1,
	      isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(array, other);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isUnordered) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  return result;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask) {
	  switch (tag) {
	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object) ? other != +other : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);

	      // Recursively compare objects (susceptible to call stack limits).
	      return (isPartial || object.size == other.size) &&
	        equalFunc(convert(object), convert(other), customizer, bitmask | UNORDERED_COMPARE_FLAG);

	    case symbolTag:
	      return !!Symbol && (symbolValueOf.call(object) == symbolValueOf.call(other));
	  }
	  return false;
	}

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : baseHas(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  return result;
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = toPairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function getTag(value) {
	  return objectToString.call(value);
	}

	// Fallback for IE 11 providing `toStringTag` values for maps, sets, and weakmaps.
	if ((Map && getTag(new Map) != mapTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : null,
	        ctorString = typeof Ctor == 'function' ? funcToString.call(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case mapCtorString: return mapTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasFunc(object, path);
	  if (!result && !isKey(path)) {
	    path = baseCastPath(path);
	    object = parent(object, path);
	    if (object != null) {
	      path = last(path);
	      result = hasFunc(object, path);
	    }
	  }
	  var length = object ? object.length : undefined;
	  return result || (
	    !!length && isLength(length) && isIndex(path, length) &&
	    (isArray(object) || isString(object) || isArguments(object))
	  );
	}

	/**
	 * Creates an array of index keys for `object` values of arrays,
	 * `arguments` objects, and strings, otherwise `null` is returned.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array|null} Returns index keys, else `null`.
	 */
	function indexKeys(object) {
	  var length = object ? object.length : undefined;
	  if (isLength(length) &&
	      (isArray(object) || isString(object) || isArguments(object))) {
	    return baseTimes(length, String);
	  }
	  return null;
	}

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (typeof value == 'number') {
	    return true;
	  }
	  return !isArray(value) &&
	    (reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	      (object != null && value in Object(object)));
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return type == 'number' || type == 'boolean' ||
	    (type == 'string' && value != '__proto__') || value == null;
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent(object, path) {
	  return path.length == 1 ? object : get(object, baseSlice(path, 0, -1));
	}

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	function stringToPath(string) {
	  var result = [];
	  toString(string).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	/**
	 * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null &&
	    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array constructors, and
	  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(funcToString.call(value));
	  }
	  return isObjectLike(value) &&
	    (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	}

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (value == null) {
	    return '';
	  }
	  if (isSymbol(value)) {
	    return Symbol ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined` the `defaultValue` is used in its place.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b.c');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b', 'c']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return hasPath(object, path, baseHasIn);
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  var isProto = isPrototype(object);
	  if (!(isProto || isArrayLike(object))) {
	    return baseKeys(object);
	  }
	  var indexes = indexKeys(object),
	      skipIndexes = !!indexes,
	      result = indexes || [],
	      length = result.length;

	  for (var key in object) {
	    if (baseHas(object, key) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	        !(isProto && key == 'constructor')) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Creates an array of own enumerable key-value pairs for `object` which
	 * can be consumed by `_.fromPairs`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairs(new Foo);
	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	 */
	function toPairs(object) {
	  return baseToPairs(object, keys(object));
	}

	/**
	 * This method returns the first argument given to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	// Avoid inheriting from `Object.prototype` when possible.
	Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;

	// Add functions to the `MapCache`.
	MapCache.prototype.clear = mapClear;
	MapCache.prototype['delete'] = mapDelete;
	MapCache.prototype.get = mapGet;
	MapCache.prototype.has = mapHas;
	MapCache.prototype.set = mapSet;

	// Add functions to the `Stack` cache.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = baseIteratee;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)(module), (function() { return this; }())))

/***/ },
/* 137 */
/***/ function(module, exports) {

	/**
	 * lodash 4.0.3 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    stringTag = '[object String]';

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototypeOf = Object.getPrototypeOf,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = Object.keys;

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	  // that are composed entirely of index properties, return `false` for
	  // `hasOwnProperty` checks of them.
	  return hasOwnProperty.call(object, key) ||
	    (typeof object == 'object' && key in object && getPrototypeOf(object) === null);
	}

	/**
	 * The base implementation of `_.keys` which doesn't skip the constructor
	 * property of prototypes or treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  return nativeKeys(Object(object));
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Creates an array of index keys for `object` values of arrays,
	 * `arguments` objects, and strings, otherwise `null` is returned.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array|null} Returns index keys, else `null`.
	 */
	function indexKeys(object) {
	  var length = object ? object.length : undefined;
	  if (isLength(length) &&
	      (isArray(object) || isString(object) || isArguments(object))) {
	    return baseTimes(length, String);
	  }
	  return null;
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null &&
	    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array constructors, and
	  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  var isProto = isPrototype(object);
	  if (!(isProto || isArrayLike(object))) {
	    return baseKeys(object);
	  }
	  var indexes = indexKeys(object),
	      skipIndexes = !!indexes,
	      result = indexes || [],
	      length = result.length;

	  for (var key in object) {
	    if (baseHas(object, key) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	        !(isProto && key == 'constructor')) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 4.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseFor = __webpack_require__(301),
	    baseIteratee = __webpack_require__(136),
	    keys = __webpack_require__(137);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	/**
	 * The opposite of `_.mapValues`; this method creates an object with the
	 * same values as `object` and keys generated by running each own enumerable
	 * property of `object` through `iteratee`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @example
	 *
	 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   return key + value;
	 * });
	 * // => { 'a1': 1, 'b2': 2 }
	 */
	function mapKeys(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);

	  baseForOwn(object, function(value, key, object) {
	    result[iteratee(value, key, object)] = value;
	  });
	  return result;
	}

	module.exports = mapKeys;


/***/ },
/* 139 */
/***/ function(module, exports) {

	var Accessor = {
	  IDENTITY_FN: function (input) {
	    return input;
	  },

	  generateAccessor: function (field) {
	    return function (object) {
	      return object[field];
	    };
	  },

	  generateOptionToStringFor: function (prop) {
	    if (typeof prop === 'string') {
	      return this.generateAccessor(prop);
	    } else if (typeof prop === 'function') {
	      return prop;
	    } else {
	      return this.IDENTITY_FN;
	    }
	  },

	  valueForOption: function (option, object) {
	    if (typeof option === 'string') {
	      return object[option];
	    } else if (typeof option === 'function') {
	      return option(object);
	    } else {
	      return object;
	    }
	  }
	};

	module.exports = Accessor;

/***/ },
/* 140 */
/***/ function(module, exports) {

	/**
	 * PolyFills make me sad
	 */
	var KeyEvent = KeyEvent || {};
	KeyEvent.DOM_VK_UP = KeyEvent.DOM_VK_UP || 38;
	KeyEvent.DOM_VK_DOWN = KeyEvent.DOM_VK_DOWN || 40;
	KeyEvent.DOM_VK_BACK_SPACE = KeyEvent.DOM_VK_BACK_SPACE || 8;
	KeyEvent.DOM_VK_RETURN = KeyEvent.DOM_VK_RETURN || 13;
	KeyEvent.DOM_VK_ENTER = KeyEvent.DOM_VK_ENTER || 14;
	KeyEvent.DOM_VK_ESCAPE = KeyEvent.DOM_VK_ESCAPE || 27;
	KeyEvent.DOM_VK_TAB = KeyEvent.DOM_VK_TAB || 9;

	module.exports = KeyEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var Accessor = __webpack_require__(139);
	var React = __webpack_require__(2);
	var TypeaheadSelector = __webpack_require__(318);
	var KeyEvent = __webpack_require__(140);
	var fuzzy = __webpack_require__(282);
	var classNames = __webpack_require__(38);

	/**
	 * A "typeahead", an auto-completing text input
	 *
	 * Renders an text input that shows options nearby that you can use the
	 * keyboard or mouse to select.  Requires CSS for MASSIVE DAMAGE.
	 */
	var Typeahead = React.createClass({
	  displayName: 'Typeahead',

	  propTypes: {
	    name: React.PropTypes.string,
	    customClasses: React.PropTypes.object,
	    maxVisible: React.PropTypes.number,
	    resultsTruncatedMessage: React.PropTypes.string,
	    options: React.PropTypes.array,
	    allowCustomValues: React.PropTypes.number,
	    initialValue: React.PropTypes.string,
	    value: React.PropTypes.string,
	    placeholder: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    textarea: React.PropTypes.bool,
	    inputProps: React.PropTypes.object,
	    onOptionSelected: React.PropTypes.func,
	    onChange: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onKeyPress: React.PropTypes.func,
	    onKeyUp: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onBlur: React.PropTypes.func,
	    filterOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    searchOptions: React.PropTypes.func,
	    displayOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    inputDisplayOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    formInputOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    defaultClassNames: React.PropTypes.bool,
	    customListComponent: React.PropTypes.oneOfType([React.PropTypes.element, React.PropTypes.func]),
	    showOptionsWhenEmpty: React.PropTypes.bool
	  },

	  getDefaultProps: function () {
	    return {
	      options: [],
	      customClasses: {},
	      allowCustomValues: 0,
	      initialValue: "",
	      value: "",
	      placeholder: "",
	      disabled: false,
	      textarea: false,
	      inputProps: {},
	      onOptionSelected: function (option) {},
	      onChange: function (event) {},
	      onKeyDown: function (event) {},
	      onKeyPress: function (event) {},
	      onKeyUp: function (event) {},
	      onFocus: function (event) {},
	      onBlur: function (event) {},
	      filterOption: null,
	      searchOptions: null,
	      inputDisplayOption: null,
	      defaultClassNames: true,
	      customListComponent: TypeaheadSelector,
	      showOptionsWhenEmpty: false,
	      resultsTruncatedMessage: null
	    };
	  },

	  getInitialState: function () {
	    return {
	      // The options matching the entry value
	      searchResults: this.getOptionsForValue(this.props.initialValue, this.props.options),

	      // This should be called something else, "entryValue"
	      entryValue: this.props.value || this.props.initialValue,

	      // A valid typeahead value
	      selection: this.props.value,

	      // Index of the selection
	      selectionIndex: null,

	      // Keep track of the focus state of the input element, to determine
	      // whether to show options when empty (if showOptionsWhenEmpty is true)
	      isFocused: false,

	      // true when focused, false onOptionSelected
	      showResults: false
	    };
	  },

	  _shouldSkipSearch: function (input) {
	    var emptyValue = !input || input.trim().length == 0;

	    // this.state must be checked because it may not be defined yet if this function
	    // is called from within getInitialState
	    var isFocused = this.state && this.state.isFocused;
	    return !(this.props.showOptionsWhenEmpty && isFocused) && emptyValue;
	  },

	  getOptionsForValue: function (value, options) {
	    if (this._shouldSkipSearch(value)) {
	      return [];
	    }

	    var searchOptions = this._generateSearchFunction();
	    return searchOptions(value, options);
	  },

	  setEntryText: function (value) {
	    this.refs.entry.value = value;
	    this._onTextEntryUpdated();
	  },

	  focus: function () {
	    this.refs.entry.focus();
	  },

	  _hasCustomValue: function () {
	    if (this.props.allowCustomValues > 0 && this.state.entryValue.length >= this.props.allowCustomValues && this.state.searchResults.indexOf(this.state.entryValue) < 0) {
	      return true;
	    }
	    return false;
	  },

	  _getCustomValue: function () {
	    if (this._hasCustomValue()) {
	      return this.state.entryValue;
	    }
	    return null;
	  },

	  _renderIncrementalSearchResults: function () {
	    // Nothing has been entered into the textbox
	    if (this._shouldSkipSearch(this.state.entryValue)) {
	      return "";
	    }

	    // Something was just selected
	    if (this.state.selection) {
	      return "";
	    }

	    return React.createElement(this.props.customListComponent, {
	      ref: 'sel', options: this.props.maxVisible ? this.state.searchResults.slice(0, this.props.maxVisible) : this.state.searchResults,
	      areResultsTruncated: this.props.maxVisible && this.state.searchResults.length > this.props.maxVisible,
	      resultsTruncatedMessage: this.props.resultsTruncatedMessage,
	      onOptionSelected: this._onOptionSelected,
	      allowCustomValues: this.props.allowCustomValues,
	      customValue: this._getCustomValue(),
	      customClasses: this.props.customClasses,
	      selectionIndex: this.state.selectionIndex,
	      defaultClassNames: this.props.defaultClassNames,
	      displayOption: Accessor.generateOptionToStringFor(this.props.displayOption) });
	  },

	  getSelection: function () {
	    var index = this.state.selectionIndex;
	    if (this._hasCustomValue()) {
	      if (index === 0) {
	        return this.state.entryValue;
	      } else {
	        index--;
	      }
	    }
	    return this.state.searchResults[index];
	  },

	  _onOptionSelected: function (option, event) {
	    var nEntry = this.refs.entry;
	    nEntry.focus();

	    var displayOption = Accessor.generateOptionToStringFor(this.props.inputDisplayOption || this.props.displayOption);
	    var optionString = displayOption(option, 0);

	    var formInputOption = Accessor.generateOptionToStringFor(this.props.formInputOption || displayOption);
	    var formInputOptionString = formInputOption(option);

	    nEntry.value = optionString;
	    this.setState({ searchResults: this.getOptionsForValue(optionString, this.props.options),
	      selection: formInputOptionString,
	      entryValue: optionString,
	      showResults: false });
	    return this.props.onOptionSelected(option, event);
	  },

	  _onTextEntryUpdated: function () {
	    var value = this.refs.entry.value;
	    this.setState({ searchResults: this.getOptionsForValue(value, this.props.options),
	      selection: '',
	      entryValue: value });
	  },

	  _onEnter: function (event) {
	    var selection = this.getSelection();
	    if (!selection) {
	      return this.props.onKeyDown(event);
	    }
	    return this._onOptionSelected(selection, event);
	  },

	  _onEscape: function () {
	    this.setState({
	      selectionIndex: null
	    });
	  },

	  _onTab: function (event) {
	    var selection = this.getSelection();
	    var option = selection ? selection : this.state.searchResults.length > 0 ? this.state.searchResults[0] : null;

	    if (option === null && this._hasCustomValue()) {
	      option = this._getCustomValue();
	    }

	    if (option !== null) {
	      return this._onOptionSelected(option, event);
	    }
	  },

	  eventMap: function (event) {
	    var events = {};

	    events[KeyEvent.DOM_VK_UP] = this.navUp;
	    events[KeyEvent.DOM_VK_DOWN] = this.navDown;
	    events[KeyEvent.DOM_VK_RETURN] = events[KeyEvent.DOM_VK_ENTER] = this._onEnter;
	    events[KeyEvent.DOM_VK_ESCAPE] = this._onEscape;
	    events[KeyEvent.DOM_VK_TAB] = this._onTab;

	    return events;
	  },

	  _nav: function (delta) {
	    if (!this._hasHint()) {
	      return;
	    }
	    var newIndex = this.state.selectionIndex === null ? delta == 1 ? 0 : delta : this.state.selectionIndex + delta;
	    var length = this.props.maxVisible ? this.state.searchResults.slice(0, this.props.maxVisible).length : this.state.searchResults.length;
	    if (this._hasCustomValue()) {
	      length += 1;
	    }

	    if (newIndex < 0) {
	      newIndex += length;
	    } else if (newIndex >= length) {
	      newIndex -= length;
	    }

	    this.setState({ selectionIndex: newIndex });
	  },

	  navDown: function () {
	    this._nav(1);
	  },

	  navUp: function () {
	    this._nav(-1);
	  },

	  _onChange: function (event) {
	    if (this.props.onChange) {
	      this.props.onChange(event);
	    }

	    this._onTextEntryUpdated();
	  },

	  _onKeyDown: function (event) {
	    // If there are no visible elements, don't perform selector navigation.
	    // Just pass this up to the upstream onKeydown handler.
	    // Also skip if the user is pressing the shift key, since none of our handlers are looking for shift
	    if (!this._hasHint() || event.shiftKey) {
	      return this.props.onKeyDown(event);
	    }

	    var handler = this.eventMap()[event.keyCode];

	    if (handler) {
	      handler(event);
	    } else {
	      return this.props.onKeyDown(event);
	    }
	    // Don't propagate the keystroke back to the DOM/browser
	    event.preventDefault();
	  },

	  componentWillReceiveProps: function (nextProps) {
	    this.setState({
	      searchResults: this.getOptionsForValue(this.state.entryValue, nextProps.options)
	    });
	  },

	  render: function () {
	    var inputClasses = {};
	    inputClasses[this.props.customClasses.input] = !!this.props.customClasses.input;
	    var inputClassList = classNames(inputClasses);

	    var classes = {
	      typeahead: this.props.defaultClassNames
	    };
	    classes[this.props.className] = !!this.props.className;
	    var classList = classNames(classes);

	    var InputElement = this.props.textarea ? 'textarea' : 'input';
	    return React.createElement(
	      'div',
	      { className: classList },
	      this._renderHiddenInput(),
	      React.createElement(InputElement, _extends({ ref: 'entry', type: 'text',
	        disabled: this.props.disabled
	      }, this.props.inputProps, {
	        placeholder: this.props.placeholder,
	        className: inputClassList,
	        value: this.state.entryValue,
	        onChange: this._onChange,
	        onKeyDown: this._onKeyDown,
	        onKeyPress: this.props.onKeyPress,
	        onKeyUp: this.props.onKeyUp,
	        onFocus: this._onFocus,
	        onBlur: this._onBlur
	      })),
	      this.state.showResults && this._renderIncrementalSearchResults()
	    );
	  },

	  _onFocus: function (event) {
	    this.setState({ isFocused: true, showResults: true }, function () {
	      this._onTextEntryUpdated();
	    }.bind(this));
	    if (this.props.onFocus) {
	      return this.props.onFocus(event);
	    }
	  },

	  _onBlur: function (event) {
	    this.setState({ isFocused: false }, function () {
	      this._onTextEntryUpdated();
	    }.bind(this));
	    if (this.props.onBlur) {
	      return this.props.onBlur(event);
	    }
	  },

	  _renderHiddenInput: function () {
	    if (!this.props.name) {
	      return null;
	    }

	    return React.createElement('input', {
	      type: 'hidden',
	      name: this.props.name,
	      value: this.state.selection
	    });
	  },

	  _generateSearchFunction: function () {
	    var searchOptionsProp = this.props.searchOptions;
	    var filterOptionProp = this.props.filterOption;
	    if (typeof searchOptionsProp === 'function') {
	      if (filterOptionProp !== null) {
	        console.warn('searchOptions prop is being used, filterOption prop will be ignored');
	      }
	      return searchOptionsProp;
	    } else if (typeof filterOptionProp === 'function') {
	      return function (value, options) {
	        return options.filter(function (o) {
	          return filterOptionProp(value, o);
	        });
	      };
	    } else {
	      var mapper;
	      if (typeof filterOptionProp === 'string') {
	        mapper = Accessor.generateAccessor(filterOptionProp);
	      } else {
	        mapper = Accessor.IDENTITY_FN;
	      }
	      return function (value, options) {
	        return fuzzy.filter(value, options, { extract: mapper }).map(function (res) {
	          return options[res.index];
	        });
	      };
	    }
	  },

	  _hasHint: function () {
	    return this.state.searchResults.length > 0 || this._hasCustomValue();
	  }
	});

	module.exports = Typeahead;

/***/ },
/* 142 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(324);
	var ReactMultiChildUpdateTypes = __webpack_require__(160);
	var ReactPerf = __webpack_require__(13);

	var setInnerHTML = __webpack_require__(60);
	var setTextContent = __webpack_require__(96);
	var invariant = __webpack_require__(3);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.

	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

	  parentNode.insertBefore(childNode, beforeChild);
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});

	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(24);
	var ReactElement = __webpack_require__(12);

	var emptyFunction = __webpack_require__(17);
	var traverseAllChildren = __webpack_require__(98);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;

	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(147);
	var ReactElement = __webpack_require__(12);
	var ReactPropTypeLocations = __webpack_require__(55);
	var ReactPropTypeLocationNames = __webpack_require__(54);
	var ReactNoopUpdateQueue = __webpack_require__(162);

	var assign = __webpack_require__(5);
	var emptyObject = __webpack_require__(40);
	var invariant = __webpack_require__(3);
	var keyMirror = __webpack_require__(51);
	var keyOf = __webpack_require__(23);
	var warning = __webpack_require__(6);

	var MIXINS_KEY = keyOf({ mixins: null });

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});

	var injectedMixins = [];

	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactNoopUpdateQueue = __webpack_require__(162);

	var canDefineProperty = __webpack_require__(58);
	var emptyObject = __webpack_require__(40);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var ReactCurrentOwner = __webpack_require__(20);
	var ReactDOMTextComponent = __webpack_require__(151);
	var ReactDefaultInjection = __webpack_require__(153);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMount = __webpack_require__(9);
	var ReactPerf = __webpack_require__(13);
	var ReactReconciler = __webpack_require__(32);
	var ReactUpdates = __webpack_require__(15);
	var ReactVersion = __webpack_require__(88);

	var findDOMNode = __webpack_require__(89);
	var renderSubtreeIntoContainer = __webpack_require__(375);
	var warning = __webpack_require__(6);

	ReactDefaultInjection.inject();

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,

	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(8);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }

	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

	    // shams
	    Object.create, Object.freeze];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 149 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */

	'use strict';

	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};

	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(83);
	var ReactMount = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(15);

	var assign = __webpack_require__(5);
	var warning = __webpack_require__(6);

	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;

	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);

	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}

	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);

	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}

	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;

	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,

	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },

	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },

	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;

	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMChildrenOperations = __webpack_require__(143);
	var DOMPropertyOperations = __webpack_require__(82);
	var ReactComponentBrowserEnvironment = __webpack_require__(84);
	var ReactMount = __webpack_require__(9);

	var assign = __webpack_require__(5);
	var escapeTextContentForBrowser = __webpack_require__(59);
	var setTextContent = __webpack_require__(96);
	var validateDOMNesting = __webpack_require__(99);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);

	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }

	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },

	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(15);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(5);
	var emptyFunction = __webpack_require__(17);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(320);
	var ChangeEventPlugin = __webpack_require__(322);
	var ClientReactRootIndex = __webpack_require__(323);
	var DefaultEventPluginOrder = __webpack_require__(325);
	var EnterLeaveEventPlugin = __webpack_require__(326);
	var ExecutionEnvironment = __webpack_require__(8);
	var HTMLDOMPropertyConfig = __webpack_require__(329);
	var ReactBrowserComponentMixin = __webpack_require__(331);
	var ReactComponentBrowserEnvironment = __webpack_require__(84);
	var ReactDefaultBatchingStrategy = __webpack_require__(152);
	var ReactDOMComponent = __webpack_require__(335);
	var ReactDOMTextComponent = __webpack_require__(151);
	var ReactEventListener = __webpack_require__(345);
	var ReactInjection = __webpack_require__(346);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMount = __webpack_require__(9);
	var ReactReconcileTransaction = __webpack_require__(350);
	var SelectEventPlugin = __webpack_require__(356);
	var ServerReactRootIndex = __webpack_require__(357);
	var SimpleEventPlugin = __webpack_require__(358);
	var SVGDOMPropertyConfig = __webpack_require__(355);

	var alreadyInjected = false;

	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;

	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(342);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(12);
	var ReactPropTypeLocations = __webpack_require__(55);
	var ReactPropTypeLocationNames = __webpack_require__(54);
	var ReactCurrentOwner = __webpack_require__(20);

	var canDefineProperty = __webpack_require__(58);
	var getIteratorFn = __webpack_require__(93);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }

	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;

	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  return addenda;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(12);
	var ReactEmptyComponentRegistry = __webpack_require__(156);
	var ReactReconciler = __webpack_require__(32);

	var assign = __webpack_require__(5);

	var placeholderElement;

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};

	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});

	ReactEmptyComponent.injection = ReactEmptyComponentInjection;

	module.exports = ReactEmptyComponent;

/***/ },
/* 156 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */

	'use strict';

	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};

	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	'use strict';

	var caughtError = null;

	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}

	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,

	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};

	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}

	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(339);

	var containsNode = __webpack_require__(128);
	var focusNode = __webpack_require__(129);
	var getActiveElement = __webpack_require__(130);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },

	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || { start: 0, end: 0 };
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(367);

	var TAG_END = /\/?>/;

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);

	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(51);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */

	'use strict';

	var warning = __webpack_require__(6);

	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }

	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(12);
	var ReactPropTypeLocationNames = __webpack_require__(54);

	var emptyFunction = __webpack_require__(17);
	var getIteratorFn = __webpack_require__(93);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;

/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;

/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 167 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;

/***/ },
/* 169 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}

	module.exports = isTextInputElement;

/***/ },
/* 170 */
/***/ function(module, exports) {

	'use strict';

	/* Simplified implementation of DOM2 EventTarget.
	 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
	 */

	function EventTarget() {
	  this._listeners = {};
	}

	EventTarget.prototype.addEventListener = function(eventType, listener) {
	  if (!(eventType in this._listeners)) {
	    this._listeners[eventType] = [];
	  }
	  var arr = this._listeners[eventType];
	  // #4
	  if (arr.indexOf(listener) === -1) {
	    // Make a copy so as not to interfere with a current dispatchEvent.
	    arr = arr.concat([listener]);
	  }
	  this._listeners[eventType] = arr;
	};

	EventTarget.prototype.removeEventListener = function(eventType, listener) {
	  var arr = this._listeners[eventType];
	  if (!arr) {
	    return;
	  }
	  var idx = arr.indexOf(listener);
	  if (idx !== -1) {
	    if (arr.length > 1) {
	      // Make a copy so as not to interfere with a current dispatchEvent.
	      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
	    } else {
	      delete this._listeners[eventType];
	    }
	    return;
	  }
	};

	EventTarget.prototype.dispatchEvent = function(event) {
	  var t = event.type;
	  var args = Array.prototype.slice.call(arguments, 0);
	  // TODO: This doesn't match the real behavior; per spec, onfoo get
	  // their place in line from the /first/ time they're set from
	  // non-null. Although WebKit bumps it to the end every time it's
	  // set.
	  if (this['on' + t]) {
	    this['on' + t].apply(this, args);
	  }
	  if (t in this._listeners) {
	    // Grab a reference to the listeners list. removeEventListener may alter the list.
	    var listeners = this._listeners[t];
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i].apply(this, args);
	    }
	  }
	};

	module.exports = EventTarget;


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var EventEmitter = __webpack_require__(10).EventEmitter
	  , inherits = __webpack_require__(4)
	  , JSON3 = __webpack_require__(18)
	  , objectUtils = __webpack_require__(103)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:info-ajax');
	}

	function InfoAjax(url, AjaxObject) {
	  EventEmitter.call(this);

	  var self = this;
	  var t0 = +new Date();
	  this.xo = new AjaxObject('GET', url);

	  this.xo.once('finish', function(status, text) {
	    var info, rtt;
	    if (status === 200) {
	      rtt = (+new Date()) - t0;
	      if (text) {
	        try {
	          info = JSON3.parse(text);
	        } catch (e) {
	          debug('bad json', text);
	        }
	      }

	      if (!objectUtils.isObject(info)) {
	        info = {};
	      }
	    }
	    self.emit('finish', info, rtt);
	    self.removeAllListeners();
	  });
	}

	inherits(InfoAjax, EventEmitter);

	InfoAjax.prototype.close = function() {
	  this.removeAllListeners();
	  this.xo.close();
	};

	module.exports = InfoAjax;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  , JSON3 = __webpack_require__(18)
	  , XHRLocalObject = __webpack_require__(45)
	  , InfoAjax = __webpack_require__(171)
	  ;

	function InfoReceiverIframe(transUrl) {
	  var self = this;
	  EventEmitter.call(this);

	  this.ir = new InfoAjax(transUrl, XHRLocalObject);
	  this.ir.once('finish', function(info, rtt) {
	    self.ir = null;
	    self.emit('message', JSON3.stringify([info, rtt]));
	  });
	}

	inherits(InfoReceiverIframe, EventEmitter);

	InfoReceiverIframe.transportName = 'iframe-info-receiver';

	InfoReceiverIframe.prototype.close = function() {
	  if (this.ir) {
	    this.ir.close();
	    this.ir = null;
	  }
	  this.removeAllListeners();
	};

	module.exports = InfoReceiverIframe;


/***/ },
/* 173 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	module.exports = global.location || {
	  origin: 'http://localhost:80'
	, protocol: 'http'
	, host: 'localhost'
	, port: 80
	, href: 'http://localhost/'
	, hash: ''
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';

	var EventEmitter = __webpack_require__(10).EventEmitter
	  , inherits = __webpack_require__(4)
	  , utils = __webpack_require__(25)
	  , urlUtils = __webpack_require__(14)
	  , XHR = global.XMLHttpRequest
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:browser:xhr');
	}

	function AbstractXHRObject(method, url, payload, opts) {
	  debug(method, url);
	  var self = this;
	  EventEmitter.call(this);

	  setTimeout(function () {
	    self._start(method, url, payload, opts);
	  }, 0);
	}

	inherits(AbstractXHRObject, EventEmitter);

	AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
	  var self = this;

	  try {
	    this.xhr = new XHR();
	  } catch (x) {}

	  if (!this.xhr) {
	    debug('no xhr');
	    this.emit('finish', 0, 'no xhr support');
	    this._cleanup();
	    return;
	  }

	  // several browsers cache POSTs
	  url = urlUtils.addQuery(url, 't=' + (+new Date()));

	  // Explorer tends to keep connection open, even after the
	  // tab gets closed: http://bugs.jquery.com/ticket/5280
	  this.unloadRef = utils.unloadAdd(function() {
	    debug('unload cleanup');
	    self._cleanup(true);
	  });
	  try {
	    this.xhr.open(method, url, true);
	    if (this.timeout && 'timeout' in this.xhr) {
	      this.xhr.timeout = this.timeout;
	      this.xhr.ontimeout = function() {
	        debug('xhr timeout');
	        self.emit('finish', 0, '');
	        self._cleanup(false);
	      };
	    }
	  } catch (e) {
	    debug('exception', e);
	    // IE raises an exception on wrong port.
	    this.emit('finish', 0, '');
	    this._cleanup(false);
	    return;
	  }

	  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
	    debug('withCredentials');
	    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
	    // "This never affects same-site requests."

	    this.xhr.withCredentials = 'true';
	  }
	  if (opts && opts.headers) {
	    for (var key in opts.headers) {
	      this.xhr.setRequestHeader(key, opts.headers[key]);
	    }
	  }

	  this.xhr.onreadystatechange = function() {
	    if (self.xhr) {
	      var x = self.xhr;
	      var text, status;
	      debug('readyState', x.readyState);
	      switch (x.readyState) {
	      case 3:
	        // IE doesn't like peeking into responseText or status
	        // on Microsoft.XMLHTTP and readystate=3
	        try {
	          status = x.status;
	          text = x.responseText;
	        } catch (e) {}
	        debug('status', status);
	        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
	        if (status === 1223) {
	          status = 204;
	        }

	        // IE does return readystate == 3 for 404 answers.
	        if (status === 200 && text && text.length > 0) {
	          debug('chunk');
	          self.emit('chunk', status, text);
	        }
	        break;
	      case 4:
	        status = x.status;
	        debug('status', status);
	        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
	        if (status === 1223) {
	          status = 204;
	        }
	        // IE returns this for a bad port
	        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
	        if (status === 12005 || status === 12029) {
	          status = 0;
	        }

	        debug('finish', status, x.responseText);
	        self.emit('finish', status, x.responseText);
	        self._cleanup(false);
	        break;
	      }
	    }
	  };

	  try {
	    self.xhr.send(payload);
	  } catch (e) {
	    self.emit('finish', 0, '');
	    self._cleanup(false);
	  }
	};

	AbstractXHRObject.prototype._cleanup = function(abort) {
	  debug('cleanup');
	  if (!this.xhr) {
	    return;
	  }
	  this.removeAllListeners();
	  utils.unloadDel(this.unloadRef);

	  // IE needs this field to be a function
	  this.xhr.onreadystatechange = function() {};
	  if (this.xhr.ontimeout) {
	    this.xhr.ontimeout = null;
	  }

	  if (abort) {
	    try {
	      this.xhr.abort();
	    } catch (x) {}
	  }
	  this.unloadRef = this.xhr = null;
	};

	AbstractXHRObject.prototype.close = function() {
	  debug('close');
	  this._cleanup(true);
	};

	AbstractXHRObject.enabled = !!XHR;
	// override XMLHttpRequest for IE6/7
	// obfuscate to avoid firewalls
	var axo = ['Active'].concat('Object').join('X');
	if (!AbstractXHRObject.enabled && (axo in global)) {
	  debug('overriding xmlhttprequest');
	  XHR = function() {
	    try {
	      return new global[axo]('Microsoft.XMLHTTP');
	    } catch (e) {
	      return null;
	    }
	  };
	  AbstractXHRObject.enabled = !!new XHR();
	}

	var cors = false;
	try {
	  cors = 'withCredentials' in new XHR();
	} catch (ignored) {}

	AbstractXHRObject.supportsCORS = cors;

	module.exports = AbstractXHRObject;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(1)))

/***/ },
/* 175 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global.EventSource;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , AjaxBasedTransport = __webpack_require__(35)
	  , EventSourceReceiver = __webpack_require__(395)
	  , XHRCorsObject = __webpack_require__(62)
	  , EventSourceDriver = __webpack_require__(175)
	  ;

	function EventSourceTransport(transUrl) {
	  if (!EventSourceTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }

	  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
	}

	inherits(EventSourceTransport, AjaxBasedTransport);

	EventSourceTransport.enabled = function() {
	  return !!EventSourceDriver;
	};

	EventSourceTransport.transportName = 'eventsource';
	EventSourceTransport.roundTrips = 2;

	module.exports = EventSourceTransport;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , HtmlfileReceiver = __webpack_require__(396)
	  , XHRLocalObject = __webpack_require__(45)
	  , AjaxBasedTransport = __webpack_require__(35)
	  ;

	function HtmlFileTransport(transUrl) {
	  if (!HtmlfileReceiver.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
	}

	inherits(HtmlFileTransport, AjaxBasedTransport);

	HtmlFileTransport.enabled = function(info) {
	  return HtmlfileReceiver.enabled && info.sameOrigin;
	};

	HtmlFileTransport.transportName = 'htmlfile';
	HtmlFileTransport.roundTrips = 2;

	module.exports = HtmlFileTransport;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	// Few cool transports do work only for same-origin. In order to make
	// them work cross-domain we shall use iframe, served from the
	// remote domain. New browsers have capabilities to communicate with
	// cross domain iframe using postMessage(). In IE it was implemented
	// from IE 8+, but of course, IE got some details wrong:
	//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
	//    http://stevesouders.com/misc/test-postmessage.php

	var inherits = __webpack_require__(4)
	  , JSON3 = __webpack_require__(18)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  , version = __webpack_require__(182)
	  , urlUtils = __webpack_require__(14)
	  , iframeUtils = __webpack_require__(47)
	  , eventUtils = __webpack_require__(25)
	  , random = __webpack_require__(36)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:transport:iframe');
	}

	function IframeTransport(transport, transUrl, baseUrl) {
	  if (!IframeTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	  EventEmitter.call(this);

	  var self = this;
	  this.origin = urlUtils.getOrigin(baseUrl);
	  this.baseUrl = baseUrl;
	  this.transUrl = transUrl;
	  this.transport = transport;
	  this.windowId = random.string(8);

	  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
	  debug(transport, transUrl, iframeUrl);

	  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
	    debug('err callback');
	    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
	    self.close();
	  });

	  this.onmessageCallback = this._message.bind(this);
	  eventUtils.attachEvent('message', this.onmessageCallback);
	}

	inherits(IframeTransport, EventEmitter);

	IframeTransport.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  if (this.iframeObj) {
	    eventUtils.detachEvent('message', this.onmessageCallback);
	    try {
	      // When the iframe is not loaded, IE raises an exception
	      // on 'contentWindow'.
	      this.postMessage('c');
	    } catch (x) {}
	    this.iframeObj.cleanup();
	    this.iframeObj = null;
	    this.onmessageCallback = this.iframeObj = null;
	  }
	};

	IframeTransport.prototype._message = function(e) {
	  debug('message', e.data);
	  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
	    debug('not same origin', e.origin, this.origin);
	    return;
	  }

	  var iframeMessage;
	  try {
	    iframeMessage = JSON3.parse(e.data);
	  } catch (ignored) {
	    debug('bad json', e.data);
	    return;
	  }

	  if (iframeMessage.windowId !== this.windowId) {
	    debug('mismatched window id', iframeMessage.windowId, this.windowId);
	    return;
	  }

	  switch (iframeMessage.type) {
	  case 's':
	    this.iframeObj.loaded();
	    // window global dependency
	    this.postMessage('s', JSON3.stringify([
	      version
	    , this.transport
	    , this.transUrl
	    , this.baseUrl
	    ]));
	    break;
	  case 't':
	    this.emit('message', iframeMessage.data);
	    break;
	  case 'c':
	    var cdata;
	    try {
	      cdata = JSON3.parse(iframeMessage.data);
	    } catch (ignored) {
	      debug('bad json', iframeMessage.data);
	      return;
	    }
	    this.emit('close', cdata[0], cdata[1]);
	    this.close();
	    break;
	  }
	};

	IframeTransport.prototype.postMessage = function(type, data) {
	  debug('postMessage', type, data);
	  this.iframeObj.post(JSON3.stringify({
	    windowId: this.windowId
	  , type: type
	  , data: data || ''
	  }), this.origin);
	};

	IframeTransport.prototype.send = function(message) {
	  debug('send', message);
	  this.postMessage('m', message);
	};

	IframeTransport.enabled = function() {
	  return iframeUtils.iframeEnabled;
	};

	IframeTransport.transportName = 'iframe';
	IframeTransport.roundTrips = 2;

	module.exports = IframeTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(4)
	  , urlUtils = __webpack_require__(14)
	  , BufferedSender = __webpack_require__(393)
	  , Polling = __webpack_require__(394)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:sender-receiver');
	}

	function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
	  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
	  debug(pollUrl);
	  var self = this;
	  BufferedSender.call(this, transUrl, senderFunc);

	  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
	  this.poll.on('message', function(msg) {
	    debug('poll message', msg);
	    self.emit('message', msg);
	  });
	  this.poll.once('close', function(code, reason) {
	    debug('poll close', code, reason);
	    self.poll = null;
	    self.emit('close', code, reason);
	    self.close();
	  });
	}

	inherits(SenderReceiver, BufferedSender);

	SenderReceiver.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  if (this.poll) {
	    this.poll.abort();
	    this.poll = null;
	  }
	  this.stop();
	};

	module.exports = SenderReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , AjaxBasedTransport = __webpack_require__(35)
	  , XhrReceiver = __webpack_require__(61)
	  , XDRObject = __webpack_require__(102)
	  ;

	// According to:
	//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
	//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

	function XdrStreamingTransport(transUrl) {
	  if (!XDRObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
	}

	inherits(XdrStreamingTransport, AjaxBasedTransport);

	XdrStreamingTransport.enabled = function(info) {
	  if (info.cookie_needed || info.nullOrigin) {
	    return false;
	  }
	  return XDRObject.enabled && info.sameScheme;
	};

	XdrStreamingTransport.transportName = 'xdr-streaming';
	XdrStreamingTransport.roundTrips = 2; // preflight, ajax

	module.exports = XdrStreamingTransport;


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , AjaxBasedTransport = __webpack_require__(35)
	  , XhrReceiver = __webpack_require__(61)
	  , XHRCorsObject = __webpack_require__(62)
	  , XHRLocalObject = __webpack_require__(45)
	  ;

	function XhrPollingTransport(transUrl) {
	  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
	}

	inherits(XhrPollingTransport, AjaxBasedTransport);

	XhrPollingTransport.enabled = function(info) {
	  if (info.nullOrigin) {
	    return false;
	  }

	  if (XHRLocalObject.enabled && info.sameOrigin) {
	    return true;
	  }
	  return XHRCorsObject.enabled;
	};

	XhrPollingTransport.transportName = 'xhr-polling';
	XhrPollingTransport.roundTrips = 2; // preflight, ajax

	module.exports = XhrPollingTransport;


/***/ },
/* 182 */
/***/ function(module, exports) {

	module.exports = '1.0.3';

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _parse = __webpack_require__(187);

	var _parse2 = _interopRequireDefault(_parse);

	var _postcssNested = __webpack_require__(186);

	var _postcssNested2 = _interopRequireDefault(_postcssNested);

	var _flatten = __webpack_require__(104);

	var _flatten2 = _interopRequireDefault(_flatten);

	var _StyleSheet = __webpack_require__(184);

	var _StyleSheet2 = _interopRequireDefault(_StyleSheet);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var babelPluginFlowReactPropTypes_proptype_RuleSet = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_RuleSet || __webpack_require__(2).PropTypes.any;

	var ComponentStyle = function () {
	  function ComponentStyle(rules, selector) {
	    _classCallCheck(this, ComponentStyle);

	    this.rules = rules;
	    this.selector = selector;
	  }

	  _createClass(ComponentStyle, [{
	    key: 'generateAndInject',
	    value: function generateAndInject() {
	      if (!_StyleSheet2.default.injected) _StyleSheet2.default.inject();
	      var flatCSS = (0, _flatten2.default)(this.rules).join('');
	      if (this.selector) {
	        flatCSS = this.selector + ' {' + flatCSS + '\n}';
	      }
	      var root = (0, _parse2.default)(flatCSS);
	      (0, _postcssNested2.default)(root);
	      _StyleSheet2.default.insert(root.toResult().css);
	    }
	  }]);

	  return ComponentStyle;
	}();

	exports.default = ComponentStyle;
	module.exports = exports['default'];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _sheet = __webpack_require__(419);

	exports.default = new _sheet.StyleSheet({ speedy: false, maxLength: 40 });

	/* Wraps glamor's stylesheet and exports a singleton for the rest
	*  of the app to use. */

	module.exports = exports['default'];

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	Object.defineProperty(module.exports, "babelPluginFlowReactPropTypes_proptype_Broadcast", __webpack_require__(2).PropTypes.shape({
	  publish: __webpack_require__(2).PropTypes.func.isRequired,
	  subscribe: __webpack_require__(2).PropTypes.func.isRequired
	}));
	/**
	 * Creates a broadcast that can be listened to, i.e. simple event emitter
	 *
	 * @see https://github.com/ReactTraining/react-broadcast
	 */

	var createBroadcast = function createBroadcast(initialValue) {
	  var listeners = [];
	  var currentValue = initialValue;

	  return {
	    publish: function publish(value) {
	      currentValue = value;
	      listeners.forEach(function (listener) {
	        return listener(currentValue);
	      });
	    },
	    subscribe: function subscribe(listener) {
	      listeners.push(listener);

	      // Publish to this subscriber once immediately.
	      listener(currentValue);

	      return function () {
	        listeners = listeners.filter(function (item) {
	          return item !== listener;
	        });
	      };
	    }
	  };
	};

	exports.default = createBroadcast;
	module.exports = exports["default"];

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function selectors(parent, node) {
	  var result = [];
	  parent.selectors.forEach(function (i) {
	    node.selectors.forEach(function (j) {
	      if (j.indexOf('&') === -1) {
	        result.push(i + ' ' + j);
	      } else {
	        result.push(j.replace(/&/g, i));
	      }
	    });
	  });
	  return result;
	}

	function pickComment(comment, after) {
	  if (comment && comment.type === 'comment') {
	    return comment.moveAfter(after);
	  } else {
	    return after;
	  }
	}

	function atruleChilds(rule, atrule) {
	  var children = [];
	  atrule.each(function (child) {
	    if (child.type === 'comment') {
	      children.push(child);
	    }
	    if (child.type === 'decl') {
	      children.push(child);
	    } else if (child.type === 'rule') {
	      child.selectors = selectors(rule, child);
	    } else if (child.type === 'atrule') {
	      atruleChilds(rule, child);
	    }
	  });
	  if (children.length) {
	    var clone = rule.clone({ nodes: [] });
	    for (var i = 0; i < children.length; i++) {
	      children[i].moveTo(clone);
	    }atrule.prepend(clone);
	  }
	}

	function processRule(rule, bubble) {
	  var unwrapped = false;
	  var after = rule;
	  rule.each(function (child) {
	    if (child.type === 'rule') {
	      unwrapped = true;
	      child.selectors = selectors(rule, child);
	      after = pickComment(child.prev(), after);
	      after = child.moveAfter(after);
	    } else if (child.type === 'atrule') {
	      if (bubble.indexOf(child.name) !== -1) {
	        unwrapped = true;
	        atruleChilds(rule, child);
	        after = pickComment(child.prev(), after);
	        after = child.moveAfter(after);
	      }
	    }
	  });
	  if (unwrapped) {
	    rule.raws.semicolon = true;
	    if (rule.nodes.length === 0) rule.remove();
	  }
	}

	var bubble = ['media', 'supports', 'document'];

	var process = function process(node) {
	  node.each(function (child) {
	    if (child.type === 'rule') {
	      processRule(child, bubble);
	    } else if (child.type === 'atrule') {
	      process(child);
	    }
	  });
	};

	exports.default = process;
	module.exports = exports['default'];

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = safeParse;

	var _input = __webpack_require__(107);

	var _input2 = _interopRequireDefault(_input);

	var _safeParser = __webpack_require__(420);

	var _safeParser2 = _interopRequireDefault(_safeParser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function safeParse(css, opts) {
	    var input = new _input2.default(css, opts);

	    var parser = new _safeParser2.default(input);
	    parser.tokenize();
	    parser.loop();

	    return parser.root;
	}
	module.exports = exports['default'];

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _supportsColor = __webpack_require__(438);

	var _supportsColor2 = _interopRequireDefault(_supportsColor);

	var _terminalHighlight = __webpack_require__(424);

	var _terminalHighlight2 = _interopRequireDefault(_terminalHighlight);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * The CSS parser throws this error for broken CSS.
	 *
	 * Custom parsers can throw this error for broken custom syntax using
	 * the {@link Node#error} method.
	 *
	 * PostCSS will use the input source map to detect the original error location.
	 * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,
	 * PostCSS will show the original position in the Sass file.
	 *
	 * If you need the position in the PostCSS input
	 * (e.g., to debug the previous compiler), use `error.input.file`.
	 *
	 * @example
	 * // Catching and checking syntax error
	 * try {
	 *   postcss.parse('a{')
	 * } catch (error) {
	 *   if ( error.name === 'CssSyntaxError' ) {
	 *     error //=> CssSyntaxError
	 *   }
	 * }
	 *
	 * @example
	 * // Raising error from plugin
	 * throw node.error('Unknown variable', { plugin: 'postcss-vars' });
	 */
	var CssSyntaxError = function () {

	    /**
	     * @param {string} message  - error message
	     * @param {number} [line]   - source line of the error
	     * @param {number} [column] - source column of the error
	     * @param {string} [source] - source code of the broken file
	     * @param {string} [file]   - absolute path to the broken file
	     * @param {string} [plugin] - PostCSS plugin name, if error came from plugin
	     */
	    function CssSyntaxError(message, line, column, source, file, plugin) {
	        _classCallCheck(this, CssSyntaxError);

	        /**
	         * @member {string} - Always equal to `'CssSyntaxError'`. You should
	         *                    always check error type
	         *                    by `error.name === 'CssSyntaxError'` instead of
	         *                    `error instanceof CssSyntaxError`, because
	         *                    npm could have several PostCSS versions.
	         *
	         * @example
	         * if ( error.name === 'CssSyntaxError' ) {
	         *   error //=> CssSyntaxError
	         * }
	         */
	        this.name = 'CssSyntaxError';
	        /**
	         * @member {string} - Error message.
	         *
	         * @example
	         * error.message //=> 'Unclosed block'
	         */
	        this.reason = message;

	        if (file) {
	            /**
	             * @member {string} - Absolute path to the broken file.
	             *
	             * @example
	             * error.file       //=> 'a.sass'
	             * error.input.file //=> 'a.css'
	             */
	            this.file = file;
	        }
	        if (source) {
	            /**
	             * @member {string} - Source code of the broken file.
	             *
	             * @example
	             * error.source       //=> 'a { b {} }'
	             * error.input.column //=> 'a b { }'
	             */
	            this.source = source;
	        }
	        if (plugin) {
	            /**
	             * @member {string} - Plugin name, if error came from plugin.
	             *
	             * @example
	             * error.plugin //=> 'postcss-vars'
	             */
	            this.plugin = plugin;
	        }
	        if (typeof line !== 'undefined' && typeof column !== 'undefined') {
	            /**
	             * @member {number} - Source line of the error.
	             *
	             * @example
	             * error.line       //=> 2
	             * error.input.line //=> 4
	             */
	            this.line = line;
	            /**
	             * @member {number} - Source column of the error.
	             *
	             * @example
	             * error.column       //=> 1
	             * error.input.column //=> 4
	             */
	            this.column = column;
	        }

	        this.setMessage();

	        if (Error.captureStackTrace) {
	            Error.captureStackTrace(this, CssSyntaxError);
	        }
	    }

	    _createClass(CssSyntaxError, [{
	        key: 'setMessage',
	        value: function setMessage() {
	            /**
	             * @member {string} - Full error text in the GNU error format
	             *                    with plugin, file, line and column.
	             *
	             * @example
	             * error.message //=> 'a.css:1:1: Unclosed block'
	             */
	            this.message = this.plugin ? this.plugin + ': ' : '';
	            this.message += this.file ? this.file : '<css input>';
	            if (typeof this.line !== 'undefined') {
	                this.message += ':' + this.line + ':' + this.column;
	            }
	            this.message += ': ' + this.reason;
	        }

	        /**
	         * Returns a few lines of CSS source that caused the error.
	         *
	         * If the CSS has an input source map without `sourceContent`,
	         * this method will return an empty string.
	         *
	         * @param {boolean} [color] whether arrow will be colored red by terminal
	         *                          color codes. By default, PostCSS will detect
	         *                          color support by `process.stdout.isTTY`
	         *                          and `process.env.NODE_DISABLE_COLORS`.
	         *
	         * @example
	         * error.showSourceCode() //=> "  4 | }
	         *                        //      5 | a {
	         *                        //    > 6 |   bad
	         *                        //        |   ^
	         *                        //      7 | }
	         *                        //      8 | b {"
	         *
	         * @return {string} few lines of CSS source that caused the error
	         */

	    }, {
	        key: 'showSourceCode',
	        value: function showSourceCode(color) {
	            var _this = this;

	            if (!this.source) return '';

	            var css = this.source;
	            if (typeof color === 'undefined') color = _supportsColor2.default;
	            if (color) css = (0, _terminalHighlight2.default)(css);

	            var lines = css.split(/\r?\n/);
	            var start = Math.max(this.line - 3, 0);
	            var end = Math.min(this.line + 2, lines.length);

	            var maxWidth = String(end).length;

	            return lines.slice(start, end).map(function (line, index) {
	                var number = start + 1 + index;
	                var padded = (' ' + number).slice(-maxWidth);
	                var gutter = ' ' + padded + ' | ';
	                if (number === _this.line) {
	                    var spacing = gutter.replace(/\d/g, ' ') + line.slice(0, _this.column - 1).replace(/[^\t]/g, ' ');
	                    return '>' + gutter + line + '\n ' + spacing + '^';
	                } else {
	                    return ' ' + gutter + line;
	                }
	            }).join('\n');
	        }

	        /**
	         * Returns error position, message and source code of the broken part.
	         *
	         * @example
	         * error.toString() //=> "CssSyntaxError: app.css:1:1: Unclosed block
	         *                  //    > 1 | a {
	         *                  //        | ^"
	         *
	         * @return {string} error position, message and source code
	         */

	    }, {
	        key: 'toString',
	        value: function toString() {
	            var code = this.showSourceCode();
	            if (code) {
	                code = '\n\n' + code + '\n';
	            }
	            return this.name + ': ' + this.message + code;
	        }
	    }, {
	        key: 'generated',
	        get: function get() {
	            (0, _warnOnce2.default)('CssSyntaxError#generated is depreacted. Use input instead.');
	            return this.input;
	        }

	        /**
	         * @memberof CssSyntaxError#
	         * @member {Input} input - Input object with PostCSS internal information
	         *                         about input file. If input has source map
	         *                         from previous tool, PostCSS will use origin
	         *                         (for example, Sass) source. You can use this
	         *                         object to get PostCSS input source.
	         *
	         * @example
	         * error.input.file //=> 'a.css'
	         * error.file       //=> 'a.sass'
	         */

	    }]);

	    return CssSyntaxError;
	}();

	exports.default = CssSyntaxError;
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	var _node = __webpack_require__(108);

	var _node2 = _interopRequireDefault(_node);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * Represents a CSS declaration.
	 *
	 * @extends Node
	 *
	 * @example
	 * const root = postcss.parse('a { color: black }');
	 * const decl = root.first.first;
	 * decl.type       //=> 'decl'
	 * decl.toString() //=> ' color: black'
	 */
	var Declaration = function (_Node) {
	    _inherits(Declaration, _Node);

	    function Declaration(defaults) {
	        _classCallCheck(this, Declaration);

	        var _this = _possibleConstructorReturn(this, (Declaration.__proto__ || Object.getPrototypeOf(Declaration)).call(this, defaults));

	        _this.type = 'decl';
	        return _this;
	    }

	    _createClass(Declaration, [{
	        key: '_value',
	        get: function get() {
	            (0, _warnOnce2.default)('Node#_value was deprecated. Use Node#raws.value');
	            return this.raws.value;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Node#_value was deprecated. Use Node#raws.value');
	            this.raws.value = val;
	        }
	    }, {
	        key: '_important',
	        get: function get() {
	            (0, _warnOnce2.default)('Node#_important was deprecated. Use Node#raws.important');
	            return this.raws.important;
	        },
	        set: function set(val) {
	            (0, _warnOnce2.default)('Node#_important was deprecated. Use Node#raws.important');
	            this.raws.important = val;
	        }

	        /**
	         * @memberof Declaration#
	         * @member {string} prop - the declaration’s property name
	         *
	         * @example
	         * const root = postcss.parse('a { color: black }');
	         * const decl = root.first.first;
	         * decl.prop //=> 'color'
	         */

	        /**
	         * @memberof Declaration#
	         * @member {string} value - the declaration’s value
	         *
	         * @example
	         * const root = postcss.parse('a { color: black }');
	         * const decl = root.first.first;
	         * decl.value //=> 'black'
	         */

	        /**
	         * @memberof Declaration#
	         * @member {boolean} important - `true` if the declaration
	         *                               has an !important annotation.
	         *
	         * @example
	         * const root = postcss.parse('a { color: black !important; color: red }');
	         * root.first.first.important //=> true
	         * root.first.last.important  //=> undefined
	         */

	        /**
	         * @memberof Declaration#
	         * @member {object} raws - Information to generate byte-to-byte equal
	         *                         node string as it was in the origin input.
	         *
	         * Every parser saves its own properties,
	         * but the default CSS parser uses:
	         *
	         * * `before`: the space symbols before the node. It also stores `*`
	         *   and `_` symbols before the declaration (IE hack).
	         * * `between`: the symbols between the property and value
	         *   for declarations, selector and `{` for rules, or last parameter
	         *   and `{` for at-rules.
	         * * `important`: the content of the important statement,
	         *   if it is not just `!important`.
	         *
	         * PostCSS cleans declaration from comments and extra spaces,
	         * but it stores origin content in raws properties.
	         * As such, if you don’t change a declaration’s value,
	         * PostCSS will use the raw value with comments.
	         *
	         * @example
	         * const root = postcss.parse('a {\n  color:black\n}')
	         * root.first.first.raws //=> { before: '\n  ', between: ':' }
	         */

	    }]);

	    return Declaration;
	}(_node2.default);

	exports.default = Declaration;
	module.exports = exports['default'];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _stringify2 = __webpack_require__(194);

	var _stringify3 = _interopRequireDefault(_stringify2);

	var _warnOnce = __webpack_require__(21);

	var _warnOnce2 = _interopRequireDefault(_warnOnce);

	var _result = __webpack_require__(423);

	var _result2 = _interopRequireDefault(_result);

	var _parse = __webpack_require__(191);

	var _parse2 = _interopRequireDefault(_parse);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function isPromise(obj) {
	    return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.then === 'function';
	}

	/**
	 * @callback onFulfilled
	 * @param {Result} result
	 */

	/**
	 * @callback onRejected
	 * @param {Error} error
	 */

	/**
	 * A Promise proxy for the result of PostCSS transformations.
	 *
	 * A `LazyResult` instance is returned by {@link Processor#process}.
	 *
	 * @example
	 * const lazy = postcss([cssnext]).process(css);
	 */

	var LazyResult = function () {
	    function LazyResult(processor, css, opts) {
	        _classCallCheck(this, LazyResult);

	        this.stringified = false;
	        this.processed = false;

	        var root = void 0;
	        if ((typeof css === 'undefined' ? 'undefined' : _typeof(css)) === 'object' && css.type === 'root') {
	            root = css;
	        } else if (css instanceof LazyResult || css instanceof _result2.default) {
	            root = css.root;
	            if (css.map) {
	                if (typeof opts.map === 'undefined') opts.map = {};
	                if (!opts.map.inline) opts.map.inline = false;
	                opts.map.prev = css.map;
	            }
	        } else {
	            var parser = _parse2.default;
	            if (opts.syntax) parser = opts.syntax.parse;
	            if (opts.parser) parser = opts.parser;
	            if (parser.parse) parser = parser.parse;

	            try {
	                root = parser(css, opts);
	            } catch (error) {
	                this.error = error;
	            }
	        }

	        this.result = new _result2.default(processor, root, opts);
	    }

	    /**
	     * Returns a {@link Processor} instance, which will be used
	     * for CSS transformations.
	     * @type {Processor}
	     */


	    _createClass(LazyResult, [{
	        key: 'warnings',


	        /**
	         * Processes input CSS through synchronous plugins
	         * and calls {@link Result#warnings()}.
	         *
	         * @return {Warning[]} warnings from plugins
	         */
	        value: function warnings() {
	            return this.sync().warnings();
	        }

	        /**
	         * Alias for the {@link LazyResult#css} property.
	         *
	         * @example
	         * lazy + '' === lazy.css;
	         *
	         * @return {string} output CSS
	         */

	    }, {
	        key: 'toString',
	        value: function toString() {
	            return this.css;
	        }

	        /**
	         * Processes input CSS through synchronous and asynchronous plugins
	         * and calls `onFulfilled` with a Result instance. If a plugin throws
	         * an error, the `onRejected` callback will be executed.
	         *
	         * It implements standard Promise API.
	         *
	         * @param {onFulfilled} onFulfilled - callback will be executed
	         *                                    when all plugins will finish work
	         * @param {onRejected}  onRejected  - callback will be execited on any error
	         *
	         * @return {Promise} Promise API to make queue
	         *
	         * @example
	         * postcss([cssnext]).process(css).then(result => {
	         *   console.log(result.css);
	         * });
	         */

	    }, {
	        key: 'then',
	        value: function then(onFulfilled, onRejected) {
	            return this.async().then(onFulfilled, onRejected);
	        }

	        /**
	         * Processes input CSS through synchronous and asynchronous plugins
	         * and calls onRejected for each error thrown in any plugin.
	         *
	         * It implements standard Promise API.
	         *
	         * @param {onRejected} onRejected - callback will be execited on any error
	         *
	         * @return {Promise} Promise API to make queue
	         *
	         * @example
	         * postcss([cssnext]).process(css).then(result => {
	         *   console.log(result.css);
	         * }).catch(error => {
	         *   console.error(error);
	         * });
	         */

	    }, {
	        key: 'catch',
	        value: function _catch(onRejected) {
	            return this.async().catch(onRejected);
	        }
	    }, {
	        key: 'handleError',
	        value: function handleError(error, plugin) {
	            try {
	                this.error = error;
	                if (error.name === 'CssSyntaxError' && !error.plugin) {
	                    error.plugin = plugin.postcssPlugin;
	                    error.setMessage();
	                } else if (plugin.postcssVersion) {
	                    var pluginName = plugin.postcssPlugin;
	                    var pluginVer = plugin.postcssVersion;
	                    var runtimeVer = this.result.processor.version;
	                    var a = pluginVer.split('.');
	                    var b = runtimeVer.split('.');

	                    if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
	                        (0, _warnOnce2.default)('Your current PostCSS version ' + 'is ' + runtimeVer + ', but ' + pluginName + ' ' + 'uses ' + pluginVer + '. Perhaps this is ' + 'the source of the error below.');
	                    }
	                }
	            } catch (err) {
	                if (console && console.error) console.error(err);
	            }
	        }
	    }, {
	        key: 'asyncTick',
	        value: function asyncTick(resolve, reject) {
	            var _this = this;

	            if (this.plugin >= this.processor.plugins.length) {
	                this.processed = true;
	                return resolve();
	            }

	            try {
	                (function () {
	                    var plugin = _this.processor.plugins[_this.plugin];
	                    var promise = _this.run(plugin);
	                    _this.plugin += 1;

	                    if (isPromise(promise)) {
	                        promise.then(function () {
	                            _this.asyncTick(resolve, reject);
	                        }).catch(function (error) {
	                            _this.handleError(error, plugin);
	                            _this.processed = true;
	                            reject(error);
	                        });
	                    } else {
	                        _this.asyncTick(resolve, reject);
	                    }
	                })();
	            } catch (error) {
	                this.processed = true;
	                reject(error);
	            }
	        }
	    }, {
	        key: 'async',
	        value: function async() {
	            var _this2 = this;

	            if (this.processed) {
	                return new Promise(function (resolve, reject) {
	                    if (_this2.error) {
	                        reject(_this2.error);
	                    } else {
	                        resolve(_this2.stringify());
	                    }
	                });
	            }
	            if (this.processing) {
	                return this.processing;
	            }

	            this.processing = new Promise(function (resolve, reject) {
	                if (_this2.error) return reject(_this2.error);
	                _this2.plugin = 0;
	                _this2.asyncTick(resolve, reject);
	            }).then(function () {
	                _this2.processed = true;
	                return _this2.stringify();
	            });

	            return this.processing;
	        }
	    }, {
	        key: 'sync',
	        value: function sync() {
	            var _this3 = this;

	            if (this.processed) return this.result;
	            this.processed = true;

	            if (this.processing) {
	                throw new Error('Use process(css).then(cb) to work with async plugins');
	            }

	            if (this.error) throw this.error;

	            this.result.processor.plugins.forEach(function (plugin) {
	                var promise = _this3.run(plugin);
	                if (isPromise(promise)) {
	                    throw new Error('Use process(css).then(cb) to work with async plugins');
	                }
	            });

	            return this.result;
	        }
	    }, {
	        key: 'run',
	        value: function run(plugin) {
	            this.result.lastPlugin = plugin;

	            try {
	                return plugin(this.result.root, this.result);
	            } catch (error) {
	                this.handleError(error, plugin);
	                throw error;
	            }
	        }
	    }, {
	        key: 'stringify',
	        value: function stringify() {
	            if (this.stringified) return this.result;
	            this.stringified = true;

	            this.sync();

	            var opts = this.result.opts;
	            var str = _stringify3.default;
	            if (opts.syntax) str = opts.syntax.stringify;
	            if (opts.stringifier) str = opts.stringifier;
	            if (str.stringify) str = str.stringify;

	            var result = '';
	            str(this.root, function (i) {
	                result += i;
	            });
	            this.result.css = result;

	            return this.result;
	        }
	    }, {
	        key: 'processor',
	        get: function get() {
	            return this.result.processor;
	        }

	        /**
	         * Options from the {@link Processor#process} call.
	         * @type {processOptions}
	         */

	    }, {
	        key: 'opts',
	        get: function get() {
	            return this.result.opts;
	        }

	        /**
	         * Processes input CSS through synchronous plugins, converts `Root`
	         * to a CSS string and returns {@link Result#css}.
	         *
	         * This property will only work with synchronous plugins.
	         * If the processor contains any asynchronous plugins
	         * it will throw an error. This is why this method is only
	         * for debug purpose, you should always use {@link LazyResult#then}.
	         *
	         * @type {string}
	         * @see Result#css
	         */

	    }, {
	        key: 'css',
	        get: function get() {
	            return this.stringify().css;
	        }

	        /**
	         * An alias for the `css` property. Use it with syntaxes
	         * that generate non-CSS output.
	         *
	         * This property will only work with synchronous plugins.
	         * If the processor contains any asynchronous plugins
	         * it will throw an error. This is why this method is only
	         * for debug purpose, you should always use {@link LazyResult#then}.
	         *
	         * @type {string}
	         * @see Result#content
	         */

	    }, {
	        key: 'content',
	        get: function get() {
	            return this.stringify().content;
	        }

	        /**
	         * Processes input CSS through synchronous plugins
	         * and returns {@link Result#map}.
	         *
	         * This property will only work with synchronous plugins.
	         * If the processor contains any asynchronous plugins
	         * it will throw an error. This is why this method is only
	         * for debug purpose, you should always use {@link LazyResult#then}.
	         *
	         * @type {SourceMapGenerator}
	         * @see Result#map
	         */

	    }, {
	        key: 'map',
	        get: function get() {
	            return this.stringify().map;
	        }

	        /**
	         * Processes input CSS through synchronous plugins
	         * and returns {@link Result#root}.
	         *
	         * This property will only work with synchronous plugins. If the processor
	         * contains any asynchronous plugins it will throw an error.
	         *
	         * This is why this method is only for debug purpose,
	         * you should always use {@link LazyResult#then}.
	         *
	         * @type {Root}
	         * @see Result#root
	         */

	    }, {
	        key: 'root',
	        get: function get() {
	            return this.sync().root;
	        }

	        /**
	         * Processes input CSS through synchronous plugins
	         * and returns {@link Result#messages}.
	         *
	         * This property will only work with synchronous plugins. If the processor
	         * contains any asynchronous plugins it will throw an error.
	         *
	         * This is why this method is only for debug purpose,
	         * you should always use {@link LazyResult#then}.
	         *
	         * @type {Message[]}
	         * @see Result#messages
	         */

	    }, {
	        key: 'messages',
	        get: function get() {
	            return this.sync().messages;
	        }
	    }]);

	    return LazyResult;
	}();

	exports.default = LazyResult;
	module.exports = exports['default'];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = parse;

	var _parser = __webpack_require__(192);

	var _parser2 = _interopRequireDefault(_parser);

	var _input = __webpack_require__(107);

	var _input2 = _interopRequireDefault(_input);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function parse(css, opts) {
	    if (opts && opts.safe) {
	        throw new Error('Option safe was removed. ' + 'Use parser: require("postcss-safe-parser")');
	    }

	    var input = new _input2.default(css, opts);

	    var parser = new _parser2.default(input);
	    try {
	        parser.tokenize();
	        parser.loop();
	    } catch (e) {
	        if (e.name === 'CssSyntaxError' && opts && opts.from) {
	            if (/\.scss$/i.test(opts.from)) {
	                e.message += '\nYou tried to parse SCSS with ' + 'the standard CSS parser; ' + 'try again with the postcss-scss parser';
	            } else if (/\.less$/i.test(opts.from)) {
	                e.message += '\nYou tried to parse Less with ' + 'the standard CSS parser; ' + 'try again with the postcss-less parser';
	            }
	        }
	        throw e;
	    }

	    return parser.root;
	}
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _declaration = __webpack_require__(189);

	var _declaration2 = _interopRequireDefault(_declaration);

	var _tokenize = __webpack_require__(111);

	var _tokenize2 = _interopRequireDefault(_tokenize);

	var _comment = __webpack_require__(106);

	var _comment2 = _interopRequireDefault(_comment);

	var _atRule = __webpack_require__(105);

	var _atRule2 = _interopRequireDefault(_atRule);

	var _root = __webpack_require__(109);

	var _root2 = _interopRequireDefault(_root);

	var _rule = __webpack_require__(110);

	var _rule2 = _interopRequireDefault(_rule);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Parser = function () {
	    function Parser(input) {
	        _classCallCheck(this, Parser);

	        this.input = input;

	        this.pos = 0;
	        this.root = new _root2.default();
	        this.current = this.root;
	        this.spaces = '';
	        this.semicolon = false;

	        this.root.source = { input: input, start: { line: 1, column: 1 } };
	    }

	    _createClass(Parser, [{
	        key: 'tokenize',
	        value: function tokenize() {
	            this.tokens = (0, _tokenize2.default)(this.input);
	        }
	    }, {
	        key: 'loop',
	        value: function loop() {
	            var token = void 0;
	            while (this.pos < this.tokens.length) {
	                token = this.tokens[this.pos];

	                switch (token[0]) {

	                    case 'space':
	                    case ';':
	                        this.spaces += token[1];
	                        break;

	                    case '}':
	                        this.end(token);
	                        break;

	                    case 'comment':
	                        this.comment(token);
	                        break;

	                    case 'at-word':
	                        this.atrule(token);
	                        break;

	                    case '{':
	                        this.emptyRule(token);
	                        break;

	                    default:
	                        this.other();
	                        break;
	                }

	                this.pos += 1;
	            }
	            this.endFile();
	        }
	    }, {
	        key: 'comment',
	        value: function comment(token) {
	            var node = new _comment2.default();
	            this.init(node, token[2], token[3]);
	            node.source.end = { line: token[4], column: token[5] };

	            var text = token[1].slice(2, -2);
	            if (/^\s*$/.test(text)) {
	                node.text = '';
	                node.raws.left = text;
	                node.raws.right = '';
	            } else {
	                var match = text.match(/^(\s*)([^]*[^\s])(\s*)$/);
	                node.text = match[2];
	                node.raws.left = match[1];
	                node.raws.right = match[3];
	            }
	        }
	    }, {
	        key: 'emptyRule',
	        value: function emptyRule(token) {
	            var node = new _rule2.default();
	            this.init(node, token[2], token[3]);
	            node.selector = '';
	            node.raws.between = '';
	            this.current = node;
	        }
	    }, {
	        key: 'other',
	        value: function other() {
	            var token = void 0;
	            var end = false;
	            var type = null;
	            var colon = false;
	            var bracket = null;
	            var brackets = [];

	            var start = this.pos;
	            while (this.pos < this.tokens.length) {
	                token = this.tokens[this.pos];
	                type = token[0];

	                if (type === '(' || type === '[') {
	                    if (!bracket) bracket = token;
	                    brackets.push(type === '(' ? ')' : ']');
	                } else if (brackets.length === 0) {
	                    if (type === ';') {
	                        if (colon) {
	                            this.decl(this.tokens.slice(start, this.pos + 1));
	                            return;
	                        } else {
	                            break;
	                        }
	                    } else if (type === '{') {
	                        this.rule(this.tokens.slice(start, this.pos + 1));
	                        return;
	                    } else if (type === '}') {
	                        this.pos -= 1;
	                        end = true;
	                        break;
	                    } else if (type === ':') {
	                        colon = true;
	                    }
	                } else if (type === brackets[brackets.length - 1]) {
	                    brackets.pop();
	                    if (brackets.length === 0) bracket = null;
	                }

	                this.pos += 1;
	            }
	            if (this.pos === this.tokens.length) {
	                this.pos -= 1;
	                end = true;
	            }

	            if (brackets.length > 0) this.unclosedBracket(bracket);

	            if (end && colon) {
	                while (this.pos > start) {
	                    token = this.tokens[this.pos][0];
	                    if (token !== 'space' && token !== 'comment') break;
	                    this.pos -= 1;
	                }
	                this.decl(this.tokens.slice(start, this.pos + 1));
	                return;
	            }

	            this.unknownWord(start);
	        }
	    }, {
	        key: 'rule',
	        value: function rule(tokens) {
	            tokens.pop();

	            var node = new _rule2.default();
	            this.init(node, tokens[0][2], tokens[0][3]);

	            node.raws.between = this.spacesFromEnd(tokens);
	            this.raw(node, 'selector', tokens);
	            this.current = node;
	        }
	    }, {
	        key: 'decl',
	        value: function decl(tokens) {
	            var node = new _declaration2.default();
	            this.init(node);

	            var last = tokens[tokens.length - 1];
	            if (last[0] === ';') {
	                this.semicolon = true;
	                tokens.pop();
	            }
	            if (last[4]) {
	                node.source.end = { line: last[4], column: last[5] };
	            } else {
	                node.source.end = { line: last[2], column: last[3] };
	            }

	            while (tokens[0][0] !== 'word') {
	                node.raws.before += tokens.shift()[1];
	            }
	            node.source.start = { line: tokens[0][2], column: tokens[0][3] };

	            node.prop = '';
	            while (tokens.length) {
	                var type = tokens[0][0];
	                if (type === ':' || type === 'space' || type === 'comment') {
	                    break;
	                }
	                node.prop += tokens.shift()[1];
	            }

	            node.raws.between = '';

	            var token = void 0;
	            while (tokens.length) {
	                token = tokens.shift();

	                if (token[0] === ':') {
	                    node.raws.between += token[1];
	                    break;
	                } else {
	                    node.raws.between += token[1];
	                }
	            }

	            if (node.prop[0] === '_' || node.prop[0] === '*') {
	                node.raws.before += node.prop[0];
	                node.prop = node.prop.slice(1);
	            }
	            node.raws.between += this.spacesFromStart(tokens);
	            this.precheckMissedSemicolon(tokens);

	            for (var i = tokens.length - 1; i > 0; i--) {
	                token = tokens[i];
	                if (token[1] === '!important') {
	                    node.important = true;
	                    var string = this.stringFrom(tokens, i);
	                    string = this.spacesFromEnd(tokens) + string;
	                    if (string !== ' !important') node.raws.important = string;
	                    break;
	                } else if (token[1] === 'important') {
	                    var cache = tokens.slice(0);
	                    var str = '';
	                    for (var j = i; j > 0; j--) {
	                        var _type = cache[j][0];
	                        if (str.trim().indexOf('!') === 0 && _type !== 'space') {
	                            break;
	                        }
	                        str = cache.pop()[1] + str;
	                    }
	                    if (str.trim().indexOf('!') === 0) {
	                        node.important = true;
	                        node.raws.important = str;
	                        tokens = cache;
	                    }
	                }

	                if (token[0] !== 'space' && token[0] !== 'comment') {
	                    break;
	                }
	            }

	            this.raw(node, 'value', tokens);

	            if (node.value.indexOf(':') !== -1) this.checkMissedSemicolon(tokens);
	        }
	    }, {
	        key: 'atrule',
	        value: function atrule(token) {
	            var node = new _atRule2.default();
	            node.name = token[1].slice(1);
	            if (node.name === '') {
	                this.unnamedAtrule(node, token);
	            }
	            this.init(node, token[2], token[3]);

	            var last = false;
	            var open = false;
	            var params = [];

	            this.pos += 1;
	            while (this.pos < this.tokens.length) {
	                token = this.tokens[this.pos];

	                if (token[0] === ';') {
	                    node.source.end = { line: token[2], column: token[3] };
	                    this.semicolon = true;
	                    break;
	                } else if (token[0] === '{') {
	                    open = true;
	                    break;
	                } else if (token[0] === '}') {
	                    this.end(token);
	                    break;
	                } else {
	                    params.push(token);
	                }

	                this.pos += 1;
	            }
	            if (this.pos === this.tokens.length) {
	                last = true;
	            }

	            node.raws.between = this.spacesFromEnd(params);
	            if (params.length) {
	                node.raws.afterName = this.spacesFromStart(params);
	                this.raw(node, 'params', params);
	                if (last) {
	                    token = params[params.length - 1];
	                    node.source.end = { line: token[4], column: token[5] };
	                    this.spaces = node.raws.between;
	                    node.raws.between = '';
	                }
	            } else {
	                node.raws.afterName = '';
	                node.params = '';
	            }

	            if (open) {
	                node.nodes = [];
	                this.current = node;
	            }
	        }
	    }, {
	        key: 'end',
	        value: function end(token) {
	            if (this.current.nodes && this.current.nodes.length) {
	                this.current.raws.semicolon = this.semicolon;
	            }
	            this.semicolon = false;

	            this.current.raws.after = (this.current.raws.after || '') + this.spaces;
	            this.spaces = '';

	            if (this.current.parent) {
	                this.current.source.end = { line: token[2], column: token[3] };
	                this.current = this.current.parent;
	            } else {
	                this.unexpectedClose(token);
	            }
	        }
	    }, {
	        key: 'endFile',
	        value: function endFile() {
	            if (this.current.parent) this.unclosedBlock();
	            if (this.current.nodes && this.current.nodes.length) {
	                this.current.raws.semicolon = this.semicolon;
	            }
	            this.current.raws.after = (this.current.raws.after || '') + this.spaces;
	        }

	        // Helpers

	    }, {
	        key: 'init',
	        value: function init(node, line, column) {
	            this.current.push(node);

	            node.source = { start: { line: line, column: column }, input: this.input };
	            node.raws.before = this.spaces;
	            this.spaces = '';
	            if (node.type !== 'comment') this.semicolon = false;
	        }
	    }, {
	        key: 'raw',
	        value: function raw(node, prop, tokens) {
	            var token = void 0,
	                type = void 0;
	            var length = tokens.length;
	            var value = '';
	            var clean = true;
	            for (var i = 0; i < length; i += 1) {
	                token = tokens[i];
	                type = token[0];
	                if (type === 'comment' || type === 'space' && i === length - 1) {
	                    clean = false;
	                } else {
	                    value += token[1];
	                }
	            }
	            if (!clean) {
	                var raw = tokens.reduce(function (all, i) {
	                    return all + i[1];
	                }, '');
	                node.raws[prop] = { value: value, raw: raw };
	            }
	            node[prop] = value;
	        }
	    }, {
	        key: 'spacesFromEnd',
	        value: function spacesFromEnd(tokens) {
	            var lastTokenType = void 0;
	            var spaces = '';
	            while (tokens.length) {
	                lastTokenType = tokens[tokens.length - 1][0];
	                if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;
	                spaces = tokens.pop()[1] + spaces;
	            }
	            return spaces;
	        }
	    }, {
	        key: 'spacesFromStart',
	        value: function spacesFromStart(tokens) {
	            var next = void 0;
	            var spaces = '';
	            while (tokens.length) {
	                next = tokens[0][0];
	                if (next !== 'space' && next !== 'comment') break;
	                spaces += tokens.shift()[1];
	            }
	            return spaces;
	        }
	    }, {
	        key: 'stringFrom',
	        value: function stringFrom(tokens, from) {
	            var result = '';
	            for (var i = from; i < tokens.length; i++) {
	                result += tokens[i][1];
	            }
	            tokens.splice(from, tokens.length - from);
	            return result;
	        }
	    }, {
	        key: 'colon',
	        value: function colon(tokens) {
	            var brackets = 0;
	            var token = void 0,
	                type = void 0,
	                prev = void 0;
	            for (var i = 0; i < tokens.length; i++) {
	                token = tokens[i];
	                type = token[0];

	                if (type === '(') {
	                    brackets += 1;
	                } else if (type === ')') {
	                    brackets -= 1;
	                } else if (brackets === 0 && type === ':') {
	                    if (!prev) {
	                        this.doubleColon(token);
	                    } else if (prev[0] === 'word' && prev[1] === 'progid') {
	                        continue;
	                    } else {
	                        return i;
	                    }
	                }

	                prev = token;
	            }
	            return false;
	        }

	        // Errors

	    }, {
	        key: 'unclosedBracket',
	        value: function unclosedBracket(bracket) {
	            throw this.input.error('Unclosed bracket', bracket[2], bracket[3]);
	        }
	    }, {
	        key: 'unknownWord',
	        value: function unknownWord(start) {
	            var token = this.tokens[start];
	            throw this.input.error('Unknown word', token[2], token[3]);
	        }
	    }, {
	        key: 'unexpectedClose',
	        value: function unexpectedClose(token) {
	            throw this.input.error('Unexpected }', token[2], token[3]);
	        }
	    }, {
	        key: 'unclosedBlock',
	        value: function unclosedBlock() {
	            var pos = this.current.source.start;
	            throw this.input.error('Unclosed block', pos.line, pos.column);
	        }
	    }, {
	        key: 'doubleColon',
	        value: function doubleColon(token) {
	            throw this.input.error('Double colon', token[2], token[3]);
	        }
	    }, {
	        key: 'unnamedAtrule',
	        value: function unnamedAtrule(node, token) {
	            throw this.input.error('At-rule without name', token[2], token[3]);
	        }
	    }, {
	        key: 'precheckMissedSemicolon',
	        value: function precheckMissedSemicolon(tokens) {
	            // Hook for Safe Parser
	            tokens;
	        }
	    }, {
	        key: 'checkMissedSemicolon',
	        value: function checkMissedSemicolon(tokens) {
	            var colon = this.colon(tokens);
	            if (colon === false) return;

	            var founded = 0;
	            var token = void 0;
	            for (var j = colon - 1; j >= 0; j--) {
	                token = tokens[j];
	                if (token[0] !== 'space') {
	                    founded += 1;
	                    if (founded === 2) break;
	                }
	            }
	            throw this.input.error('Missed semicolon', token[2], token[3]);
	        }
	    }]);

	    return Parser;
	}();

	exports.default = Parser;
	module.exports = exports['default'];

/***/ },
/* 193 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* eslint-disable valid-jsdoc */

	var defaultRaw = {
	    colon: ': ',
	    indent: '    ',
	    beforeDecl: '\n',
	    beforeRule: '\n',
	    beforeOpen: ' ',
	    beforeClose: '\n',
	    beforeComment: '\n',
	    after: '\n',
	    emptyBody: '',
	    commentLeft: ' ',
	    commentRight: ' '
	};

	function capitalize(str) {
	    return str[0].toUpperCase() + str.slice(1);
	}

	var Stringifier = function () {
	    function Stringifier(builder) {
	        _classCallCheck(this, Stringifier);

	        this.builder = builder;
	    }

	    _createClass(Stringifier, [{
	        key: 'stringify',
	        value: function stringify(node, semicolon) {
	            this[node.type](node, semicolon);
	        }
	    }, {
	        key: 'root',
	        value: function root(node) {
	            this.body(node);
	            if (node.raws.after) this.builder(node.raws.after);
	        }
	    }, {
	        key: 'comment',
	        value: function comment(node) {
	            var left = this.raw(node, 'left', 'commentLeft');
	            var right = this.raw(node, 'right', 'commentRight');
	            this.builder('/*' + left + node.text + right + '*/', node);
	        }
	    }, {
	        key: 'decl',
	        value: function decl(node, semicolon) {
	            var between = this.raw(node, 'between', 'colon');
	            var string = node.prop + between + this.rawValue(node, 'value');

	            if (node.important) {
	                string += node.raws.important || ' !important';
	            }

	            if (semicolon) string += ';';
	            this.builder(string, node);
	        }
	    }, {
	        key: 'rule',
	        value: function rule(node) {
	            this.block(node, this.rawValue(node, 'selector'));
	        }
	    }, {
	        key: 'atrule',
	        value: function atrule(node, semicolon) {
	            var name = '@' + node.name;
	            var params = node.params ? this.rawValue(node, 'params') : '';

	            if (typeof node.raws.afterName !== 'undefined') {
	                name += node.raws.afterName;
	            } else if (params) {
	                name += ' ';
	            }

	            if (node.nodes) {
	                this.block(node, name + params);
	            } else {
	                var end = (node.raws.between || '') + (semicolon ? ';' : '');
	                this.builder(name + params + end, node);
	            }
	        }
	    }, {
	        key: 'body',
	        value: function body(node) {
	            var last = node.nodes.length - 1;
	            while (last > 0) {
	                if (node.nodes[last].type !== 'comment') break;
	                last -= 1;
	            }

	            var semicolon = this.raw(node, 'semicolon');
	            for (var i = 0; i < node.nodes.length; i++) {
	                var child = node.nodes[i];
	                var before = this.raw(child, 'before');
	                if (before) this.builder(before);
	                this.stringify(child, last !== i || semicolon);
	            }
	        }
	    }, {
	        key: 'block',
	        value: function block(node, start) {
	            var between = this.raw(node, 'between', 'beforeOpen');
	            this.builder(start + between + '{', node, 'start');

	            var after = void 0;
	            if (node.nodes && node.nodes.length) {
	                this.body(node);
	                after = this.raw(node, 'after');
	            } else {
	                after = this.raw(node, 'after', 'emptyBody');
	            }

	            if (after) this.builder(after);
	            this.builder('}', node, 'end');
	        }
	    }, {
	        key: 'raw',
	        value: function raw(node, own, detect) {
	            var value = void 0;
	            if (!detect) detect = own;

	            // Already had
	            if (own) {
	                value = node.raws[own];
	                if (typeof value !== 'undefined') return value;
	            }

	            var parent = node.parent;

	            // Hack for first rule in CSS
	            if (detect === 'before') {
	                if (!parent || parent.type === 'root' && parent.first === node) {
	                    return '';
	                }
	            }

	            // Floating child without parent
	            if (!parent) return defaultRaw[detect];

	            // Detect style by other nodes
	            var root = node.root();
	            if (!root.rawCache) root.rawCache = {};
	            if (typeof root.rawCache[detect] !== 'undefined') {
	                return root.rawCache[detect];
	            }

	            if (detect === 'before' || detect === 'after') {
	                return this.beforeAfter(node, detect);
	            } else {
	                var method = 'raw' + capitalize(detect);
	                if (this[method]) {
	                    value = this[method](root, node);
	                } else {
	                    root.walk(function (i) {
	                        value = i.raws[own];
	                        if (typeof value !== 'undefined') return false;
	                    });
	                }
	            }

	            if (typeof value === 'undefined') value = defaultRaw[detect];

	            root.rawCache[detect] = value;
	            return value;
	        }
	    }, {
	        key: 'rawSemicolon',
	        value: function rawSemicolon(root) {
	            var value = void 0;
	            root.walk(function (i) {
	                if (i.nodes && i.nodes.length && i.last.type === 'decl') {
	                    value = i.raws.semicolon;
	                    if (typeof value !== 'undefined') return false;
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'rawEmptyBody',
	        value: function rawEmptyBody(root) {
	            var value = void 0;
	            root.walk(function (i) {
	                if (i.nodes && i.nodes.length === 0) {
	                    value = i.raws.after;
	                    if (typeof value !== 'undefined') return false;
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'rawIndent',
	        value: function rawIndent(root) {
	            if (root.raws.indent) return root.raws.indent;
	            var value = void 0;
	            root.walk(function (i) {
	                var p = i.parent;
	                if (p && p !== root && p.parent && p.parent === root) {
	                    if (typeof i.raws.before !== 'undefined') {
	                        var parts = i.raws.before.split('\n');
	                        value = parts[parts.length - 1];
	                        value = value.replace(/[^\s]/g, '');
	                        return false;
	                    }
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'rawBeforeComment',
	        value: function rawBeforeComment(root, node) {
	            var value = void 0;
	            root.walkComments(function (i) {
	                if (typeof i.raws.before !== 'undefined') {
	                    value = i.raws.before;
	                    if (value.indexOf('\n') !== -1) {
	                        value = value.replace(/[^\n]+$/, '');
	                    }
	                    return false;
	                }
	            });
	            if (typeof value === 'undefined') {
	                value = this.raw(node, null, 'beforeDecl');
	            }
	            return value;
	        }
	    }, {
	        key: 'rawBeforeDecl',
	        value: function rawBeforeDecl(root, node) {
	            var value = void 0;
	            root.walkDecls(function (i) {
	                if (typeof i.raws.before !== 'undefined') {
	                    value = i.raws.before;
	                    if (value.indexOf('\n') !== -1) {
	                        value = value.replace(/[^\n]+$/, '');
	                    }
	                    return false;
	                }
	            });
	            if (typeof value === 'undefined') {
	                value = this.raw(node, null, 'beforeRule');
	            }
	            return value;
	        }
	    }, {
	        key: 'rawBeforeRule',
	        value: function rawBeforeRule(root) {
	            var value = void 0;
	            root.walk(function (i) {
	                if (i.nodes && (i.parent !== root || root.first !== i)) {
	                    if (typeof i.raws.before !== 'undefined') {
	                        value = i.raws.before;
	                        if (value.indexOf('\n') !== -1) {
	                            value = value.replace(/[^\n]+$/, '');
	                        }
	                        return false;
	                    }
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'rawBeforeClose',
	        value: function rawBeforeClose(root) {
	            var value = void 0;
	            root.walk(function (i) {
	                if (i.nodes && i.nodes.length > 0) {
	                    if (typeof i.raws.after !== 'undefined') {
	                        value = i.raws.after;
	                        if (value.indexOf('\n') !== -1) {
	                            value = value.replace(/[^\n]+$/, '');
	                        }
	                        return false;
	                    }
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'rawBeforeOpen',
	        value: function rawBeforeOpen(root) {
	            var value = void 0;
	            root.walk(function (i) {
	                if (i.type !== 'decl') {
	                    value = i.raws.between;
	                    if (typeof value !== 'undefined') return false;
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'rawColon',
	        value: function rawColon(root) {
	            var value = void 0;
	            root.walkDecls(function (i) {
	                if (typeof i.raws.between !== 'undefined') {
	                    value = i.raws.between.replace(/[^\s:]/g, '');
	                    return false;
	                }
	            });
	            return value;
	        }
	    }, {
	        key: 'beforeAfter',
	        value: function beforeAfter(node, detect) {
	            var value = void 0;
	            if (node.type === 'decl') {
	                value = this.raw(node, null, 'beforeDecl');
	            } else if (node.type === 'comment') {
	                value = this.raw(node, null, 'beforeComment');
	            } else if (detect === 'before') {
	                value = this.raw(node, null, 'beforeRule');
	            } else {
	                value = this.raw(node, null, 'beforeClose');
	            }

	            var buf = node.parent;
	            var depth = 0;
	            while (buf && buf.type !== 'root') {
	                depth += 1;
	                buf = buf.parent;
	            }

	            if (value.indexOf('\n') !== -1) {
	                var indent = this.raw(node, null, 'indent');
	                if (indent.length) {
	                    for (var step = 0; step < depth; step++) {
	                        value += indent;
	                    }
	                }
	            }

	            return value;
	        }
	    }, {
	        key: 'rawValue',
	        value: function rawValue(node, prop) {
	            var value = node[prop];
	            var raw = node.raws[prop];
	            if (raw && raw.value === value) {
	                return raw.raw;
	            } else {
	                return value;
	            }
	        }
	    }]);

	    return Stringifier;
	}();

	exports.default = Stringifier;
	module.exports = exports['default'];

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = stringify;

	var _stringifier = __webpack_require__(193);

	var _stringifier2 = _interopRequireDefault(_stringifier);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function stringify(node, builder) {
	    var str = new _stringifier2.default(builder);
	    str.stringify(node);
	}
	module.exports = exports['default'];

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(428);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(434);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(196),
	    getRawTag = __webpack_require__(431),
	    objectToString = __webpack_require__(432);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  value = Object(value);
	  return (symToStringTag && symToStringTag in value)
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(197),
	    getPrototype = __webpack_require__(430),
	    isObjectLike = __webpack_require__(437);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ },
/* 199 */
/***/ function(module, exports) {

	exports.read = (key, defaultValue = {}) => {
	  const data = localStorage.getItem(key);
	  if(data) {
	    return JSON.parse(data);
	  }
	  
	  return defaultValue;
	}

	exports.write = (key, path = [], defaultValue = {}) => subscribe => {
	  localStorage.setItem(key, JSON.stringify(subscribe(path, defaultValue)));
	};

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(render, path, rootEl) {
	  if(true) {
	  	function wrapped() {
	  		try {
	  			render();
	  		} catch (error) {
	  			rootEl.innerHTML = `<pre style="font-weight:bold">${error.message}</pre><pre>${error.stack.replace(error.message, '')}</pre>`;
	  		}
	  	}

	  	module.hot.accept(path, () => {
	  		setTimeout(wrapped);
	  	});

	  	return wrapped;
	  }
	  
	  return render;
	}

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
		return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
		return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};

	var setUnion = __webpack_require__(202);
	var Set = __webpack_require__(126);

	module.exports = function mergeSetsDeep(obj) {
		return obj instanceof Set ? obj : Object.keys(obj).reduce(function (set, key) {
			if (_typeof(obj[key]) === 'object') {
				return setUnion(set, mergeSetsDeep(obj[key]));
			}

			return set;
		}, new Set());
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(126);
	var arrayFrom = __webpack_require__(204);

	module.exports = function(a, b) {
	  return new Set(arrayFrom(a).concat(arrayFrom(b)));
	};

/***/ },
/* 203 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function () {
		return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
	};


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (typeof Array.from === 'function' ?
	  Array.from :
	  __webpack_require__(205)
	);


/***/ },
/* 205 */
/***/ function(module, exports) {

	// Production steps of ECMA-262, Edition 6, 22.1.2.1
	// Reference: http://www.ecma-international.org/ecma-262/6.0/#sec-array.from
	module.exports = (function() {
	  var isCallable = function(fn) {
	    return typeof fn === 'function';
	  };
	  var toInteger = function (value) {
	    var number = Number(value);
	    if (isNaN(number)) { return 0; }
	    if (number === 0 || !isFinite(number)) { return number; }
	    return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
	  };
	  var maxSafeInteger = Math.pow(2, 53) - 1;
	  var toLength = function (value) {
	    var len = toInteger(value);
	    return Math.min(Math.max(len, 0), maxSafeInteger);
	  };
	  var iteratorProp = function(value) {
	    if(value != null) {
	      if(['string','number','boolean','symbol'].indexOf(typeof value) > -1){
	        return Symbol.iterator;
	      } else if (
	        (typeof Symbol !== 'undefined') &&
	        ('iterator' in Symbol) &&
	        (Symbol.iterator in value)
	      ) {
	        return Symbol.iterator;
	      }
	      // Support "@@iterator" placeholder, Gecko 27 to Gecko 35
	      else if ('@@iterator' in value) {
	        return '@@iterator';
	      }
	    }
	  };
	  var getMethod = function(O, P) {
	    // Assert: IsPropertyKey(P) is true.
	    if (O != null && P != null) {
	      // Let func be GetV(O, P).
	      var func = O[P];
	      // ReturnIfAbrupt(func).
	      // If func is either undefined or null, return undefined.
	      if(func == null) {
	        return void 0;
	      }
	      // If IsCallable(func) is false, throw a TypeError exception.
	      if (!isCallable(func)) {
	        throw new TypeError(func + ' is not a function');
	      }
	      return func;
	    }
	  };
	  var iteratorStep = function(iterator) {
	    // Let result be IteratorNext(iterator).
	    // ReturnIfAbrupt(result).
	    var result = iterator.next();
	    // Let done be IteratorComplete(result).
	    // ReturnIfAbrupt(done).
	    var done = Boolean(result.done);
	    // If done is true, return false.
	    if(done) {
	      return false;
	    }
	    // Return result.
	    return result;
	  };

	  // The length property of the from method is 1.
	  return function from(items /*, mapFn, thisArg */ ) {
	    'use strict';

	    // 1. Let C be the this value.
	    var C = this;

	    // 2. If mapfn is undefined, let mapping be false.
	    var mapFn = arguments.length > 1 ? arguments[1] : void 0;

	    var T;
	    if (typeof mapFn !== 'undefined') {
	      // 3. else
	      //   a. If IsCallable(mapfn) is false, throw a TypeError exception.
	      if (!isCallable(mapFn)) {
	        throw new TypeError(
	          'Array.from: when provided, the second argument must be a function'
	        );
	      }

	      //   b. If thisArg was supplied, let T be thisArg; else let T
	      //      be undefined.
	      if (arguments.length > 2) {
	        T = arguments[2];
	      }
	      //   c. Let mapping be true (implied by mapFn)
	    }

	    var A, k;

	    // 4. Let usingIterator be GetMethod(items, @@iterator).
	    // 5. ReturnIfAbrupt(usingIterator).
	    var usingIterator = getMethod(items, iteratorProp(items));

	    // 6. If usingIterator is not undefined, then
	    if (usingIterator !== void 0) {
	      // a. If IsConstructor(C) is true, then
	      //   i. Let A be the result of calling the [[Construct]]
	      //      internal method of C with an empty argument list.
	      // b. Else,
	      //   i. Let A be the result of the abstract operation ArrayCreate
	      //      with argument 0.
	      // c. ReturnIfAbrupt(A).
	      A = isCallable(C) ? Object(new C()) : [];

	      // d. Let iterator be GetIterator(items, usingIterator).
	      var iterator = usingIterator.call(items);

	      // e. ReturnIfAbrupt(iterator).
	      if (iterator == null) {
	        throw new TypeError(
	          'Array.from requires an array-like or iterable object'
	        );
	      }

	      // f. Let k be 0.
	      k = 0;

	      // g. Repeat
	      var next, nextValue;
	      while (true) {
	        // i. Let Pk be ToString(k).
	        // ii. Let next be IteratorStep(iterator).
	        // iii. ReturnIfAbrupt(next).
	        next = iteratorStep(iterator);

	        // iv. If next is false, then
	        if (!next) {

	          // 1. Let setStatus be Set(A, "length", k, true).
	          // 2. ReturnIfAbrupt(setStatus).
	          A.length = k;

	          // 3. Return A.
	          return A;
	        }
	        // v. Let nextValue be IteratorValue(next).
	        // vi. ReturnIfAbrupt(nextValue)
	        nextValue = next.value;

	        // vii. If mapping is true, then
	        //   1. Let mappedValue be Call(mapfn, T, «nextValue, k»).
	        //   2. If mappedValue is an abrupt completion, return
	        //      IteratorClose(iterator, mappedValue).
	        //   3. Let mappedValue be mappedValue.[[value]].
	        // viii. Else, let mappedValue be nextValue.
	        // ix.  Let defineStatus be the result of
	        //      CreateDataPropertyOrThrow(A, Pk, mappedValue).
	        // x. [TODO] If defineStatus is an abrupt completion, return
	        //    IteratorClose(iterator, defineStatus).
	        if (mapFn) {
	          A[k] = mapFn.call(T, nextValue, k);
	        }
	        else {
	          A[k] = nextValue;
	        }
	        // xi. Increase k by 1.
	        k++;
	      }
	      // 7. Assert: items is not an Iterable so assume it is
	      //    an array-like object.
	    } else {

	      // 8. Let arrayLike be ToObject(items).
	      var arrayLike = Object(items);

	      // 9. ReturnIfAbrupt(items).
	      if (items == null) {
	        throw new TypeError(
	          'Array.from requires an array-like object - not null or undefined'
	        );
	      }

	      // 10. Let len be ToLength(Get(arrayLike, "length")).
	      // 11. ReturnIfAbrupt(len).
	      var len = toLength(arrayLike.length);

	      // 12. If IsConstructor(C) is true, then
	      //     a. Let A be Construct(C, «len»).
	      // 13. Else
	      //     a. Let A be ArrayCreate(len).
	      // 14. ReturnIfAbrupt(A).
	      A = isCallable(C) ? Object(new C(len)) : new Array(len);

	      // 15. Let k be 0.
	      k = 0;
	      // 16. Repeat, while k < len… (also steps a - h)
	      var kValue;
	      while (k < len) {
	        kValue = arrayLike[k];
	        if (mapFn) {
	          A[k] = mapFn.call(T, kValue, k);
	        }
	        else {
	          A[k] = kValue;
	        }
	        k++;
	      }
	      // 17. Let setStatus be Set(A, "length", len, true).
	      // 18. ReturnIfAbrupt(setStatus).
	      A.length = len;
	      // 19. Return A.
	    }
	    return A;
	  };
	})();


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _templateObject = _taggedTemplateLiteral(['\n* { box-sizing: border-box; }\n\n@page {\n\tsize: auto;\n\tmargin: 0;\n}\n\nbody, html {\n\tmargin: 0;\n\n\t@media screen {\n\t\toverflow: hidden;\n\t}\n}\n\nbody {\n\tfont-family: -apple-system, BlinkMacSystemFont, \n\t\t"Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", \n\t\t"Fira Sans", "Droid Sans", "Helvetica Neue", \n\t\tsans-serif;\n}\n\na {\n\tcolor: #00dabc;\n\ttext-decoration: none;\n\n\t&:hover {\n\t\tborder-style: dotted;\n\t\tborder-bottom-width: 1px;\n\t}\n}\n'], ['\n* { box-sizing: border-box; }\n\n@page {\n\tsize: auto;\n\tmargin: 0;\n}\n\nbody, html {\n\tmargin: 0;\n\n\t@media screen {\n\t\toverflow: hidden;\n\t}\n}\n\nbody {\n\tfont-family: -apple-system, BlinkMacSystemFont, \n\t\t"Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", \n\t\t"Fira Sans", "Droid Sans", "Helvetica Neue", \n\t\tsans-serif;\n}\n\na {\n\tcolor: #00dabc;\n\ttext-decoration: none;\n\n\t&:hover {\n\t\tborder-style: dotted;\n\t\tborder-bottom-width: 1px;\n\t}\n}\n']),
	    _templateObject2 = _taggedTemplateLiteral([''], ['']),
	    _templateObject3 = _taggedTemplateLiteral(['\npadding: 1em;\n\n@media screen {\n\tfloat: left;\n\twidth: ', ';\n\theight: 100vh;\n\toverflow-y: auto;\n}\n'], ['\npadding: 1em;\n\n@media screen {\n\tfloat: left;\n\twidth: ', ';\n\theight: 100vh;\n\toverflow-y: auto;\n}\n']);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _store = __webpack_require__(118);

	var _styledComponents = __webpack_require__(37);

	var _styledComponents2 = _interopRequireDefault(_styledComponents);

	var _spells = __webpack_require__(214);

	var _spells2 = _interopRequireDefault(_spells);

	var _monsters = __webpack_require__(213);

	var _monsters2 = _interopRequireDefault(_monsters);

	var _list = __webpack_require__(207);

	var _list2 = _interopRequireDefault(_list);

	var _obj = __webpack_require__(115);

	var _selector = __webpack_require__(210);

	var _selector2 = _interopRequireDefault(_selector);

	var _spellcard = __webpack_require__(211);

	var _spellcard2 = _interopRequireDefault(_spellcard);

	var _monstercard = __webpack_require__(208);

	var _monstercard2 = _interopRequireDefault(_monstercard);

	var _parseSpellcasting = __webpack_require__(209);

	var _parseSpellcasting2 = _interopRequireDefault(_parseSpellcasting);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	(0, _styledComponents.injectGlobal)(_templateObject);

	var ListContainer = (0, _store.observe)(function (_ref, _ref2) {
		var data = _ref.data;
		var storeKey = _ref.storeKey;
		var card = _ref.card;
		var subscribe = _ref2.subscribe;
		var dispatch = _ref2.dispatch;
		return _react2.default.createElement(_list2.default, {
			card: card,
			data: (0, _obj.getKeys)(subscribe(storeKey).sort(), data)
		});
	});

	var ColumnWrapper = _styledComponents2.default.div(_templateObject2);

	var ListColumn = _styledComponents2.default.div(_templateObject3, function (_ref3) {
		var width = _ref3.width;
		return 100 * width + 'vw';
	});

	var getMonsterSpells = function getMonsterSpells(monster) {
		return monster.special_abilities.reduce(function (spells, ability) {
			return spells.concat((0, _parseSpellcasting2.default)(ability));
		}, []);
	};

	var removeAll = (0, _obj.asSet)(function (a, xs) {
		return xs.forEach(function (x) {
			return a.delete(x);
		});
	});
	var addUniqAll = function addUniqAll(a, xs) {
		return Array.from(new Set([].concat(_toConsumableArray(a), _toConsumableArray(xs))));
	};

	var dispatchIfSpells = function dispatchIfSpells(dispatch, fn) {
		return function (monster) {
			var monsterSpells = getMonsterSpells(monster);
			if (monsterSpells.length) {
				dispatch('spells', function (spells) {
					return fn(spells, monsterSpells);
				});
			}
		};
	};

	exports.default = (0, _store.observe)(function (_, _ref4) {
		var dispatch = _ref4.dispatch;
		return _react2.default.createElement(
			ColumnWrapper,
			null,
			_react2.default.createElement(
				ListColumn,
				{ width: 3 / 5 },
				_react2.default.createElement(_selector2.default, {
					data: _monsters2.default,
					storeKey: 'monsters',
					placeholder: 'Search for a monster…',
					onAdd: dispatchIfSpells(dispatch, addUniqAll),
					onRemove: dispatchIfSpells(dispatch, removeAll) }),
				_react2.default.createElement(ListContainer, { data: _monsters2.default, storeKey: 'monsters', card: _monstercard2.default })
			),
			_react2.default.createElement(
				ListColumn,
				{ width: 2 / 5 },
				_react2.default.createElement(_selector2.default, { data: _spells2.default, storeKey: 'spells', placeholder: 'Search for a spell…' }),
				_react2.default.createElement(ListContainer, { data: _spells2.default, storeKey: 'spells', card: _spellcard2.default })
			)
		);
	});
	module.exports = exports['default'];

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _templateObject = _taggedTemplateLiteral(['\nlist-style: none;\npadding: 0;\n'], ['\nlist-style: none;\npadding: 0;\n']),
	    _templateObject2 = _taggedTemplateLiteral(['\nmargin: 0 0 1rem;\nvertical-align: top;\n'], ['\nmargin: 0 0 1rem;\nvertical-align: top;\n']);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _lodash = __webpack_require__(303);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _styledComponents = __webpack_require__(37);

	var _styledComponents2 = _interopRequireDefault(_styledComponents);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	var List = _styledComponents2.default.ul(_templateObject);
	var Item = _styledComponents2.default.li(_templateObject2);

	var CardList = function CardList(_ref) {
		var data = _ref.data;
		var remove = _ref.remove;
		var Card = _ref.card;
		return _react2.default.createElement(
			List,
			null,
			(0, _lodash2.default)(data, function (item) {
				return _react2.default.createElement(
					Item,
					{ key: item.id },
					_react2.default.createElement(Card, { item: item })
				);
			})
		);
	};

	exports.default = CardList;
	module.exports = exports['default'];

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _templateObject = _taggedTemplateLiteral(['\ntext-transform: uppercase;\nfont-weight: bold;\n'], ['\ntext-transform: uppercase;\nfont-weight: bold;\n']),
	    _templateObject2 = _taggedTemplateLiteral(['\ndisplay: block;\nmargin-bottom: 1em;\n\ndd, dt {\n\tdisplay: inline;\n}\n\ndt {\n\tfont-weight: bold;\n\n\t&:after {\n\t\tcontent: \': \';\n\t}\n}\n\ndd {\n\tmargin: 0;\n}\n'], ['\ndisplay: block;\nmargin-bottom: 1em;\n\ndd, dt {\n\tdisplay: inline;\n}\n\ndt {\n\tfont-weight: bold;\n\n\t&:after {\n\t\tcontent: \': \';\n\t}\n}\n\ndd {\n\tmargin: 0;\n}\n']),
	    _templateObject3 = _taggedTemplateLiteral(['\nfont-size: .8em;\nmargin-bottom: .5em;\n\ndd, dt {\n\tdisplay: inline;\n}\n\ndt {\n\tfont-weight: bold;\n\tfont-style: italic;\n\n\t&:after {\n\t\tcontent: \'. \';\n\t}\n}\n\ndd {\n\tmargin: 0;\n\n\t> div {\n\t\tdisplay: inline;\n\n\t\t> p:first-child {\n\t\t\tdisplay: inline;\n\t\t}\n\t}\n}\n\nul {\n\tmargin-top: 1em;\n\tpadding-left: 2em;\n\tlist-style-type: initial;\n}\n'], ['\nfont-size: .8em;\nmargin-bottom: .5em;\n\ndd, dt {\n\tdisplay: inline;\n}\n\ndt {\n\tfont-weight: bold;\n\tfont-style: italic;\n\n\t&:after {\n\t\tcontent: \'. \';\n\t}\n}\n\ndd {\n\tmargin: 0;\n\n\t> div {\n\t\tdisplay: inline;\n\n\t\t> p:first-child {\n\t\t\tdisplay: inline;\n\t\t}\n\t}\n}\n\nul {\n\tmargin-top: 1em;\n\tpadding-left: 2em;\n\tlist-style-type: initial;\n}\n']),
	    _templateObject4 = _taggedTemplateLiteral(['\ndisplay: flex;\nmargin: 1em 0;\n'], ['\ndisplay: flex;\nmargin: 1em 0;\n']),
	    _templateObject5 = _taggedTemplateLiteral(['\nwidth: 16%;\ntext-align: center;\n'], ['\nwidth: 16%;\ntext-align: center;\n']),
	    _templateObject6 = _taggedTemplateLiteral(['\nmargin: 0;\n'], ['\nmargin: 0;\n']),
	    _templateObject7 = _taggedTemplateLiteral(['\ndisplay: flex;\npadding: .5em;\n'], ['\ndisplay: flex;\npadding: .5em;\n']),
	    _templateObject8 = _taggedTemplateLiteral(['\nwidth: 50%;\n\n&:first-child {\n\tborder-right: 1px ', ' solid;\n\tpadding-right: 1em;\n\tmargin-right: 1em;\n}\n'], ['\nwidth: 50%;\n\n&:first-child {\n\tborder-right: 1px ', ' solid;\n\tpadding-right: 1em;\n\tmargin-right: 1em;\n}\n']);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _styled = __webpack_require__(116);

	var _styledComponents = __webpack_require__(37);

	var _styledComponents2 = _interopRequireDefault(_styledComponents);

	var _markdown = __webpack_require__(114);

	var _markdown2 = _interopRequireDefault(_markdown);

	var _themes = __webpack_require__(117);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	var modifier = function modifier(stat) {
		return Math.floor((stat - 10) / 2);
	};
	var formatModifier = function formatModifier(mod) {
		return '' + (mod >= 0 ? '+' : '') + mod;
	};
	var mod = function mod(stat) {
		return formatModifier(modifier(stat));
	};

	var stats = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma'];
	var abbreviateStat = function abbreviateStat(stat) {
		return stat.slice(0, 1).toUpperCase() + stat.slice(1, 3);
	};

	var Stat = _styledComponents2.default.dt(_templateObject);

	var renderSaves = function renderSaves(monster) {
		return stats.reduce(function (saves, stat) {
			if (monster[stat + '_save']) {
				saves.push(abbreviateStat(stat) + ' ' + formatModifier(monster[stat + '_save']));
			}

			return saves;
		}, []).join(', ');
	};

	var skillNames = ['Athletics', 'Acrobatics', 'Stealth', 'Arcana', 'History', 'Investigation', 'Nature', 'Religion', 'Insight', 'Medicine', 'Perception', 'Survival', 'Deception', 'Intimidation', 'Performance', 'Persuasion'];

	var renderSkills = function renderSkills(monster) {
		return skillNames.reduce(function (skills, skill) {
			if (monster[skill.toLowerCase()]) {
				skills.push(skill + ' ' + formatModifier(monster[skill.toLowerCase()]));
			}

			return skills;
		}, []).join(', ');
	};

	var crToXP = {
		'0': 10,
		'1/8': 25,
		'1/4': 50,
		'1/2': 100,
		'1': 200,
		'2': 450,
		'3': 700,
		'4': 1100,
		'5': 1800,
		'6': 2300,
		'7': 2900,
		'8': 3900,
		'9': 5000,
		'10': 5900,
		'11': 7200,
		'12': 8400,
		'13': 10000,
		'14': 11500,
		'15': 13000,
		'16': 15000,
		'17': 18000,
		'18': 20000,
		'19': 22000,
		'20': 25000,
		'21': 33000,
		'22': 41000,
		'23': 50000,
		'24': 62000,
		'25': 75000,
		'26': 90000,
		'27': 105000,
		'28': 120000,
		'29': 135000,
		'30': 155000
	};

	var Crunch = _styledComponents2.default.dl(_templateObject2);

	var Ability = _styledComponents2.default.div(_templateObject3);

	var Stats = _styledComponents2.default.dl(_templateObject4);

	var StatWrapper = _styledComponents2.default.div(_templateObject5);

	var Modifier = _styledComponents2.default.dd(_templateObject6);

	var CardBody = _styledComponents2.default.div(_templateObject7);

	var Column = _styledComponents2.default.div(_templateObject8, function (_ref) {
		var theme = _ref.theme;
		return theme.main;
	});

	var Heading = _styledComponents2.default.h4(_templateObject6);

	var MonsterCard = function MonsterCard(_ref2) {
		var monster = _ref2.item;
		return _react2.default.createElement(
			_styledComponents.ThemeProvider,
			{ theme: _themes.redCard },
			_react2.default.createElement(
				_styled.Card,
				null,
				_react2.default.createElement(
					_styled.Title,
					null,
					monster.name
				),
				_react2.default.createElement(
					_styled.Subtitle,
					null,
					monster.size,
					' ',
					monster.type,
					', ',
					monster.alignment
				),
				_react2.default.createElement(
					CardBody,
					null,
					_react2.default.createElement(
						Column,
						null,
						_react2.default.createElement(
							Crunch,
							null,
							_react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Armour Class'
								),
								_react2.default.createElement(
									'dd',
									null,
									monster.armor_class
								)
							),
							_react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Hit Points'
								),
								_react2.default.createElement(
									'dd',
									null,
									monster.hit_points,
									' (',
									monster.hit_dice,
									')'
								)
							),
							_react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Speed'
								),
								_react2.default.createElement(
									'dd',
									null,
									monster.speed
								)
							)
						),
						_react2.default.createElement(
							Stats,
							null,
							stats.map(function (stat) {
								return _react2.default.createElement(
									StatWrapper,
									{ key: stat },
									_react2.default.createElement(
										Stat,
										null,
										abbreviateStat(stat)
									),
									_react2.default.createElement(
										Modifier,
										null,
										monster[stat],
										' (',
										mod(monster[stat]),
										')'
									)
								);
							})
						),
						_react2.default.createElement(
							Crunch,
							null,
							renderSaves(monster) && _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Saving throws'
								),
								_react2.default.createElement(
									'dd',
									null,
									renderSaves(monster)
								)
							),
							renderSkills(monster) && _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Skills'
								),
								_react2.default.createElement(
									'dd',
									null,
									renderSkills(monster)
								)
							),
							monster.senses && _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Senses'
								),
								_react2.default.createElement(
									'dd',
									null,
									monster.senses
								)
							),
							monster.languages && _react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Languages'
								),
								_react2.default.createElement(
									'dd',
									null,
									monster.languages
								)
							),
							_react2.default.createElement(
								'div',
								null,
								_react2.default.createElement(
									'dt',
									null,
									'Challenge'
								),
								_react2.default.createElement(
									'dd',
									null,
									monster.challenge_rating,
									' (',
									crToXP[monster.challenge_rating],
									'XP)'
								)
							)
						),
						monster.special_abilities && _react2.default.createElement(
							'dl',
							null,
							monster.special_abilities.map(function (ability) {
								return _react2.default.createElement(
									Ability,
									{ key: ability.name },
									_react2.default.createElement(
										'dt',
										null,
										ability.name
									),
									_react2.default.createElement(
										'dd',
										null,
										_react2.default.createElement(_markdown2.default, { text: ability.desc })
									)
								);
							})
						)
					),
					_react2.default.createElement(
						Column,
						null,
						_react2.default.createElement(
							Heading,
							null,
							'Actions'
						),
						_react2.default.createElement(
							'dl',
							null,
							monster.actions.map(function (action) {
								return _react2.default.createElement(
									Ability,
									{ key: action.name },
									_react2.default.createElement(
										'dt',
										null,
										action.name
									),
									_react2.default.createElement(
										'dd',
										null,
										_react2.default.createElement(_markdown2.default, { text: action.desc })
									)
								);
							})
						),
						monster.legendary_actions && _react2.default.createElement(
							Heading,
							null,
							'Legendary Actions'
						),
						monster.legendary_actions && _react2.default.createElement(
							'dl',
							null,
							monster.legendary_actions.map(function (action) {
								return _react2.default.createElement(
									Ability,
									{ key: action.name },
									_react2.default.createElement(
										'dt',
										null,
										action.name
									),
									_react2.default.createElement(
										'dd',
										null,
										_react2.default.createElement(_markdown2.default, { text: action.desc })
									)
								);
							})
						)
					)
				)
			)
		);
	};

	exports.default = MonsterCard;
	module.exports = exports['default'];

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

	var _paramCase = __webpack_require__(80);

	var _paramCase2 = _interopRequireDefault(_paramCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var parseSpellcasting = function parseSpellcasting(ability) {
		if (ability.name.match('Spellcasting')) {
			var lines = ability.desc.match(/^.+: ([\w ]+)(, ([\w ]+))*$/mg);
			return lines.reduce(function (spells, line) {
				var _ref = line.match(/^.+?: (.+)$/) || [];

				var _ref2 = _slicedToArray(_ref, 2);

				var lineSpells = _ref2[1];

				return spells.concat(lineSpells.split(', ').map(_paramCase2.default));
			}, []);
		}

		return [];
	};

	exports.default = parseSpellcasting;
	module.exports = exports['default'];

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _templateObject = _taggedTemplateLiteral(['\n@media print {\n\tdisplay: none;\n}\n\n.typeahead-tokenizer {\n\tposition: relative;\n\tborder: 1px solid #0003;\n\tborder-radius: 3px;\n\tpadding: .2rem;\n\tcursor: text;\n\tline-height: 1.4rem;\n}\n\n.typeahead-token {\n\tdisplay: inline-block;\n\tvertical-align: text-top;\n\tborder-radius: 2px;\n\tbackground: #35f;\n\tcolor: white;\n\tline-height: 1.2rem;\n\tmargin-right: .3rem;\n\tpadding-left: .3rem;\n\tfont-size: .8rem;\n}\n\n.typeahead-token-close {\n\tdisplay:inline-block;\n\tcolor: white;\n\ttext-decoration: none;\n\tmargin-left: .3rem;\n\tbackground: #13c;\n\theight: 1.2rem;\n\twidth: 1.2rem;\n\ttext-align: center;\n\tborder: 0 none;\n\tborder-bottom-right-radius: 2px;\n\tborder-top-right-radius: 2px;\n}\n\n.typeahead {\n\tdisplay: inline-block;\n}\n\n.typeahead input {\n\tborder: 0 none;\n\tfont: inherit;\n}\n\n.typeahead-selector {\n\tposition: absolute;\n\tleft: -1px;\n\tright: -1px;\n\tbackground: white;\n\tmax-height: 20em;\n\toverflow-y: auto;\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n\tborder: 1px solid #0003;\n\tborder-bottom-left-radius: 3px;\n\tborder-bottom-right-radius: 3px;\n}\n\n.typeahead-selector li {\n\tborder-bottom: 1px solid #0001;\n\t&:last-child {\n\t\tborder: 0 none;\n\t}\n}\n\n.typeahead-option {\n\tdisplay: block;\n\tpadding: .5em;\n\tcolor: inherit;\n\tborder: 0 none;\n\n\t&:hover {\n\t\tbackground: #35f1;\n\t}\n}\n'], ['\n@media print {\n\tdisplay: none;\n}\n\n.typeahead-tokenizer {\n\tposition: relative;\n\tborder: 1px solid #0003;\n\tborder-radius: 3px;\n\tpadding: .2rem;\n\tcursor: text;\n\tline-height: 1.4rem;\n}\n\n.typeahead-token {\n\tdisplay: inline-block;\n\tvertical-align: text-top;\n\tborder-radius: 2px;\n\tbackground: #35f;\n\tcolor: white;\n\tline-height: 1.2rem;\n\tmargin-right: .3rem;\n\tpadding-left: .3rem;\n\tfont-size: .8rem;\n}\n\n.typeahead-token-close {\n\tdisplay:inline-block;\n\tcolor: white;\n\ttext-decoration: none;\n\tmargin-left: .3rem;\n\tbackground: #13c;\n\theight: 1.2rem;\n\twidth: 1.2rem;\n\ttext-align: center;\n\tborder: 0 none;\n\tborder-bottom-right-radius: 2px;\n\tborder-top-right-radius: 2px;\n}\n\n.typeahead {\n\tdisplay: inline-block;\n}\n\n.typeahead input {\n\tborder: 0 none;\n\tfont: inherit;\n}\n\n.typeahead-selector {\n\tposition: absolute;\n\tleft: -1px;\n\tright: -1px;\n\tbackground: white;\n\tmax-height: 20em;\n\toverflow-y: auto;\n\tmargin: 0;\n\tpadding: 0;\n\tlist-style: none;\n\tborder: 1px solid #0003;\n\tborder-bottom-left-radius: 3px;\n\tborder-bottom-right-radius: 3px;\n}\n\n.typeahead-selector li {\n\tborder-bottom: 1px solid #0001;\n\t&:last-child {\n\t\tborder: 0 none;\n\t}\n}\n\n.typeahead-option {\n\tdisplay: block;\n\tpadding: .5em;\n\tcolor: inherit;\n\tborder: 0 none;\n\n\t&:hover {\n\t\tbackground: #35f1;\n\t}\n}\n']);

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactTypeahead = __webpack_require__(314);

	var _styledComponents = __webpack_require__(37);

	var _styledComponents2 = _interopRequireDefault(_styledComponents);

	var _store = __webpack_require__(118);

	var _obj = __webpack_require__(115);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

	var WrapTokenizer = function WrapTokenizer(props) {
		return _react2.default.createElement(
			'div',
			{ className: props.className, onClick: props.onClick },
			_react2.default.createElement(_reactTypeahead.Tokenizer, _extends({ ref: props.tokenizerRef }, props))
		);
	};

	var StyledTokenizer = (0, _styledComponents2.default)(WrapTokenizer)(_templateObject);

	var SelectorContainer = (0, _store.observe)(function (_ref, _ref2) {
		var data = _ref.data;
		var storeKey = _ref.storeKey;
		var placeholder = _ref.placeholder;
		var onRemove = _ref.onRemove;
		var onAdd = _ref.onAdd;
		var subscribe = _ref2.subscribe;
		var dispatch = _ref2.dispatch;

		var tokenizer = undefined;
		return _react2.default.createElement(StyledTokenizer, {
			onClick: function onClick() {
				return tokenizer.focus();
			},
			options: (0, _obj.notKeys)(subscribe(storeKey), data),
			defaultSelected: (0, _obj.getKeys)(subscribe(storeKey), data),
			filterOption: 'name',
			displayOption: 'name',
			tokenizerRef: function tokenizerRef(el) {
				return tokenizer = el;
			},
			placeholder: placeholder,
			onTokenAdd: function onTokenAdd(item) {
				// workaround fmoo/react-typeahead#224
				tokenizer.refs.typeahead.refs.entry.blur();
				tokenizer.refs.typeahead.refs.entry.focus();
				dispatch(storeKey, function (data) {
					return (0, _obj.addUniq)(data, item.id);
				});

				if (onAdd) {
					onAdd(item);
				}
			},
			onTokenRemove: function onTokenRemove(item) {
				tokenizer.refs.typeahead.refs.entry.focus();
				dispatch(storeKey, function (data) {
					return (0, _obj.remove)(data, item.id);
				});

				if (onRemove) {
					onRemove(item);
				}
			}
		});
	});

	exports.default = SelectorContainer;
	module.exports = exports['default'];

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _styled = __webpack_require__(116);

	var _styledComponents = __webpack_require__(37);

	var _themes = __webpack_require__(117);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var renderTime = function renderTime(_ref) {
		var type = _ref.type;
		var size = _ref.size;
		return size + ' ' + type;
	};

	var renderComponents = function renderComponents(_ref2) {
		var v = _ref2.v;
		var s = _ref2.s;
		var m = _ref2.m;
		var components = _ref2.components;
		return [v && 'V', s && 'S', m && 'M (' + components + ')'].filter(Boolean).join(', ');
	};

	var renderDistance = function renderDistance(_ref3) {
		var type = _ref3.type;
		var size = _ref3.size;
		return type === 'touch' ? 'Touch' : type === 'self' ? 'Self' : renderTime({ type: type, size: size });
	};

	var renderArea = function renderArea(_ref4) {
		var type = _ref4.type;
		var size = _ref4.size;
		var text = _ref4.text;
		return type === 'objects-less-than' ? 'Up to ' + size + ' objects' : type === 'creatures-less-than' ? 'Up to ' + size + ' objects' : type === 'unknown' ? text : renderDistance({ type: type, size: size });
	};

	var renderRange = function renderRange(_ref5) {
		var range = _ref5.range;
		var targetArea = _ref5['target-area'];
		return '' + renderDistance(range) + (targetArea ? ' (' + renderArea(targetArea) + ')' : '');
	};

	var renderDuration = function renderDuration(_ref6) {
		var duration = _ref6.duration;
		var concentration = _ref6.concentration;
		return duration.type === 'instant' ? 'Instant' : duration.type === 'special' ? 'Special' : 'Up to ' + renderTime(duration) + (concentration ? ' (concentration)' : '');
	};

	var ord = function ord(n) {
		return n + ({
			1: 'st',
			2: 'nd',
			3: 'rd'
		}[n] || 'th');
	};

	var renderLevelAndSchool = function renderLevelAndSchool(_ref7) {
		var level = _ref7.level;
		var school = _ref7.school;
		return level > 0 ? ord(level) + '-level ' + school : school + ' cantrip';
	};

	var SpellCard = function SpellCard(_ref8) {
		var spell = _ref8.item;
		return _react2.default.createElement(
			_styledComponents.ThemeProvider,
			{ theme: _themes.orangeCard },
			_react2.default.createElement(
				_styled.Card,
				null,
				_react2.default.createElement(
					_styled.Title,
					null,
					spell.name
				),
				_react2.default.createElement(
					_styled.Subtitle,
					null,
					renderLevelAndSchool(spell)
				),
				_react2.default.createElement(
					_styled.DefinitionList,
					null,
					_react2.default.createElement(
						_styled.Def,
						{ title: 'Casting Time' },
						renderTime(spell['casting-time'])
					),
					_react2.default.createElement(
						_styled.Def,
						{ title: 'Range' },
						renderRange(spell)
					),
					_react2.default.createElement(
						_styled.Def,
						{ title: 'Components' },
						renderComponents(spell)
					),
					_react2.default.createElement(
						_styled.Def,
						{ title: 'Duration' },
						renderDuration(spell)
					)
				),
				_react2.default.createElement(_styled.Description, { text: spell['original-description'] })
			)
		);
	};

	exports.default = SpellCard;
	module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(313);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _hotRender = __webpack_require__(200);

	var _hotRender2 = _interopRequireDefault(_hotRender);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var rootEl = document.querySelector('main');

	(0, _hotRender2.default)(function () {
		var App = __webpack_require__(206);
		_reactDom2.default.render(_react2.default.createElement(App, null), rootEl);
	}, './components/index.jsx', rootEl)();

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _monsters = __webpack_require__(298);

	var _monsters2 = _interopRequireDefault(_monsters);

	var _lodash = __webpack_require__(138);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _paramCase = __webpack_require__(80);

	var _paramCase2 = _interopRequireDefault(_paramCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _lodash2.default)(_monsters2.default, function (monster) {
	  return monster.id = (0, _paramCase2.default)(monster.name);
	});
	module.exports = exports['default'];

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _spells = __webpack_require__(299);

	var _spells2 = _interopRequireDefault(_spells);

	var _lodash = __webpack_require__(138);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _paramCase = __webpack_require__(80);

	var _paramCase2 = _interopRequireDefault(_paramCase);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = (0, _lodash2.default)(_spells2.default, function (spell) {
	  return spell.id = (0, _paramCase2.default)(spell.name);
	});
	module.exports = exports['default'];

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var hexToRgb = __webpack_require__(283);

	module.exports = function contrast (hex) {
	  var rgb = hexToRgb(hex);
	  var o = Math.round(((parseInt(rgb[0]) * 299) + (parseInt(rgb[1]) * 587) + (parseInt(rgb[2]) * 114)) /1000);

	  return (o <= 180) ? 'dark' : 'light';
	};

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var copy       = __webpack_require__(242)
	  , map        = __webpack_require__(250)
	  , callable   = __webpack_require__(30)
	  , validValue = __webpack_require__(22)

	  , bind = Function.prototype.bind, defineProperty = Object.defineProperty
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , define;

	define = function (name, desc, bindTo) {
		var value = validValue(desc) && callable(desc.value), dgs;
		dgs = copy(desc);
		delete dgs.writable;
		delete dgs.value;
		dgs.get = function () {
			if (hasOwnProperty.call(this, name)) return value;
			desc.value = bind.call(value, (bindTo == null) ? this : this[bindTo]);
			defineProperty(this, name, desc);
			return this[name];
		};
		return dgs;
	};

	module.exports = function (props/*, bindTo*/) {
		var bindTo = arguments[1];
		return map(props, function (desc, name) {
			return define(name, desc, bindTo);
		});
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(308);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.createConnectComponent = exports.createObserve = exports.ConnectedComponent = undefined;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(231);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ConnectedComponent = exports.ConnectedComponent = function (_Component) {
		_inherits(ConnectedComponent, _Component);

		function ConnectedComponent(props) {
			_classCallCheck(this, ConnectedComponent);

			var _this = _possibleConstructorReturn(this, (ConnectedComponent.__proto__ || Object.getPrototypeOf(ConnectedComponent)).call(this, props));

			_this.subscriptions = [];
			_this.state = { child: null };

			_this.stateConnector = _this.stateConnector.bind(_this);
			return _this;
		}

		_createClass(ConnectedComponent, [{
			key: 'unsubscribe',
			value: function unsubscribe() {}
		}, {
			key: 'componentWillMount',
			value: function componentWillMount() {
				this.props.connect(this.stateConnector);
			}
		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				this.subscriptions.forEach(this.unsubscribe);
			}
		}, {
			key: 'stateConnector',
			value: function stateConnector(subscribe, dispatch, unsubscribe) {
				var _props = this.props,
				    receiver = _props.receiver,
				    _props$origProps = _props.origProps,
				    origProps = _props$origProps === undefined ? {} : _props$origProps;

				this.unsubscribe = unsubscribe;

				this.setState({
					child: receiver(origProps, { subscribe: this.wrapSubsrcribe(subscribe), dispatch: dispatch, unsubscribe: unsubscribe })
				});
			}
		}, {
			key: 'wrapSubsrcribe',
			value: function wrapSubsrcribe(subscribe) {
				var _this2 = this;

				return function (path, defaultValue) {
					_this2.subscriptions.push(path);
					return subscribe(path, defaultValue);
				};
			}
		}, {
			key: 'render',
			value: function render() {
				return this.state.child;
			}
		}]);

		return ConnectedComponent;
	}(_react.Component);

	var createObserve = exports.createObserve = function createObserve(connect) {
		return function (receiver) {
			return function (origProps) {
				return _react2.default.createElement(ConnectedComponent, { connect: connect, receiver: receiver, origProps: origProps });
			};
		};
	};

	var createConnectComponent = exports.createConnectComponent = function createConnectComponent(connect) {
		return function (storeToProps, Child) {
			return createConnectComponent(connect)(function (props, _ref) {
				var subscribe = _ref.subscribe,
				    dispatch = _ref.dispatch,
				    unsubscribe = _ref.unsubscribe;
				return _react2.default.createElement(Child, _extends({}, props, storeToProps(subscribe, dispatch, unsubscribe)));
			});
		};
	};

	exports.default = createConnectComponent;


/***/ },
/* 219 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var invariant = __webpack_require__(27);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(48);

	var ReactChildren = __webpack_require__(222);
	var ReactComponent = __webpack_require__(68);
	var ReactPureComponent = __webpack_require__(226);
	var ReactClass = __webpack_require__(223);
	var ReactDOMFactories = __webpack_require__(224);
	var ReactElement = __webpack_require__(28);
	var ReactPropTypes = __webpack_require__(225);
	var ReactVersion = __webpack_require__(227);

	var onlyChild = __webpack_require__(229);
	var warning = __webpack_require__(16);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(120);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(220);
	var ReactElement = __webpack_require__(28);

	var emptyFunction = __webpack_require__(66);
	var traverseAllChildren = __webpack_require__(230);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29),
	    _assign = __webpack_require__(48);

	var ReactComponent = __webpack_require__(68);
	var ReactElement = __webpack_require__(28);
	var ReactPropTypeLocationNames = __webpack_require__(71);
	var ReactNoopUpdateQueue = __webpack_require__(70);

	var emptyObject = __webpack_require__(67);
	var invariant = __webpack_require__(27);
	var warning = __webpack_require__(16);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(28);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(120);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(28);
	var ReactPropTypeLocationNames = __webpack_require__(71);
	var ReactPropTypesSecret = __webpack_require__(121);

	var emptyFunction = __webpack_require__(66);
	var getIteratorFn = __webpack_require__(73);
	var warning = __webpack_require__(16);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/

	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;

	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }

	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }

	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }

	      return true;
	    default:
	      return false;
	  }
	}

	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }

	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }

	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }

	  return false;
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}

	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(48);

	var ReactComponent = __webpack_require__(68);
	var ReactNoopUpdateQueue = __webpack_require__(70);

	var emptyObject = __webpack_require__(67);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 227 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.4.1';

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactPropTypeLocationNames = __webpack_require__(71);
	var ReactPropTypesSecret = __webpack_require__(121);

	var invariant = __webpack_require__(27);
	var warning = __webpack_require__(16);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(69);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(69);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactElement = __webpack_require__(28);

	var invariant = __webpack_require__(27);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(29);

	var ReactCurrentOwner = __webpack_require__(49);
	var REACT_ELEMENT_TYPE = __webpack_require__(119);

	var getIteratorFn = __webpack_require__(73);
	var invariant = __webpack_require__(27);
	var KeyEscapeUtils = __webpack_require__(219);
	var warning = __webpack_require__(16);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(221);


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var get = __webpack_require__(302);
	var update = __webpack_require__(304);
	var mergeSetsDeep = __webpack_require__(201);

	module.exports = initialState => {
		var state = initialState || {};
		var subscribers = {};
		return receiver => {
			var runReceiver = () => receiver(
				(path, defaultValue) => { // subscribe
					update(
						subscribers,
						path,
						pathSubs => pathSubs ? pathSubs.add(runReceiver) : new Set([runReceiver])
					);

					return get(state, path, defaultValue);
				},

				(path, fn) => { // dispatch
					update(state, path, fn);
					return Array.from(mergeSetsDeep(get(subscribers, path, [])))
						.map(sub => sub());
				},

				path => { // unsubscribe
					update(
						subscribers,
						path,
						pathSubs => {
							if(pathSubs) pathSubs.delete(runReceiver);
							return pathSubs;
						}
					);
				}
			);

			return runReceiver();
		};
	};


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var toPosInt = __webpack_require__(238)
	  , value    = __webpack_require__(22)

	  , indexOf = Array.prototype.indexOf
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , abs = Math.abs, floor = Math.floor;

	module.exports = function (searchElement/*, fromIndex*/) {
		var i, l, fromIndex, val;
		if (searchElement === searchElement) { //jslint: ignore
			return indexOf.apply(this, arguments);
		}

		l = toPosInt(value(this).length);
		fromIndex = arguments[1];
		if (isNaN(fromIndex)) fromIndex = 0;
		else if (fromIndex >= 0) fromIndex = floor(fromIndex);
		else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

		for (i = fromIndex; i < l; ++i) {
			if (hasOwnProperty.call(this, i)) {
				val = this[i];
				if (val !== val) return i; //jslint: ignore
			}
		}
		return -1;
	};


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(235)()
		? Math.sign
		: __webpack_require__(236);


/***/ },
/* 235 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		var sign = Math.sign;
		if (typeof sign !== 'function') return false;
		return ((sign(10) === 1) && (sign(-20) === -1));
	};


/***/ },
/* 236 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (value) {
		value = Number(value);
		if (isNaN(value) || (value === 0)) return value;
		return (value > 0) ? 1 : -1;
	};


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var sign = __webpack_require__(234)

	  , abs = Math.abs, floor = Math.floor;

	module.exports = function (value) {
		if (isNaN(value)) return 0;
		value = Number(value);
		if ((value === 0) || !isFinite(value)) return value;
		return sign(value) * floor(abs(value));
	};


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var toInteger = __webpack_require__(237)

	  , max = Math.max;

	module.exports = function (value) { return max(0, toInteger(value)); };


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	// Internal method, used by iteration functions.
	// Calls a function for each key-value pair found in object
	// Optionally takes compareFn to iterate object in specific order

	'use strict';

	var callable = __webpack_require__(30)
	  , value    = __webpack_require__(22)

	  , bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys
	  , propertyIsEnumerable = Object.prototype.propertyIsEnumerable;

	module.exports = function (method, defVal) {
		return function (obj, cb/*, thisArg, compareFn*/) {
			var list, thisArg = arguments[2], compareFn = arguments[3];
			obj = Object(value(obj));
			callable(cb);

			list = keys(obj);
			if (compareFn) {
				list.sort((typeof compareFn === 'function') ? bind.call(compareFn, obj) : undefined);
			}
			if (typeof method !== 'function') method = list[method];
			return call.call(method, list, function (key, index) {
				if (!propertyIsEnumerable.call(obj, key)) return defVal;
				return call.call(cb, thisArg, obj[key], key, obj, index);
			});
		};
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		var assign = Object.assign, obj;
		if (typeof assign !== 'function') return false;
		obj = { foo: 'raz' };
		assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
		return (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';
	};


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var keys  = __webpack_require__(247)
	  , value = __webpack_require__(22)

	  , max = Math.max;

	module.exports = function (dest, src/*, …srcn*/) {
		var error, i, l = max(arguments.length, 2), assign;
		dest = Object(value(dest));
		assign = function (key) {
			try { dest[key] = src[key]; } catch (e) {
				if (!error) error = e;
			}
		};
		for (i = 1; i < l; ++i) {
			src = arguments[i];
			keys(src).forEach(assign);
		}
		if (error !== undefined) throw error;
		return dest;
	};


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var assign = __webpack_require__(75)
	  , value  = __webpack_require__(22);

	module.exports = function (obj) {
		var copy = Object(value(obj));
		if (copy !== obj) return copy;
		return assign({}, obj);
	};


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	// Workaround for http://code.google.com/p/v8/issues/detail?id=2804

	'use strict';

	var create = Object.create, shim;

	if (!__webpack_require__(123)()) {
		shim = __webpack_require__(124);
	}

	module.exports = (function () {
		var nullObject, props, desc;
		if (!shim) return create;
		if (shim.level !== 1) return create;

		nullObject = {};
		props = {};
		desc = { configurable: false, enumerable: false, writable: true,
			value: undefined };
		Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
			if (name === '__proto__') {
				props[name] = { configurable: true, enumerable: false, writable: true,
					value: undefined };
				return;
			}
			props[name] = desc;
		});
		Object.defineProperties(nullObject, props);

		Object.defineProperty(shim, 'nullPolyfill', { configurable: false,
			enumerable: false, writable: false, value: nullObject });

		return function (prototype, props) {
			return create((prototype === null) ? nullObject : prototype, props);
		};
	}());


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(239)('forEach');


/***/ },
/* 245 */
/***/ function(module, exports) {

	// Deprecated

	'use strict';

	module.exports = function (obj) { return typeof obj === 'function'; };


/***/ },
/* 246 */
/***/ function(module, exports) {

	'use strict';

	var map = { function: true, object: true };

	module.exports = function (x) {
		return ((x != null) && map[typeof x]) || false;
	};


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(248)()
		? Object.keys
		: __webpack_require__(249);


/***/ },
/* 248 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		try {
			Object.keys('primitive');
			return true;
		} catch (e) { return false; }
	};


/***/ },
/* 249 */
/***/ function(module, exports) {

	'use strict';

	var keys = Object.keys;

	module.exports = function (object) {
		return keys(object == null ? object : Object(object));
	};


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var callable = __webpack_require__(30)
	  , forEach  = __webpack_require__(244)

	  , call = Function.prototype.call;

	module.exports = function (obj, cb/*, thisArg*/) {
		var o = {}, thisArg = arguments[2];
		callable(cb);
		forEach(obj, function (value, key, obj, index) {
			o[key] = call.call(cb, thisArg, value, key, obj, index);
		});
		return o;
	};


/***/ },
/* 251 */
/***/ function(module, exports) {

	'use strict';

	var forEach = Array.prototype.forEach, create = Object.create;

	var process = function (src, obj) {
		var key;
		for (key in src) obj[key] = src[key];
	};

	module.exports = function (options/*, …options*/) {
		var result = create(null);
		forEach.call(arguments, function (options) {
			if (options == null) return;
			process(Object(options), result);
		});
		return result;
	};


/***/ },
/* 252 */
/***/ function(module, exports) {

	'use strict';

	var str = 'razdwatrzy';

	module.exports = function () {
		if (typeof str.contains !== 'function') return false;
		return ((str.contains('dwa') === true) && (str.contains('foo') === false));
	};


/***/ },
/* 253 */
/***/ function(module, exports) {

	'use strict';

	var indexOf = String.prototype.indexOf;

	module.exports = function (searchString/*, position*/) {
		return indexOf.call(this, searchString, arguments[1]) > -1;
	};


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var setPrototypeOf = __webpack_require__(50)
	  , contains       = __webpack_require__(76)
	  , d              = __webpack_require__(26)
	  , Iterator       = __webpack_require__(78)

	  , defineProperty = Object.defineProperty
	  , ArrayIterator;

	ArrayIterator = module.exports = function (arr, kind) {
		if (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);
		Iterator.call(this, arr);
		if (!kind) kind = 'value';
		else if (contains.call(kind, 'key+value')) kind = 'key+value';
		else if (contains.call(kind, 'key')) kind = 'key';
		else kind = 'value';
		defineProperty(this, '__kind__', d('', kind));
	};
	if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

	ArrayIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(ArrayIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__list__[i];
			if (this.__kind__ === 'key+value') return [i, this.__list__[i]];
			return i;
		}),
		toString: d(function () { return '[object Array Iterator]'; })
	});


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArguments = __webpack_require__(74)
	  , callable    = __webpack_require__(30)
	  , isString    = __webpack_require__(77)
	  , get         = __webpack_require__(256)

	  , isArray = Array.isArray, call = Function.prototype.call
	  , some = Array.prototype.some;

	module.exports = function (iterable, cb/*, thisArg*/) {
		var mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;
		if (isArray(iterable) || isArguments(iterable)) mode = 'array';
		else if (isString(iterable)) mode = 'string';
		else iterable = get(iterable);

		callable(cb);
		doBreak = function () { broken = true; };
		if (mode === 'array') {
			some.call(iterable, function (value) {
				call.call(cb, thisArg, value, doBreak);
				if (broken) return true;
			});
			return;
		}
		if (mode === 'string') {
			l = iterable.length;
			for (i = 0; i < l; ++i) {
				char = iterable[i];
				if ((i + 1) < l) {
					code = char.charCodeAt(0);
					if ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];
				}
				call.call(cb, thisArg, char, doBreak);
				if (broken) break;
			}
			return;
		}
		result = iterable.next();

		while (!result.done) {
			call.call(cb, thisArg, result.value, doBreak);
			if (broken) return;
			result = iterable.next();
		}
	};


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArguments    = __webpack_require__(74)
	  , isString       = __webpack_require__(77)
	  , ArrayIterator  = __webpack_require__(254)
	  , StringIterator = __webpack_require__(258)
	  , iterable       = __webpack_require__(125)
	  , iteratorSymbol = __webpack_require__(39).iterator;

	module.exports = function (obj) {
		if (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();
		if (isArguments(obj)) return new ArrayIterator(obj);
		if (isString(obj)) return new StringIterator(obj);
		return new ArrayIterator(obj);
	};


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isArguments    = __webpack_require__(74)
	  , isString       = __webpack_require__(77)
	  , iteratorSymbol = __webpack_require__(39).iterator

	  , isArray = Array.isArray;

	module.exports = function (value) {
		if (value == null) return false;
		if (isArray(value)) return true;
		if (isString(value)) return true;
		if (isArguments(value)) return true;
		return (typeof value[iteratorSymbol] === 'function');
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	// Thanks @mathiasbynens
	// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols

	'use strict';

	var setPrototypeOf = __webpack_require__(50)
	  , d              = __webpack_require__(26)
	  , Iterator       = __webpack_require__(78)

	  , defineProperty = Object.defineProperty
	  , StringIterator;

	StringIterator = module.exports = function (str) {
		if (!(this instanceof StringIterator)) return new StringIterator(str);
		str = String(str);
		Iterator.call(this, str);
		defineProperty(this, '__length__', d('', str.length));

	};
	if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

	StringIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(StringIterator),
		_next: d(function () {
			if (!this.__list__) return;
			if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
			this._unBind();
		}),
		_resolve: d(function (i) {
			var char = this.__list__[i], code;
			if (this.__nextIndex__ === this.__length__) return char;
			code = char.charCodeAt(0);
			if ((code >= 0xD800) && (code <= 0xDBFF)) return char + this.__list__[this.__nextIndex__++];
			return char;
		}),
		toString: d(function () { return '[object String Iterator]'; })
	});


/***/ },
/* 259 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		var set, iterator, result;
		if (typeof Set !== 'function') return false;
		set = new Set(['raz', 'dwa', 'trzy']);
		if (String(set) !== '[object Set]') return false;
		if (set.size !== 3) return false;
		if (typeof set.add !== 'function') return false;
		if (typeof set.clear !== 'function') return false;
		if (typeof set.delete !== 'function') return false;
		if (typeof set.entries !== 'function') return false;
		if (typeof set.forEach !== 'function') return false;
		if (typeof set.has !== 'function') return false;
		if (typeof set.keys !== 'function') return false;
		if (typeof set.values !== 'function') return false;

		iterator = set.values();
		result = iterator.next();
		if (result.done !== false) return false;
		if (result.value !== 'raz') return false;

		return true;
	};


/***/ },
/* 260 */
/***/ function(module, exports) {

	// Exports true if environment provides native `Set` implementation,
	// whatever that is.

	'use strict';

	module.exports = (function () {
		if (typeof Set === 'undefined') return false;
		return (Object.prototype.toString.call(Set.prototype) === '[object Set]');
	}());


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var setPrototypeOf    = __webpack_require__(50)
	  , contains          = __webpack_require__(76)
	  , d                 = __webpack_require__(26)
	  , Iterator          = __webpack_require__(78)
	  , toStringTagSymbol = __webpack_require__(39).toStringTag

	  , defineProperty = Object.defineProperty
	  , SetIterator;

	SetIterator = module.exports = function (set, kind) {
		if (!(this instanceof SetIterator)) return new SetIterator(set, kind);
		Iterator.call(this, set.__setData__, set);
		if (!kind) kind = 'value';
		else if (contains.call(kind, 'key+value')) kind = 'key+value';
		else kind = 'value';
		defineProperty(this, '__kind__', d('', kind));
	};
	if (setPrototypeOf) setPrototypeOf(SetIterator, Iterator);

	SetIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(SetIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__list__[i];
			return [this.__list__[i], this.__list__[i]];
		}),
		toString: d(function () { return '[object Set Iterator]'; })
	});
	defineProperty(SetIterator.prototype, toStringTagSymbol, d('c', 'Set Iterator'));


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var clear          = __webpack_require__(122)
	  , eIndexOf       = __webpack_require__(233)
	  , setPrototypeOf = __webpack_require__(50)
	  , callable       = __webpack_require__(30)
	  , d              = __webpack_require__(26)
	  , ee             = __webpack_require__(267)
	  , Symbol         = __webpack_require__(39)
	  , iterator       = __webpack_require__(125)
	  , forOf          = __webpack_require__(255)
	  , Iterator       = __webpack_require__(261)
	  , isNative       = __webpack_require__(260)

	  , call = Function.prototype.call
	  , defineProperty = Object.defineProperty, getPrototypeOf = Object.getPrototypeOf
	  , SetPoly, getValues, NativeSet;

	if (isNative) NativeSet = Set;

	module.exports = SetPoly = function Set(/*iterable*/) {
		var iterable = arguments[0], self;
		if (!(this instanceof SetPoly)) throw new TypeError('Constructor requires \'new\'');
		if (isNative && setPrototypeOf) self = setPrototypeOf(new NativeSet(), getPrototypeOf(this));
		else self = this;
		if (iterable != null) iterator(iterable);
		defineProperty(self, '__setData__', d('c', []));
		if (!iterable) return self;
		forOf(iterable, function (value) {
			if (eIndexOf.call(this, value) !== -1) return;
			this.push(value);
		}, self.__setData__);
		return self;
	};

	if (isNative) {
		if (setPrototypeOf) setPrototypeOf(SetPoly, NativeSet);
		SetPoly.prototype = Object.create(NativeSet.prototype, { constructor: d(SetPoly) });
	}

	ee(Object.defineProperties(SetPoly.prototype, {
		add: d(function (value) {
			if (this.has(value)) return this;
			this.emit('_add', this.__setData__.push(value) - 1, value);
			return this;
		}),
		clear: d(function () {
			if (!this.__setData__.length) return;
			clear.call(this.__setData__);
			this.emit('_clear');
		}),
		delete: d(function (value) {
			var index = eIndexOf.call(this.__setData__, value);
			if (index === -1) return false;
			this.__setData__.splice(index, 1);
			this.emit('_delete', index, value);
			return true;
		}),
		entries: d(function () { return new Iterator(this, 'key+value'); }),
		forEach: d(function (cb/*, thisArg*/) {
			var thisArg = arguments[1], iterator, result, value;
			callable(cb);
			iterator = this.values();
			result = iterator._next();
			while (result !== undefined) {
				value = iterator._resolve(result);
				call.call(cb, thisArg, value, value, this);
				result = iterator._next();
			}
		}),
		has: d(function (value) {
			return (eIndexOf.call(this.__setData__, value) !== -1);
		}),
		keys: d(getValues = function () { return this.values(); }),
		size: d.gs(function () { return this.__setData__.length; }),
		values: d(function () { return new Iterator(this); }),
		toString: d(function () { return '[object Set]'; })
	}));
	defineProperty(SetPoly.prototype, Symbol.iterator, d(getValues));
	defineProperty(SetPoly.prototype, Symbol.toStringTag, d('c', 'Set'));


/***/ },
/* 263 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function () {
		var symbol;
		if (typeof Symbol !== 'function') return false;
		symbol = Symbol('test symbol');
		try { String(symbol); } catch (e) { return false; }
		if (typeof Symbol.iterator === 'symbol') return true;

		// Return 'true' for polyfills
		if (typeof Symbol.isConcatSpreadable !== 'object') return false;
		if (typeof Symbol.iterator !== 'object') return false;
		if (typeof Symbol.toPrimitive !== 'object') return false;
		if (typeof Symbol.toStringTag !== 'object') return false;
		if (typeof Symbol.unscopables !== 'object') return false;

		return true;
	};


/***/ },
/* 264 */
/***/ function(module, exports) {

	'use strict';

	module.exports = function (x) {
		return (x && ((typeof x === 'symbol') || (x['@@toStringTag'] === 'Symbol'))) || false;
	};


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	// ES2015 Symbol polyfill for environments that do not support it (or partially support it_

	'use strict';

	var d              = __webpack_require__(26)
	  , validateSymbol = __webpack_require__(266)

	  , create = Object.create, defineProperties = Object.defineProperties
	  , defineProperty = Object.defineProperty, objPrototype = Object.prototype
	  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null);

	if (typeof Symbol === 'function') NativeSymbol = Symbol;

	var generateName = (function () {
		var created = create(null);
		return function (desc) {
			var postfix = 0, name, ie11BugWorkaround;
			while (created[desc + (postfix || '')]) ++postfix;
			desc += (postfix || '');
			created[desc] = true;
			name = '@@' + desc;
			defineProperty(objPrototype, name, d.gs(null, function (value) {
				// For IE11 issue see:
				// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
				//    ie11-broken-getters-on-dom-objects
				// https://github.com/medikoo/es6-symbol/issues/12
				if (ie11BugWorkaround) return;
				ie11BugWorkaround = true;
				defineProperty(this, name, d(value));
				ie11BugWorkaround = false;
			}));
			return name;
		};
	}());

	// Internal constructor (not one exposed) for creating Symbol instances.
	// This one is used to ensure that `someSymbol instanceof Symbol` always return false
	HiddenSymbol = function Symbol(description) {
		if (this instanceof HiddenSymbol) throw new TypeError('TypeError: Symbol is not a constructor');
		return SymbolPolyfill(description);
	};

	// Exposed `Symbol` constructor
	// (returns instances of HiddenSymbol)
	module.exports = SymbolPolyfill = function Symbol(description) {
		var symbol;
		if (this instanceof Symbol) throw new TypeError('TypeError: Symbol is not a constructor');
		symbol = create(HiddenSymbol.prototype);
		description = (description === undefined ? '' : String(description));
		return defineProperties(symbol, {
			__description__: d('', description),
			__name__: d('', generateName(description))
		});
	};
	defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (globalSymbols[key]) return globalSymbols[key];
			return (globalSymbols[key] = SymbolPolyfill(String(key)));
		}),
		keyFor: d(function (s) {
			var key;
			validateSymbol(s);
			for (key in globalSymbols) if (globalSymbols[key] === s) return key;
		}),

		// If there's native implementation of given symbol, let's fallback to it
		// to ensure proper interoperability with other native functions e.g. Array.from
		hasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),
		isConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||
			SymbolPolyfill('isConcatSpreadable')),
		iterator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),
		match: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),
		replace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),
		search: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),
		species: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),
		split: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),
		toPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),
		toStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),
		unscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))
	});

	// Internal tweaks for real symbol producer
	defineProperties(HiddenSymbol.prototype, {
		constructor: d(SymbolPolyfill),
		toString: d('', function () { return this.__name__; })
	});

	// Proper implementation of methods exposed on Symbol.prototype
	// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
	defineProperties(SymbolPolyfill.prototype, {
		toString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),
		valueOf: d(function () { return validateSymbol(this); })
	});
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('',
		function () { return validateSymbol(this); }));
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));

	// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
		d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));

	// Note: It's important to define `toPrimitive` as last one, as some implementations
	// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
	// And that may invoke error in definition flow:
	// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
		d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isSymbol = __webpack_require__(264);

	module.exports = function (value) {
		if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
		return value;
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var d        = __webpack_require__(26)
	  , callable = __webpack_require__(30)

	  , apply = Function.prototype.apply, call = Function.prototype.call
	  , create = Object.create, defineProperty = Object.defineProperty
	  , defineProperties = Object.defineProperties
	  , hasOwnProperty = Object.prototype.hasOwnProperty
	  , descriptor = { configurable: true, enumerable: false, writable: true }

	  , on, once, off, emit, methods, descriptors, base;

	on = function (type, listener) {
		var data;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) {
			data = descriptor.value = create(null);
			defineProperty(this, '__ee__', descriptor);
			descriptor.value = null;
		} else {
			data = this.__ee__;
		}
		if (!data[type]) data[type] = listener;
		else if (typeof data[type] === 'object') data[type].push(listener);
		else data[type] = [data[type], listener];

		return this;
	};

	once = function (type, listener) {
		var once, self;

		callable(listener);
		self = this;
		on.call(this, type, once = function () {
			off.call(self, type, once);
			apply.call(listener, this, arguments);
		});

		once.__eeOnceListener__ = listener;
		return this;
	};

	off = function (type, listener) {
		var data, listeners, candidate, i;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) return this;
		data = this.__ee__;
		if (!data[type]) return this;
		listeners = data[type];

		if (typeof listeners === 'object') {
			for (i = 0; (candidate = listeners[i]); ++i) {
				if ((candidate === listener) ||
						(candidate.__eeOnceListener__ === listener)) {
					if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
					else listeners.splice(i, 1);
				}
			}
		} else {
			if ((listeners === listener) ||
					(listeners.__eeOnceListener__ === listener)) {
				delete data[type];
			}
		}

		return this;
	};

	emit = function (type) {
		var i, l, listener, listeners, args;

		if (!hasOwnProperty.call(this, '__ee__')) return;
		listeners = this.__ee__[type];
		if (!listeners) return;

		if (typeof listeners === 'object') {
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

			listeners = listeners.slice();
			for (i = 0; (listener = listeners[i]); ++i) {
				apply.call(listener, this, args);
			}
		} else {
			switch (arguments.length) {
			case 1:
				call.call(listeners, this);
				break;
			case 2:
				call.call(listeners, this, arguments[1]);
				break;
			case 3:
				call.call(listeners, this, arguments[1], arguments[2]);
				break;
			default:
				l = arguments.length;
				args = new Array(l - 1);
				for (i = 1; i < l; ++i) {
					args[i - 1] = arguments[i];
				}
				apply.call(listeners, this, args);
			}
		}
	};

	methods = {
		on: on,
		once: once,
		off: off,
		emit: emit
	};

	descriptors = {
		on: d(on),
		once: d(once),
		off: d(off),
		emit: d(emit)
	};

	base = defineProperties({}, descriptors);

	module.exports = exports = function (o) {
		return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
	};
	exports.methods = methods;


/***/ },
/* 268 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	"use strict";

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(268);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	'use strict';

	var toArray = __webpack_require__(281);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*eslint-disable fb-www/unsafe-html*/

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var createArrayFromMixed = __webpack_require__(270);
	var getMarkupWrap = __webpack_require__(131);
	var invariant = __webpack_require__(3);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 272 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	'use strict';

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;

/***/ },
/* 273 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	'use strict';

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	'use strict';

	var hyphenate = __webpack_require__(273);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;

/***/ },
/* 275 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';

	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}

	module.exports = isNode;

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	'use strict';

	var isNode = __webpack_require__(275);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;

/***/ },
/* 277 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;

/***/ },
/* 278 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}

	module.exports = performance || {};

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	'use strict';

	var performance = __webpack_require__(279);

	var performanceNow;

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}

	module.exports = performanceNow;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Fuzzy
	 * https://github.com/myork/fuzzy
	 *
	 * Copyright (c) 2012 Matt York
	 * Licensed under the MIT license.
	 */

	(function() {

	var root = this;

	var fuzzy = {};

	// Use in node or in browser
	if (true) {
	  module.exports = fuzzy;
	} else {
	  root.fuzzy = fuzzy;
	}

	// Return all elements of `array` that have a fuzzy
	// match against `pattern`.
	fuzzy.simpleFilter = function(pattern, array) {
	  return array.filter(function(string) {
	    return fuzzy.test(pattern, string);
	  });
	};

	// Does `pattern` fuzzy match `string`?
	fuzzy.test = function(pattern, string) {
	  return fuzzy.match(pattern, string) !== null;
	};

	// If `pattern` matches `string`, wrap each matching character
	// in `opts.pre` and `opts.post`. If no match, return null
	fuzzy.match = function(pattern, string, opts) {
	  opts = opts || {};
	  var patternIdx = 0
	    , result = []
	    , len = string.length
	    , totalScore = 0
	    , currScore = 0
	    // prefix
	    , pre = opts.pre || ''
	    // suffix
	    , post = opts.post || ''
	    // String to compare against. This might be a lowercase version of the
	    // raw string
	    , compareString =  opts.caseSensitive && string || string.toLowerCase()
	    , ch, compareChar;

	  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();

	  // For each character in the string, either add it to the result
	  // or wrap in template if it's the next string in the pattern
	  for(var idx = 0; idx < len; idx++) {
	    ch = string[idx];
	    if(compareString[idx] === pattern[patternIdx]) {
	      ch = pre + ch + post;
	      patternIdx += 1;

	      // consecutive characters should increase the score more than linearly
	      currScore += 1 + currScore;
	    } else {
	      currScore = 0;
	    }
	    totalScore += currScore;
	    result[result.length] = ch;
	  }

	  // return rendered string if we have a match for every char
	  if(patternIdx === pattern.length) {
	    return {rendered: result.join(''), score: totalScore};
	  }

	  return null;
	};

	// The normal entry point. Filters `arr` for matches against `pattern`.
	// It returns an array with matching values of the type:
	//
	//     [{
	//         string:   '<b>lah' // The rendered string
	//       , index:    2        // The index of the element in `arr`
	//       , original: 'blah'   // The original element in `arr`
	//     }]
	//
	// `opts` is an optional argument bag. Details:
	//
	//    opts = {
	//        // string to put before a matching character
	//        pre:     '<b>'
	//
	//        // string to put after matching character
	//      , post:    '</b>'
	//
	//        // Optional function. Input is an entry in the given arr`,
	//        // output should be the string to test `pattern` against.
	//        // In this example, if `arr = [{crying: 'koala'}]` we would return
	//        // 'koala'.
	//      , extract: function(arg) { return arg.crying; }
	//    }
	fuzzy.filter = function(pattern, arr, opts) {
	  opts = opts || {};
	  return arr
	    .reduce(function(prev, element, idx, arr) {
	      var str = element;
	      if(opts.extract) {
	        str = opts.extract(element);
	      }
	      var rendered = fuzzy.match(pattern, str, opts);
	      if(rendered != null) {
	        prev[prev.length] = {
	            string: rendered.rendered
	          , score: rendered.score
	          , index: idx
	          , original: element
	        };
	      }
	      return prev;
	    }, [])

	    // Sort by score. Browsers are inconsistent wrt stable/unstable
	    // sorting, so force stable by using the index in the case of tie.
	    // See http://ofb.net/~sethml/is-sort-stable.html
	    .sort(function(a,b) {
	      var compare = b.score - a.score;
	      if(compare) return compare;
	      return a.index - b.index;
	    });
	};


	}());



/***/ },
/* 283 */
/***/ function(module, exports) {

	module.exports = function hexToRgb (hex) {

	  if (hex.charAt && hex.charAt(0) === '#') {
	    hex = removeHash(hex)
	  }

	  if (hex.length === 3) {
	    hex = expand(hex)
	  }

	  var bigint = parseInt(hex, 16)
	  var r = (bigint >> 16) & 255
	  var g = (bigint >> 8) & 255
	  var b = bigint & 255

	  return [r, g, b]
	}

	function removeHash (hex) {

	  var arr = hex.split('')
	  arr.shift()
	  return arr.join('')
	}

	function expand (hex) {

	  return hex
	    .split('')
	    .reduce(function (accum, value) {

	      return accum.concat([value, value])
	    }, [])
	    .join('')
	}


/***/ },
/* 284 */
/***/ function(module, exports) {

	'use strict';

	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};

	function hyphenateStyleName(string) {
	    return string in cache
	    ? cache[string]
	    : cache[string] = string
	      .replace(uppercasePattern, '-$&')
	      .toLowerCase()
	      .replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;

	var _joinPrefixedValue = __webpack_require__(52);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	var _isPrefixedValue = __webpack_require__(79);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function calc(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
	    return (0, _joinPrefixedValue2.default)(property, value, function (prefix, value) {
	      return value.replace(/calc\(/g, prefix + 'calc(');
	    });
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cursor;

	var _joinPrefixedValue = __webpack_require__(52);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var values = {
	  'zoom-in': true,
	  'zoom-out': true,
	  grab: true,
	  grabbing: true
	};

	function cursor(property, value) {
	  if (property === 'cursor' && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 287 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;
	var values = { flex: true, 'inline-flex': true };

	function flex(property, value) {
	  if (property === 'display' && values[value]) {
	    return {
	      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
	    };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 288 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};

	function flexboxIE(property, value) {
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 289 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple'
	};

	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};

	function flexboxOld(property, value) {
	  if (property === 'flexDirection' && typeof value === 'string') {
	    return {
	      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	    };
	  }
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;

	var _joinPrefixedValue = __webpack_require__(52);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	var _isPrefixedValue = __webpack_require__(79);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

	function gradient(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.match(values) !== null) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 291 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = position;
	function position(property, value) {
	  if (property === 'position' && value === 'sticky') {
	    return { position: ['-webkit-sticky', 'sticky'] };
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;

	var _joinPrefixedValue = __webpack_require__(52);

	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};

	function sizing(property, value) {
	  if (properties[property] && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = transition;

	var _hyphenateStyleName = __webpack_require__(284);

	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

	var _capitalizeString = __webpack_require__(135);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	var _isPrefixedValue = __webpack_require__(79);

	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

	var _prefixProps = __webpack_require__(134);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true
	};

	function transition(property, value) {
	  // also check for already prefixed transitions
	  if (typeof value === 'string' && properties[property]) {
	    var _ref2;

	    var outputValue = prefixValue(value);
	    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
	      return value.match(/-moz-|-ms-/) === null;
	    }).join(',');

	    // if the property is already prefixed
	    if (property.indexOf('Webkit') > -1) {
	      return _defineProperty({}, property, webkitOutput);
	    }

	    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _capitalizeString2.default)(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
	  }
	}

	function prefixValue(value) {
	  if ((0, _isPrefixedValue2.default)(value)) {
	    return value;
	  }

	  // only split multi values, not cubic beziers
	  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

	  // iterate each single value and check for transitioned properties
	  // that need to be prefixed as well
	  multipleValues.forEach(function (val, index) {
	    multipleValues[index] = Object.keys(_prefixProps2.default).reduce(function (out, prefix) {
	      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';

	      Object.keys(_prefixProps2.default[prefix]).forEach(function (prop) {
	        var dashCaseProperty = (0, _hyphenateStyleName2.default)(prop);

	        if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
	          // join all prefixes and create a new value
	          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
	        }
	      });
	      return out;
	    }, val);
	  });

	  return multipleValues.join(',');
	}
	module.exports = exports['default'];

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixAll;

	var _prefixProps = __webpack_require__(134);

	var _prefixProps2 = _interopRequireDefault(_prefixProps);

	var _capitalizeString = __webpack_require__(135);

	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

	var _sortPrefixedStyle = __webpack_require__(296);

	var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);

	var _position = __webpack_require__(291);

	var _position2 = _interopRequireDefault(_position);

	var _calc = __webpack_require__(285);

	var _calc2 = _interopRequireDefault(_calc);

	var _cursor = __webpack_require__(286);

	var _cursor2 = _interopRequireDefault(_cursor);

	var _flex = __webpack_require__(287);

	var _flex2 = _interopRequireDefault(_flex);

	var _sizing = __webpack_require__(292);

	var _sizing2 = _interopRequireDefault(_sizing);

	var _gradient = __webpack_require__(290);

	var _gradient2 = _interopRequireDefault(_gradient);

	var _transition = __webpack_require__(293);

	var _transition2 = _interopRequireDefault(_transition);

	var _flexboxIE = __webpack_require__(288);

	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);

	var _flexboxOld = __webpack_require__(289);

	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// special flexbox specifications


	var plugins = [_position2.default, _calc2.default, _cursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default, _flex2.default];

	/**
	 * Returns a prefixed version of the style object using all vendor prefixes
	 * @param {Object} styles - Style object that gets prefixed properties added
	 * @returns {Object} - Style object with prefixed properties and values
	 */
	function prefixAll(styles) {
	  Object.keys(styles).forEach(function (property) {
	    var value = styles[property];
	    if (value instanceof Object && !Array.isArray(value)) {
	      // recurse through nested style objects
	      styles[property] = prefixAll(value);
	    } else {
	      Object.keys(_prefixProps2.default).forEach(function (prefix) {
	        var properties = _prefixProps2.default[prefix];
	        // add prefixes if needed
	        if (properties[property]) {
	          styles[prefix + (0, _capitalizeString2.default)(property)] = value;
	        }
	      });
	    }
	  });

	  Object.keys(styles).forEach(function (property) {
	    [].concat(styles[property]).forEach(function (value, index) {
	      // resolve every special plugins
	      plugins.forEach(function (plugin) {
	        return assignStyles(styles, plugin(property, value));
	      });
	    });
	  });

	  return (0, _sortPrefixedStyle2.default)(styles);
	}

	function assignStyles(base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  Object.keys(extend).forEach(function (property) {
	    var baseValue = base[property];
	    if (Array.isArray(baseValue)) {
	      [].concat(extend[property]).forEach(function (value) {
	        var valueIndex = baseValue.indexOf(value);
	        if (valueIndex > -1) {
	          base[property].splice(valueIndex, 1);
	        }
	        base[property].push(value);
	      });
	    } else {
	      base[property] = extend[property];
	    }
	  });
	}
	module.exports = exports['default'];

/***/ },
/* 295 */
/***/ function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	exports.default = function (property) {
	  return property.match(/^(Webkit|Moz|O|ms)/) !== null;
	};

	module.exports = exports["default"];

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sortPrefixedStyle;

	var _isPrefixedProperty = __webpack_require__(295);

	var _isPrefixedProperty2 = _interopRequireDefault(_isPrefixedProperty);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function sortPrefixedStyle(style) {
	  return Object.keys(style).sort(function (left, right) {
	    if ((0, _isPrefixedProperty2.default)(left) && !(0, _isPrefixedProperty2.default)(right)) {
	      return -1;
	    } else if (!(0, _isPrefixedProperty2.default)(left) && (0, _isPrefixedProperty2.default)(right)) {
	      return 1;
	    }
	    return 0;
	  }).reduce(function (sortedStyle, prop) {
	    sortedStyle[prop] = style[prop];
	    return sortedStyle;
	  }, {});
	}
	module.exports = exports['default'];

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(294)


/***/ },
/* 298 */
/***/ function(module, exports) {

	module.exports = [
		{
			"name": "Aboleth",
			"size": "Large",
			"type": "aberration",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 17,
			"hit_points": 135,
			"hit_dice": "18d10",
			"speed": "10 ft., swim 40 ft.",
			"strength": 21,
			"dexterity": 9,
			"constitution": 15,
			"intelligence": 18,
			"wisdom": 15,
			"charisma": 18,
			"constitution_save": 6,
			"intelligence_save": 8,
			"wisdom_save": 6,
			"history": 12,
			"perception": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 20",
			"languages": "Deep Speech, telepathy 120 ft.",
			"challenge_rating": "10",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The aboleth can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Mucous Cloud",
					"desc": "While underwater, the aboleth is surrounded by transformative mucus. A creature that touches the aboleth or that hits it with a melee attack while within 5 ft. of it must make a DC 14 Constitution saving throw. On a failure, the creature is diseased for 1d4 hours. The diseased creature can breathe only underwater.",
					"attack_bonus": 0
				},
				{
					"name": "Probing Telepathy",
					"desc": "If a creature communicates telepathically with the aboleth, the aboleth learns the creature's greatest desires if the aboleth can see the creature.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The aboleth makes three tentacle attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Tentacle",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 14 Constitution saving throw or become diseased. The disease has no effect for 1 minute and can be removed by any magic that cures disease. After 1 minute, the diseased creature's skin becomes translucent and slimy, the creature can't regain hit points unless it is underwater, and the disease can be removed only by heal or another disease-curing spell of 6th level or higher. When the creature is outside a body of water, it takes 6 (1d12) acid damage every 10 minutes unless moisture is applied to the skin before 10 minutes have passed.",
					"attack_bonus": 9,
					"damage_dice": "2d6",
					"damage_bonus": 5
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft. one target. Hit: 15 (3d6 + 5) bludgeoning damage.",
					"attack_bonus": 9,
					"damage_dice": "3d6",
					"damage_bonus": 5
				},
				{
					"name": "Enslave (3/day)",
					"desc": "The aboleth targets one creature it can see within 30 ft. of it. The target must succeed on a DC 14 Wisdom saving throw or be magically charmed by the aboleth until the aboleth dies or until it is on a different plane of existence from the target. The charmed target is under the aboleth's control and can't take reactions, and the aboleth and the target can communicate telepathically with each other over any distance.\nWhenever the charmed target takes damage, the target can repeat the saving throw. On a success, the effect ends. No more than once every 24 hours, the target can also repeat the saving throw when it is at least 1 mile away from the aboleth.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The aboleth makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Swipe",
					"desc": "The aboleth makes one tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Psychic Drain (Costs 2 Actions)",
					"desc": "One creature charmed by the aboleth takes 10 (3d6) psychic damage, and the aboleth regains hit points equal to the damage the creature takes.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Acolyte",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 10,
			"hit_points": 9,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 10,
			"constitution": 10,
			"intelligence": 10,
			"wisdom": 14,
			"charisma": 11,
			"medicine": 4,
			"religion": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "any one language (usually Common)",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Spellcasting",
					"desc": "The acolyte is a 1st-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). The acolyte has following cleric spells prepared:\n\n- Cantrips (at will): light, sacred flame, thaumaturgy\n- 1st level (3 slots): bless, cure wounds, sanctuary",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Club",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
					"attack_bonus": 2,
					"damage_dice": "1d4"
				}
			]
		},
		{
			"name": "Adult Black Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 19,
			"hit_points": 195,
			"hit_dice": "17d12",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 23,
			"dexterity": 14,
			"constitution": 21,
			"intelligence": 14,
			"wisdom": 13,
			"charisma": 17,
			"dexterity_save": 7,
			"constitution_save": 10,
			"wisdom_save": 6,
			"charisma_save": 8,
			"perception": 11,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
			"languages": "Common, Draconic",
			"challenge_rating": "14",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) acid damage.",
					"attack_bonus": 11,
					"damage_dice": "2d10 + 1d8",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
					"attack_bonus": 11,
					"damage_dice": "2d8",
					"damage_bonus": 6
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Acid Breath (Recharge 5-6)",
					"desc": "The dragon exhales acid in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d8"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Blue Dracolich",
			"size": "Huge",
			"type": "undead",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 19,
			"hit_points": 225,
			"hit_dice": "18d12",
			"speed": "40 ft., burrow 30 ft., fly 80 ft.",
			"strength": 25,
			"dexterity": 10,
			"constitution": 23,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 19,
			"perception": 12,
			"damage_vulnerabilities": "",
			"damage_resistances": "necrotic",
			"damage_immunities": "lightning, poison",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, poisoned",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
			"languages": "Common, Draconic",
			"challenge_rating": "17",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dracolich fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The dracolich has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dracolich can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
					"attack_bonus": 12,
					"damage_dice": "2d10 + 1d10",
					"damage_bonus": 7
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
					"attack_bonus": 12,
					"damage_dice": "2d6",
					"damage_bonus": 7
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
					"attack_bonus": 12,
					"damage_dice": "2d8",
					"damage_bonus": 7
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dracolich's choice that is within 120 feet of the dracolich and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dracolich's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Lightning Breath (Recharge 5-6)",
					"desc": "The dracolich exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 20 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d10"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dracolich makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dracolich makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dracolich beats its tattered wings. Each creature within 10 ft. of the dracolich must succeed on a DC 21 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. After beating its wings this way, the dracolich can fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Blue Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 19,
			"hit_points": 225,
			"hit_dice": "18d12",
			"speed": "40 ft., burrow 30 ft., fly 80 ft.",
			"strength": 25,
			"dexterity": 10,
			"constitution": 23,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 19,
			"dexterity_save": 5,
			"constitution_save": 11,
			"wisdom_save": 7,
			"charisma_save": 9,
			"perception": 12,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
			"languages": "Common, Draconic",
			"challenge_rating": "16",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
					"attack_bonus": 12,
					"damage_dice": "2d10 + 1d10",
					"damage_bonus": 7
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
					"attack_bonus": 12,
					"damage_dice": "2d6",
					"damage_bonus": 7
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
					"attack_bonus": 12,
					"damage_dice": "2d8",
					"damage_bonus": 7
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Lightning Breath (Recharge 5-6)",
					"desc": "The dragon exhales lightning in a 90-foot line that is 5 ft. wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d10"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Brass Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 18,
			"hit_points": 172,
			"hit_dice": "15d12",
			"speed": "40 ft., burrow 40 ft., fly 80 ft.",
			"strength": 23,
			"dexterity": 10,
			"constitution": 21,
			"intelligence": 14,
			"wisdom": 13,
			"charisma": 17,
			"dexterity_save": 5,
			"constitution_save": 10,
			"wisdom_save": 6,
			"charisma_save": 8,
			"history": 7,
			"perception": 11,
			"persuasion": 8,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
			"languages": "Common, Draconic",
			"challenge_rating": "13",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +11 to hit, reach,.0 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d10",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
					"attack_bonus": 11,
					"damage_dice": "2d8",
					"damage_bonus": 6
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 45 (13d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
					"attack_bonus": 0,
					"damage_dice": "13d6"
				}
			]
		},
		{
			"name": "Adult Bronze Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 19,
			"hit_points": 212,
			"hit_dice": "17d12",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 25,
			"dexterity": 10,
			"constitution": 23,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 19,
			"dexterity_save": 5,
			"constitution_save": 11,
			"wisdom_save": 7,
			"charisma_save": 9,
			"insight": 7,
			"perception": 12,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
			"languages": "Common, Draconic",
			"challenge_rating": "15",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage.",
					"attack_bonus": 12,
					"damage_dice": "2d10",
					"damage_bonus": 7
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
					"attack_bonus": 12,
					"damage_dice": "2d6",
					"damage_bonus": 7
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
					"attack_bonus": 12,
					"damage_dice": "2d8",
					"damage_bonus": 7
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 19 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
					"attack_bonus": 0,
					"damage_dice": "12d10"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Copper Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 18,
			"hit_points": 184,
			"hit_dice": "16d12",
			"speed": "40 ft., climb 40 ft., fly 80 ft.",
			"strength": 23,
			"dexterity": 12,
			"constitution": 21,
			"intelligence": 18,
			"wisdom": 15,
			"charisma": 17,
			"dexterity_save": 6,
			"constitution_save": 10,
			"wisdom_save": 7,
			"charisma_save": 8,
			"deception": 8,
			"perception": 12,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
			"languages": "Common, Draconic",
			"challenge_rating": "14",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d10",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
					"attack_bonus": 11,
					"damage_dice": "2d8",
					"damage_bonus": 6
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
					"attack_bonus": 0,
					"damage_dice": "12d8"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Gold Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 19,
			"hit_points": 256,
			"hit_dice": "19d12",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 27,
			"dexterity": 14,
			"constitution": 25,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 24,
			"dexterity_save": 8,
			"constitution_save": 13,
			"wisdom_save": 8,
			"charisma_save": 13,
			"insight": 8,
			"perception": 14,
			"persuasion": 13,
			"stealth": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
			"languages": "Common, Draconic",
			"challenge_rating": "17",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d10",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 14,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 66 (12d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 21 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "12d10"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Green Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 19,
			"hit_points": 207,
			"hit_dice": "18d12",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 23,
			"dexterity": 12,
			"constitution": 21,
			"intelligence": 18,
			"wisdom": 15,
			"charisma": 17,
			"dexterity_save": 6,
			"constitution_save": 10,
			"wisdom_save": 7,
			"charisma_save": 8,
			"deception": 8,
			"insight": 7,
			"perception": 12,
			"persuasion": 8,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
			"languages": "Common, Draconic",
			"challenge_rating": "15",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 7 (2d6) poison damage.",
					"attack_bonus": 11,
					"damage_dice": "2d10 + 2d6",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
					"attack_bonus": 11,
					"damage_dice": "2d8",
					"damage_bonus": 6
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
					"attack_bonus": 0
				},
				{
					"name": "Poison Breath (Recharge 5-6)",
					"desc": "The dragon exhales poisonous gas in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 56 (16d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "16d6"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Red Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 19,
			"hit_points": 256,
			"hit_dice": "19d12",
			"speed": "40 ft., climb 40 ft., fly 80 ft.",
			"strength": 27,
			"dexterity": 10,
			"constitution": 25,
			"intelligence": 16,
			"wisdom": 13,
			"charisma": 21,
			"dexterity_save": 6,
			"constitution_save": 13,
			"wisdom_save": 7,
			"charisma_save": 11,
			"perception": 13,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
			"languages": "Common, Draconic",
			"challenge_rating": "17",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 7 (2d6) fire damage.",
					"attack_bonus": 14,
					"damage_dice": "2d10 + 2d6",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 14,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 63 (18d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "18d6"
				},
				{
					"name": "Lair Actions",
					"desc": "On initiative count 20 (losing initiative ties), the dragon takes a lair action to cause one of the following effects: the dragon can't use the same effect two rounds in a row:\n- Magma erupts from a point on the ground the dragon can see within 120 feet of it, creating a 20-foot-high, 5-foot-radius geyser. Each creature in the geyser's area must make a DC 15 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.\n- A tremor shakes the lair in a 60-foot-radius around the dragon. Each creature other than the dragon on the ground in that area must succeed on a DC 15 Dexterity saving throw or be knocked prone.\n- Volcanic gases form a cloud in a 20-foot-radius sphere centered on a point the dragon can see within 120 feet of it. The sphere spreads around corners, and its area is lightly obscured. It lasts until initiative count 20 on the next round. Each creature that starts its turn in the cloud must succeed on a DC 13 Constitution saving throw or be poisoned until the end of its turn. While poisoned in this way, a creature is incapacitated.",
					"attack_bonus": 0,
					"damage_dice": "6d6"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult Silver Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 19,
			"hit_points": 243,
			"hit_dice": "18d12",
			"speed": "40 ft., fly 80 ft.",
			"strength": 27,
			"dexterity": 10,
			"constitution": 25,
			"intelligence": 16,
			"wisdom": 13,
			"charisma": 21,
			"dexterity_save": 5,
			"constitution_save": 12,
			"wisdom_save": 6,
			"charisma_save": 10,
			"arcana": 8,
			"history": 8,
			"perception": 11,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
			"languages": "Common, Draconic",
			"challenge_rating": "16",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
					"attack_bonus": 13,
					"damage_dice": "2d10",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 13,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 13,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 20 Constitution saving throw, taking 58 (13d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 60-foot cone. Each creature in that area must succeed on a DC 20 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "13d8"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Adult White Dragon",
			"size": "Huge",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 18,
			"hit_points": 200,
			"hit_dice": "16d12",
			"speed": "40 ft., burrow 30 ft., fly 80 ft., swim 40 ft.",
			"strength": 22,
			"dexterity": 10,
			"constitution": 22,
			"intelligence": 8,
			"wisdom": 12,
			"charisma": 12,
			"dexterity_save": 5,
			"constitution_save": 11,
			"wisdom_save": 6,
			"charisma_save": 6,
			"perception": 11,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
			"languages": "Common, Draconic",
			"challenge_rating": "13",
			"special_abilities": [
				{
					"name": "Ice Walk",
					"desc": "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) cold damage.",
					"attack_bonus": 11,
					"damage_dice": "2d10 + 1d8",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 11,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
					"attack_bonus": 11,
					"damage_dice": "2d8",
					"damage_bonus": 6
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 14 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Cold Breath (Recharge 5-6)",
					"desc": "The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d8"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Air Elemental",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 15,
			"hit_points": 90,
			"hit_dice": "12d10",
			"speed": "fly 90 ft. (hover)",
			"strength": 14,
			"dexterity": 20,
			"constitution": 14,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Auran",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Air Form",
					"desc": "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The elemental makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
					"attack_bonus": 8,
					"damage_dice": "2d8",
					"damage_bonus": 5
				},
				{
					"name": "Whirlwind (Recharge 4-6)",
					"desc": "Each creature in the elemental's space must make a DC 13 Strength saving throw. On a failure, a target takes 15 (3d8 + 2) bludgeoning damage and is flung up 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Black Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 22,
			"hit_points": 367,
			"hit_dice": "21d20",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 27,
			"dexterity": 14,
			"constitution": 25,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 19,
			"dexterity_save": 9,
			"constitution_save": 14,
			"wisdom_save": 9,
			"charisma_save": 11,
			"perception": 16,
			"stealth": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
			"languages": "Common, Draconic",
			"challenge_rating": "21",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack:+ 15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) acid damage.",
					"attack_bonus": 15,
					"damage_dice": "2d10 + 2d8",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 15,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +15 to hit, reach 20 ft ., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 15,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Acid Breath (Recharge 5-6)",
					"desc": "The dragon exhales acid in a 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 67 (15d8) acid damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Blue Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 22,
			"hit_points": 481,
			"hit_dice": "26d20",
			"speed": "40 ft., burrow 40 ft., fly 80 ft.",
			"strength": 29,
			"dexterity": 10,
			"constitution": 27,
			"intelligence": 18,
			"wisdom": 17,
			"charisma": 21,
			"dexterity_save": 7,
			"constitution_save": 15,
			"wisdom_save": 10,
			"charisma_save": 12,
			"perception": 17,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
			"languages": "Common, Draconic",
			"challenge_rating": "23",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage plus 11 (2d10) lightning damage.",
					"attack_bonus": 16,
					"damage_dice": "2d10 + 2d10",
					"damage_bonus": 9
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
					"attack_bonus": 16,
					"damage_dice": "2d6",
					"damage_bonus": 9
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
					"attack_bonus": 16,
					"damage_dice": "2d8",
					"damage_bonus": 9
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Lightning Breath (Recharge 5-6)",
					"desc": "The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "16d10"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Brass Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 20,
			"hit_points": 297,
			"hit_dice": "17d20",
			"speed": "40 ft., burrow 40 ft., fly 80 ft.",
			"strength": 27,
			"dexterity": 10,
			"constitution": 25,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 19,
			"dexterity_save": 6,
			"constitution_save": 13,
			"wisdom_save": 8,
			"charisma_save": 10,
			"history": 9,
			"perception": 14,
			"persuasion": 10,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
			"languages": "Common, Draconic",
			"challenge_rating": "20",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d10",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 14,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons:\nFire Breath. The dragon exhales fire in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 21 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 90-foot cone. Each creature in that area must succeed on a DC 21 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
					"attack_bonus": 0,
					"damage_dice": "16d6"
				},
				{
					"name": "Change Shape",
					"desc": "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Bronze Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 22,
			"hit_points": 444,
			"hit_dice": "24d20",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 29,
			"dexterity": 10,
			"constitution": 27,
			"intelligence": 18,
			"wisdom": 17,
			"charisma": 21,
			"dexterity_save": 7,
			"constitution_save": 15,
			"wisdom_save": 10,
			"charisma_save": 12,
			"insight": 10,
			"perception": 17,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
			"languages": "Common, Draconic",
			"challenge_rating": "22",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage.",
					"attack_bonus": 16,
					"damage_dice": "2d10",
					"damage_bonus": 9
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
					"attack_bonus": 16,
					"damage_dice": "1d6",
					"damage_bonus": 9
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
					"attack_bonus": 0,
					"damage_dice": "2d8",
					"damage_bonus": 9
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 23 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
					"attack_bonus": 0,
					"damage_dice": "16d10"
				},
				{
					"name": "Change Shape",
					"desc": "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Copper Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 21,
			"hit_points": 350,
			"hit_dice": "20d20",
			"speed": "40 ft., climb 40 ft., fly 80 ft.",
			"strength": 27,
			"dexterity": 12,
			"constitution": 25,
			"intelligence": 20,
			"wisdom": 17,
			"charisma": 19,
			"dexterity_save": 8,
			"constitution_save": 14,
			"wisdom_save": 10,
			"charisma_save": 11,
			"deception": 11,
			"perception": 17,
			"stealth": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
			"languages": "Common, Draconic",
			"challenge_rating": "21",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
					"attack_bonus": 15,
					"damage_dice": "2d10",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 15,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 15,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 63 (14d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 22 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
					"attack_bonus": 0,
					"damage_dice": "14d8"
				},
				{
					"name": "Change Shape",
					"desc": "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Gold Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 22,
			"hit_points": 546,
			"hit_dice": "28d20",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 30,
			"dexterity": 14,
			"constitution": 29,
			"intelligence": 18,
			"wisdom": 17,
			"charisma": 28,
			"dexterity_save": 9,
			"constitution_save": 16,
			"wisdom_save": 10,
			"charisma_save": 16,
			"insight": 10,
			"perception": 17,
			"persuasion": 16,
			"stealth": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
			"languages": "Common, Draconic",
			"challenge_rating": "24",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
					"attack_bonus": 17,
					"damage_dice": "2d10",
					"damage_bonus": 10
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
					"attack_bonus": 17,
					"damage_dice": "2d6",
					"damage_bonus": 10
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
					"attack_bonus": 17,
					"damage_dice": "2d8",
					"damage_bonus": 10
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 24 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 71 (13d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 24 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "13d10"
				},
				{
					"name": "Change Shape",
					"desc": "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Green Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 21,
			"hit_points": 385,
			"hit_dice": "22d20",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 27,
			"dexterity": 12,
			"constitution": 25,
			"intelligence": 20,
			"wisdom": 17,
			"charisma": 19,
			"dexterity_save": 8,
			"constitution_save": 14,
			"wisdom_save": 10,
			"charisma_save": 11,
			"deception": 11,
			"insight": 10,
			"perception": 17,
			"persuasion": 11,
			"stealth": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
			"languages": "Common, Draconic",
			"challenge_rating": "22",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 10 (3d6) poison damage.",
					"attack_bonus": 15,
					"damage_dice": "2d10 + 3d6",
					"damage_bonus": 9
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 22 (4d6 + 8) slashing damage.",
					"attack_bonus": 15,
					"damage_dice": "4d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 16,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Poison Breath (Recharge 5-6)",
					"desc": "The dragon exhales poisonous gas in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 77 (22d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "22d6"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Red Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 22,
			"hit_points": 546,
			"hit_dice": "28d20",
			"speed": "40 ft., climb 40 ft., fly 80 ft.",
			"strength": 30,
			"dexterity": 10,
			"constitution": 29,
			"intelligence": 18,
			"wisdom": 15,
			"charisma": 23,
			"dexterity_save": 7,
			"constitution_save": 16,
			"wisdom_save": 9,
			"charisma_save": 13,
			"perception": 16,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
			"languages": "Common, Draconic",
			"challenge_rating": "24",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage plus 14 (4d6) fire damage.",
					"attack_bonus": 17,
					"damage_dice": "2d10 + 4d6",
					"damage_bonus": 10
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
					"attack_bonus": 17,
					"damage_dice": "2d6",
					"damage_bonus": 10
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
					"attack_bonus": 17,
					"damage_dice": "2d8",
					"damage_bonus": 10
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 91 (26d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "26d6"
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient Silver Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 22,
			"hit_points": 487,
			"hit_dice": "25d20",
			"speed": "40 ft., fly 80 ft.",
			"strength": 30,
			"dexterity": 10,
			"constitution": 29,
			"intelligence": 18,
			"wisdom": 15,
			"charisma": 23,
			"dexterity_save": 7,
			"constitution_save": 16,
			"wisdom_save": 9,
			"charisma_save": 13,
			"arcana": 11,
			"history": 11,
			"perception": 16,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
			"languages": "Common, Draconic",
			"challenge_rating": "23",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
					"attack_bonus": 17,
					"damage_dice": "2d10",
					"damage_bonus": 10
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
					"attack_bonus": 17,
					"damage_dice": "2d6",
					"damage_bonus": 10
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
					"attack_bonus": 17,
					"damage_dice": "2d8",
					"damage_bonus": 10
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 24 Constitution saving throw, taking 67 (15d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 90- foot cone. Each creature in that area must succeed on a DC 24 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "15d8"
				},
				{
					"name": "Change Shape",
					"desc": "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Detect",
					"desc": "The dragon makes a Wisdom (Perception) check.",
					"attack_bonus": 0
				},
				{
					"name": "Tail Attack",
					"desc": "The dragon makes a tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Wing Attack (Costs 2 Actions)",
					"desc": "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ancient White Dragon",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 20,
			"hit_points": 333,
			"hit_dice": "18d20",
			"speed": "40 ft., burrow 40 ft., fly 80 ft., swim 40 ft.",
			"strength": 26,
			"dexterity": 10,
			"constitution": 26,
			"intelligence": 10,
			"wisdom": 13,
			"charisma": 14,
			"dexterity_save": 6,
			"constitution_save": 14,
			"wisdom_save": 7,
			"charisma_save": 8,
			"perception": 13,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
			"languages": "Common, Draconic",
			"challenge_rating": "20",
			"special_abilities": [
				{
					"name": "Ice Walk",
					"desc": "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the dragon fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) cold damage.",
					"attack_bonus": 14,
					"damage_dice": "2d10 + 2d8",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
					"attack_bonus": 14,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
					"attack_bonus": 0
				},
				{
					"name": "Cold Breath (Recharge 5-6)",
					"desc": "The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 72 (l6d8) cold damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "16d8"
				}
			]
		},
		{
			"name": "Androsphinx",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "lawful neutral",
			"armor_class": 17,
			"hit_points": 199,
			"hit_dice": "19d10",
			"speed": "40 ft., fly 60 ft.",
			"strength": 22,
			"dexterity": 10,
			"constitution": 20,
			"intelligence": 16,
			"wisdom": 18,
			"charisma": 23,
			"dexterity_save": 6,
			"constitution_save": 11,
			"intelligence_save": 9,
			"wisdom_save": 10,
			"arcana": 9,
			"perception": 10,
			"religion": 15,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "charmed, frightened",
			"senses": "truesight 120 ft., passive Perception 20",
			"languages": "Common, Sphinx",
			"challenge_rating": "17",
			"special_abilities": [
				{
					"name": "Inscrutable",
					"desc": "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The sphinx's weapon attacks are magical.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The sphinx is a 12th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 18, +10 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following cleric spells prepared:\n\n- Cantrips (at will): sacred flame, spare the dying, thaumaturgy\n- 1st level (4 slots): command, detect evil and good, detect magic\n- 2nd level (3 slots): lesser restoration, zone of truth\n- 3rd level (3 slots): dispel magic, tongues\n- 4th level (3 slots): banishment, freedom of movement\n- 5th level (2 slots): flame strike, greater restoration\n- 6th level (1 slot): heroes' feast",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The sphinx makes two claw attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 17 (2d10 + 6) slashing damage.",
					"attack_bonus": 12,
					"damage_dice": "2d10",
					"damage_bonus": 6
				},
				{
					"name": "Roar (3/Day)",
					"desc": "The sphinx emits a magical roar. Each time it roars before finishing a long rest, the roar is louder and the effect is different, as detailed below. Each creature within 500 feet of the sphinx and able to hear the roar must make a saving throw.\n\nFirst Roar. Each creature that fails a DC 18 Wisdom saving throw is frightened for 1 minute. A frightened creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\n\nSecond Roar. Each creature that fails a DC 18 Wisdom saving throw is deafened and frightened for 1 minute. A frightened creature is paralyzed and can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\n\nThird Roar. Each creature makes a DC 18 Constitution saving throw. On a failed save, a creature takes 44 (8d10) thunder damage and is knocked prone. On a successful save, the creature takes half as much damage and isn't knocked prone.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Claw Attack",
					"desc": "The sphinx makes one claw attack.",
					"attack_bonus": 0
				},
				{
					"name": "Teleport (Costs 2 Actions)",
					"desc": "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
					"attack_bonus": 0
				},
				{
					"name": "Cast a Spell (Costs 3 Actions)",
					"desc": "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Animated Armor",
			"size": "Medium",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 18,
			"hit_points": 33,
			"hit_dice": "6d8",
			"speed": "25 ft.",
			"strength": 14,
			"dexterity": 11,
			"constitution": 13,
			"intelligence": 1,
			"wisdom": 3,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison, psychic",
			"condition_immunities": "blinded, charmed, deafened, exhaustion, frightened, paralyzed, petrified, poisoned",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Antimagic Susceptibility",
					"desc": "The armor is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the armor must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance",
					"desc": "While the armor remains motionless, it is indistinguishable from a normal suit of armor.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The armor makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Ankheg",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 39,
			"hit_dice": "6d10",
			"speed": "30 ft., burrow 10 ft.",
			"strength": 17,
			"dexterity": 11,
			"constitution": 13,
			"intelligence": 1,
			"wisdom": 13,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., tremorsense 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage plus 3 (1d6) acid damage. If the target is a Large or smaller creature, it is grappled (escape DC 13). Until this grapple ends, the ankheg can bite only the grappled creature and has advantage on attack rolls to do so.",
					"attack_bonus": 5,
					"damage_dice": "2d6 + 1d6",
					"damage_bonus": 3
				},
				{
					"name": "Acid Spray (Recharge 6)",
					"desc": "The ankheg spits acid in a line that is 30 ft. long and 5 ft. wide, provided that it has no creature grappled. Each creature in that line must make a DC 13 Dexterity saving throw, taking 10 (3d6) acid damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "3d6"
				}
			]
		},
		{
			"name": "Ape",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 19,
			"hit_dice": "3d8",
			"speed": "30 ft., climb 30 ft.",
			"strength": 16,
			"dexterity": 14,
			"constitution": 14,
			"intelligence": 6,
			"wisdom": 12,
			"charisma": 7,
			"athletics": 5,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1/2",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The ape makes two fist attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Fist",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +5 to hit, range 25/50 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Archmage",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 12,
			"hit_points": 99,
			"hit_dice": "18d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 20,
			"wisdom": 15,
			"charisma": 16,
			"intelligence_save": 9,
			"wisdom_save": 6,
			"arcana": 13,
			"history": 13,
			"damage_vulnerabilities": "",
			"damage_resistances": "damage from spells; non magical bludgeoning, piercing, and slashing (from stoneskin)",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "any six languages",
			"challenge_rating": "12",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The archmage has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The archmage is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 17, +9 to hit with spell attacks). The archmage can cast disguise self and invisibility at will and has the following wizard spells prepared:\n\n- Cantrips (at will): fire bolt, light, mage hand, prestidigitation, shocking grasp\n- 1st level (4 slots): detect magic, identify, mage armor*, magic missile\n- 2nd level (3 slots): detect thoughts, mirror image, misty step\n- 3rd level (3 slots): counterspell,fly, lightning bolt\n- 4th level (3 slots): banishment, fire shield, stoneskin*\n- 5th level (3 slots): cone of cold, scrying, wall of force\n- 6th level (1 slot): globe of invulnerability\n- 7th level (1 slot): teleport\n- 8th level (1 slot): mind blank*\n- 9th level (1 slot): time stop\n\n\\* The archmage casts these spells on itself before combat.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Dagger",
					"desc": "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Assassin",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any non-good alignment",
			"armor_class": 15,
			"hit_points": 78,
			"hit_dice": "12d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 16,
			"constitution": 14,
			"intelligence": 13,
			"wisdom": 11,
			"charisma": 10,
			"dexterity_save": 6,
			"intelligence_save": 4,
			"acrobatics": 6,
			"deception": 3,
			"perception": 3,
			"stealth": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "poison",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "Thieves' cant plus any two languages",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Assassinate",
					"desc": "During its first turn, the assassin has advantage on attack rolls against any creature that hasn't taken a turn. Any hit the assassin scores against a surprised creature is a critical hit.",
					"attack_bonus": 0
				},
				{
					"name": "Evasion",
					"desc": "If the assassin is subjected to an effect that allows it to make a Dexterity saving throw to take only half damage, the assassin instead takes no damage if it succeeds on the saving throw, and only half damage if it fails.",
					"attack_bonus": 0
				},
				{
					"name": "Sneak Attack (1/Turn)",
					"desc": "The assassin deals an extra 13 (4d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the assassin that isn't incapacitated and the assassin doesn't have disadvantage on the attack roll.",
					"attack_bonus": 0,
					"damage_dice": "4d6"
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The assassin makes two shortsword attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 6,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Light Crossbow",
					"desc": "Ranged Weapon Attack: +6 to hit, range 80/320 ft., one target. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Awakened Shrub",
			"size": "Small",
			"type": "plant",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 9,
			"hit_points": 10,
			"hit_dice": "3d6",
			"speed": "20 ft.",
			"strength": 3,
			"dexterity": 8,
			"constitution": 11,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 6,
			"damage_vulnerabilities": "fire",
			"damage_resistances": "piercing",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "one language known by its creator",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the shrub remains motionless, it is indistinguishable from a normal shrub.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Rake",
					"desc": "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 — 1) slashing damage.",
					"attack_bonus": 1,
					"damage_dice": "1d4",
					"damage_bonus": -1
				}
			]
		},
		{
			"name": "Awakened Tree",
			"size": "Huge",
			"type": "plant",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 59,
			"hit_dice": "7d12",
			"speed": "20 ft.",
			"strength": 19,
			"dexterity": 6,
			"constitution": 15,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 7,
			"damage_vulnerabilities": "fire",
			"damage_resistances": "bludgeoning, piercing",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "one language known by its creator",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the tree remains motionless, it is indistinguishable from a normal tree.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "3d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Axe Beak",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "50 ft.",
			"strength": 14,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Azer",
			"size": "Medium",
			"type": "elemental",
			"subtype": "",
			"alignment": "lawful neutral",
			"armor_class": 17,
			"hit_points": 39,
			"hit_dice": "6d8",
			"speed": "30 ft.",
			"strength": 17,
			"dexterity": 12,
			"constitution": 15,
			"intelligence": 12,
			"wisdom": 13,
			"charisma": 10,
			"constitution_save": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "passive Perception 11",
			"languages": "Ignan",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Heated Body",
					"desc": "A creature that touches the azer or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage.",
					"attack_bonus": 0,
					"damage_dice": "1d10"
				},
				{
					"name": "Heated Weapons",
					"desc": "When the azer hits with a metal melee weapon, it deals an extra 3 (1d6) fire damage (included in the attack).",
					"attack_bonus": 0
				},
				{
					"name": "Illumination",
					"desc": "The azer sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Warhammer",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage, or 8 (1d10 + 3) bludgeoning damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8 + 1d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Baboon",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 3,
			"hit_dice": "1d6",
			"speed": "30 ft., climb 30 ft.",
			"strength": 8,
			"dexterity": 14,
			"constitution": 11,
			"intelligence": 4,
			"wisdom": 12,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Pack Tactics",
					"desc": "The baboon has advantage on an attack roll against a creature if at least one of the baboon's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 — 1) piercing damage.",
					"attack_bonus": 1,
					"damage_dice": "1d4",
					"damage_bonus": -1
				}
			]
		},
		{
			"name": "Badger",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 3,
			"hit_dice": "1d4",
			"speed": "20 ft., burrow 5 ft.",
			"strength": 4,
			"dexterity": 11,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
					"attack_bonus": 2,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Balor",
			"size": "Huge",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 19,
			"hit_points": 262,
			"hit_dice": "21d12",
			"speed": "40 ft., fly 80 ft.",
			"strength": 26,
			"dexterity": 15,
			"constitution": 22,
			"intelligence": 20,
			"wisdom": 16,
			"charisma": 22,
			"strength_save": 14,
			"constitution_save": 12,
			"wisdom_save": 9,
			"charisma_save": 12,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "truesight 120 ft., passive Perception 13",
			"languages": "Abyssal, telepathy 120 ft.",
			"challenge_rating": "19",
			"special_abilities": [
				{
					"name": "Death Throes",
					"desc": "When the balor dies, it explodes, and each creature within 30 feet of it must make a DC 20 Dexterity saving throw, taking 70 (20d6) fire damage on a failed save, or half as much damage on a successful one. The explosion ignites flammable objects in that area that aren't being worn or carried, and it destroys the balor's weapons.",
					"attack_bonus": 0,
					"damage_dice": "20d6"
				},
				{
					"name": "Fire Aura",
					"desc": "At the start of each of the balor's turns, each creature within 5 feet of it takes 10 (3d6) fire damage, and flammable objects in the aura that aren't being worn or carried ignite. A creature that touches the balor or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
					"attack_bonus": 0,
					"damage_dice": "3d6"
				},
				{
					"name": "Magic Resistance",
					"desc": "The balor has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The balor's weapon attacks are magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The balor makes two attacks: one with its longsword and one with its whip.",
					"attack_bonus": 0
				},
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) slashing damage plus 13 (3d8) lightning damage. If the balor scores a critical hit, it rolls damage dice three times, instead of twice.",
					"attack_bonus": 14,
					"damage_dice": "3d8 + 3d8",
					"damage_bonus": 8
				},
				{
					"name": "Whip",
					"desc": "Melee Weapon Attack: +14 to hit, reach 30 ft., one target. Hit: 15 (2d6 + 8) slashing damage plus 10 (3d6) fire damage, and the target must succeed on a DC 20 Strength saving throw or be pulled up to 25 feet toward the balor.",
					"attack_bonus": 14,
					"damage_dice": "2d6 + 3d6",
					"damage_bonus": 8
				},
				{
					"name": "Teleport",
					"desc": "The balor magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Demon (1/Day)",
					"desc": "The demon chooses what to summon and attempts a magical summoning.\nA balor has a 50 percent chance of summoning 1d8 vrocks, 1d6 hezrous, 1d4 glabrezus, 1d3 nalfeshnees, 1d2 mariliths, or one goristro.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Bandit",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any non-lawful alignment",
			"armor_class": 12,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language (usually Common)",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Scimitar",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				},
				{
					"name": "Light Crossbow",
					"desc": "Ranged Weapon Attack: +3 to hit, range 80 ft./320 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Bandit Captain",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any non-lawful alignment",
			"armor_class": 15,
			"hit_points": 65,
			"hit_dice": "10d8",
			"speed": "30 ft.",
			"strength": 15,
			"dexterity": 16,
			"constitution": 14,
			"intelligence": 14,
			"wisdom": 11,
			"charisma": 14,
			"strength_save": 4,
			"dexterity_save": 5,
			"wisdom_save": 2,
			"athletics": 4,
			"deception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any two languages",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The captain makes three melee attacks: two with its scimitar and one with its dagger. Or the captain makes two ranged attacks with its daggers.",
					"attack_bonus": 0
				},
				{
					"name": "Scimitar",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Dagger",
					"desc": "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 3
				}
			],
			"reactions": [
				{
					"name": "Parry",
					"desc": "The captain adds 2 to its AC against one melee attack that would hit it. To do so, the captain must see the attacker and be wielding a melee weapon.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Barbed Devil",
			"size": "Medium",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 15,
			"hit_points": 110,
			"hit_dice": "13d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 17,
			"constitution": 18,
			"intelligence": 12,
			"wisdom": 14,
			"charisma": 14,
			"strength_save": 6,
			"constitution_save": 7,
			"wisdom_save": 5,
			"charisma_save": 5,
			"deception": 5,
			"insight": 5,
			"perception": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 18",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Barbed Hide",
					"desc": "At the start of each of its turns, the barbed devil deals 5 (1d10) piercing damage to any creature grappling it.",
					"attack_bonus": 0,
					"damage_dice": "1d10"
				},
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the devil's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The devil has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The devil makes three melee attacks: one with its tail and two with its claws. Alternatively, it can use Hurl Flame twice.",
					"attack_bonus": 0
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft ., one target. Hit: 6 (1d6 + 3) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Hurl Flame",
					"desc": "Ranged Spell Attack: +5 to hit, range 150 ft., one target. Hit: 10 (3d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
					"attack_bonus": 5,
					"damage_dice": "3d6"
				}
			]
		},
		{
			"name": "Basilisk",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 52,
			"hit_dice": "8d8",
			"speed": "20 ft.",
			"strength": 16,
			"dexterity": 8,
			"constitution": 15,
			"intelligence": 2,
			"wisdom": 8,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Petrifying Gaze",
					"desc": "If a creature starts its turn within 30 ft. of the basilisk and the two of them can see each other, the basilisk can force the creature to make a DC 12 Constitution saving throw if the basilisk isn't incapacitated. On a failed save, the creature magically begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified until freed by the greater restoration spell or other magic.\nA creature that isn't surprised can avert its eyes to avoid the saving throw at the start of its turn. If it does so, it can't see the basilisk until the start of its next turn, when it can avert its eyes again. If it looks at the basilisk in the meantime, it must immediately make the save.\nIf the basilisk sees its reflection within 30 ft. of it in bright light, it mistakes itself for a rival and targets itself with its gaze.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage plus 7 (2d6) poison damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6 + 2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Bat",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "5 ft., fly 30 ft.",
			"strength": 2,
			"dexterity": 15,
			"constitution": 8,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Echolocation",
					"desc": "The bat can't use its blindsight while deafened.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing",
					"desc": "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +0 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
					"attack_bonus": 0,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Bearded Devil",
			"size": "Medium",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 13,
			"hit_points": 52,
			"hit_dice": "8d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 15,
			"constitution": 15,
			"intelligence": 9,
			"wisdom": 11,
			"charisma": 11,
			"strength_save": 5,
			"constitution_save": 4,
			"wisdom_save": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 10",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the devil's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The devil has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Steadfast",
					"desc": "The devil can't be frightened while it can see an allied creature within 30 feet of it.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The devil makes two attacks: one with its beard and one with its glaive.",
					"attack_bonus": 0
				},
				{
					"name": "Beard",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. While poisoned in this way, the target can't regain hit points. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Glaive",
					"desc": "Melee Weapon Attack: +5 to hit, reach 10 ft., one target. Hit: 8 (1d10 + 3) slashing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 12 Constitution saving throw or lose 5 (1d10) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 5 (1d10). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
					"attack_bonus": 5,
					"damage_dice": "1d10",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Behir",
			"size": "Huge",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 17,
			"hit_points": 168,
			"hit_dice": "16d12",
			"speed": "50 ft., climb 40 ft.",
			"strength": 23,
			"dexterity": 16,
			"constitution": 18,
			"intelligence": 7,
			"wisdom": 14,
			"charisma": 12,
			"perception": 6,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "darkvision 90 ft., passive Perception 16",
			"languages": "Draconic",
			"challenge_rating": "11",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The behir makes two attacks: one with its bite and one to constrict.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
					"attack_bonus": 10,
					"damage_dice": "3d10",
					"damage_bonus": 6
				},
				{
					"name": "Constrict",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one Large or smaller creature. Hit: 17 (2d10 + 6) bludgeoning damage plus 17 (2d10 + 6) slashing damage. The target is grappled (escape DC 16) if the behir isn't already constricting a creature, and the target is restrained until this grapple ends.",
					"attack_bonus": 10,
					"damage_dice": "2d10 + 2d10",
					"damage_bonus": 6
				},
				{
					"name": "Lightning Breath (Recharge 5-6)",
					"desc": "The behir exhales a line of lightning that is 20 ft. long and 5 ft. wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d10"
				},
				{
					"name": "Swallow",
					"desc": "The behir makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is also swallowed, and the grapple ends. While swallowed, the target is blinded and restrained, it has total cover against attacks and other effects outside the behir, and it takes 21 (6d6) acid damage at the start of each of the behir's turns. A behir can have only one creature swallowed at a time.\nIf the behir takes 30 damage or more on a single turn from the swallowed creature, the behir must succeed on a DC 14 Constitution saving throw at the end of that turn or regurgitate the creature, which falls prone in a space within 10 ft. of the behir. If the behir dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 15 ft. of movement, exiting prone.",
					"attack_bonus": 0,
					"damage_dice": "6d6"
				}
			]
		},
		{
			"name": "Berserker",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any chaotic alignment",
			"armor_class": 13,
			"hit_points": 67,
			"hit_dice": "9d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 12,
			"constitution": 17,
			"intelligence": 9,
			"wisdom": 11,
			"charisma": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language (usually Common)",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Reckless",
					"desc": "At the start of its turn, the berserker can gain advantage on all melee weapon attack rolls during that turn, but attack rolls against it have advantage until the start of its next turn.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Greataxe",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d12",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Black Bear",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 19,
			"hit_dice": "3d8",
			"speed": "40 ft., climb 30 ft.",
			"strength": 15,
			"dexterity": 10,
			"constitution": 14,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The bear makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "2d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Black Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 17,
			"hit_points": 33,
			"hit_dice": "6d8",
			"speed": "30 ft., fly 60 ft., swim 30 ft.",
			"strength": 15,
			"dexterity": 14,
			"constitution": 13,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 13,
			"dexterity_save": 4,
			"constitution_save": 3,
			"wisdom_save": 2,
			"charisma_save": 3,
			"perception": 4,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) acid damage.",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				},
				{
					"name": "Acid Breath (Recharge 5-6)",
					"desc": "The dragon exhales acid in a 15-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 22 (Sd8) acid damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "5d8"
				}
			]
		},
		{
			"name": "Black Pudding",
			"size": "Large",
			"type": "ooze",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 7,
			"hit_points": 85,
			"hit_dice": "10d10",
			"speed": "20 ft., climb 20 ft.",
			"strength": 16,
			"dexterity": 5,
			"constitution": 16,
			"intelligence": 1,
			"wisdom": 6,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid, cold, lightning, slashing",
			"condition_immunities": "blinded, charmed, deafened, exhaustion, frightened, prone",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
			"languages": "",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Amorphous",
					"desc": "The pudding can move through a space as narrow as 1 inch wide without squeezing.",
					"attack_bonus": 0
				},
				{
					"name": "Corrosive Form",
					"desc": "A creature that touches the pudding or hits it with a melee attack while within 5 feet of it takes 4 (1d8) acid damage. Any nonmagical weapon made of metal or wood that hits the pudding corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal or wood that hits the pudding is destroyed after dealing damage. The pudding can eat through 2-inch-thick, nonmagical wood or metal in 1 round.",
					"attack_bonus": 0,
					"damage_dice": "1d8"
				},
				{
					"name": "Spider Climb",
					"desc": "The pudding can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Pseudopod",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage plus 18 (4d8) acid damage. In addition, nonmagical armor worn by the target is partly dissolved and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
					"attack_bonus": 5,
					"damage_dice": "1d6 + 4d8",
					"damage_bonus": 3
				}
			],
			"reactions": [
				{
					"name": "Split",
					"desc": "When a pudding that is Medium or larger is subjected to lightning or slashing damage, it splits into two new puddings if it has at least 10 hit points. Each new pudding has hit points equal to half the original pudding's, rounded down. New puddings are one size smaller than the original pudding.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Blink Dog",
			"size": "Medium",
			"type": "fey",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 13,
			"hit_points": 22,
			"hit_dice": "4d8",
			"speed": "40 ft.",
			"strength": 12,
			"dexterity": 17,
			"constitution": 12,
			"intelligence": 10,
			"wisdom": 13,
			"charisma": 11,
			"perception": 3,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "Blink Dog, understands Sylvan but can't speak it",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The dog has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				},
				{
					"name": "Teleport (Recharge 4-6)",
					"desc": "The dog magically teleports, along with any equipment it is wearing or carrying, up to 40 ft. to an unoccupied space it can see. Before or after teleporting, the dog can make one bite attack.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Blood Hawk",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 7,
			"hit_dice": "2d6",
			"speed": "10 ft., fly 60 ft.",
			"strength": 6,
			"dexterity": 14,
			"constitution": 10,
			"intelligence": 3,
			"wisdom": 14,
			"charisma": 5,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The hawk has advantage on an attack roll against a creature if at least one of the hawk's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Blue Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 17,
			"hit_points": 52,
			"hit_dice": "8d8",
			"speed": "30 ft., burrow 15 ft., fly 60 ft.",
			"strength": 17,
			"dexterity": 10,
			"constitution": 15,
			"intelligence": 12,
			"wisdom": 11,
			"charisma": 15,
			"dexterity_save": 2,
			"constitution_save": 4,
			"wisdom_save": 2,
			"charisma_save": 4,
			"perception": 4,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "3",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage plus 3 (1d6) lightning damage.",
					"attack_bonus": 5,
					"damage_dice": "1d10 + 1d6",
					"damage_bonus": 3
				},
				{
					"name": "Lightning Breath (Recharge 5-6)",
					"desc": "The dragon exhales lightning in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "4d10"
				}
			]
		},
		{
			"name": "Boar",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "40 ft.",
			"strength": 13,
			"dexterity": 11,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 9,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 9",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 3 (1d6) slashing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "1d6"
				},
				{
					"name": "Relentless (Recharges after a Short or Long Rest)",
					"desc": "If the boar takes 7 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Tusk",
					"desc": "Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Bone Devil",
			"size": "Large",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 19,
			"hit_points": 142,
			"hit_dice": "15d10",
			"speed": "40 ft., fly 40 ft.",
			"strength": 18,
			"dexterity": 16,
			"constitution": 18,
			"intelligence": 13,
			"wisdom": 14,
			"charisma": 16,
			"intelligence_save": 5,
			"wisdom_save": 6,
			"charisma_save": 7,
			"deception": 7,
			"insight": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 9",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "12",
			"special_abilities": [
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the devil's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The devil has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The devil makes three attacks: two with its claws and one with its sting.",
					"attack_bonus": 0
				},
				{
					"name": "Multiattack",
					"desc": "The devil makes three attacks: two with its claws and one with its sting.",
					"attack_bonus": 0
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
					"attack_bonus": 8,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
					"attack_bonus": 8,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Sting",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
					"attack_bonus": 8,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Sting",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
					"attack_bonus": 8,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Brass Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 16,
			"hit_points": 16,
			"hit_dice": "3d8",
			"speed": "30 ft., burrow 15 ft., fly 60 ft.",
			"strength": 15,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 13,
			"dexterity_save": 2,
			"constitution_save": 3,
			"wisdom_save": 2,
			"charisma_save": 3,
			"perception": 4,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "1",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 14 (4d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 15-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw or fall unconscious for 1 minute. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
					"attack_bonus": 0,
					"damage_dice": "4d6"
				}
			]
		},
		{
			"name": "Bronze Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 17,
			"hit_points": 32,
			"hit_dice": "5d8",
			"speed": "30 ft., fly 60 ft., swim 30 ft.",
			"strength": 17,
			"dexterity": 10,
			"constitution": 15,
			"intelligence": 12,
			"wisdom": 11,
			"charisma": 15,
			"dexterity_save": 2,
			"constitution_save": 4,
			"wisdom_save": 2,
			"charisma_save": 4,
			"perception": 4,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d10",
					"damage_bonus": 3
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 16 (3d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 12 Strength saving throw. On a failed save, the creature is pushed 30 feet away from the dragon.",
					"attack_bonus": 0,
					"damage_dice": "3d10"
				}
			]
		},
		{
			"name": "Brown Bear",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 34,
			"hit_dice": "4d10",
			"speed": "40 ft., climb 30 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 16,
			"intelligence": 2,
			"wisdom": 13,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The bear makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Bugbear",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "goblinoid",
			"alignment": "chaotic evil",
			"armor_class": 16,
			"hit_points": 27,
			"hit_dice": "5d8",
			"speed": "30 ft.",
			"strength": 15,
			"dexterity": 14,
			"constitution": 13,
			"intelligence": 8,
			"wisdom": 11,
			"charisma": 9,
			"stealth": 6,
			"survival": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Common, Goblin",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Brute",
					"desc": "A melee weapon deals one extra die of its damage when the bugbear hits with it (included in the attack).",
					"attack_bonus": 0
				},
				{
					"name": "Surprise Attack",
					"desc": "If the bugbear surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 7 (2d6) damage from the attack.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				}
			],
			"actions": [
				{
					"name": "Morningstar",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 11 (2d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d8",
					"damage_bonus": 2
				},
				{
					"name": "Javelin",
					"desc": "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 9 (2d6 + 2) piercing damage in melee or 5 (1d6 + 2) piercing damage at range.",
					"attack_bonus": 4,
					"damage_dice": "2d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Bulette",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 17,
			"hit_points": 94,
			"hit_dice": "9d10",
			"speed": "40 ft., burrow 40 ft.",
			"strength": 19,
			"dexterity": 11,
			"constitution": 21,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"perception": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Standing Leap",
					"desc": "The bulette's long jump is up to 30 ft. and its high jump is up to 15 ft., with or without a running start.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 30 (4d12 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "4d12",
					"damage_bonus": 4
				},
				{
					"name": "Deadly Leap",
					"desc": "If the bulette jumps at least 15 ft. as part of its movement, it can then use this action to land on its ft. in a space that contains one or more other creatures. Each of those creatures must succeed on a DC 16 Strength or Dexterity saving throw (target's choice) or be knocked prone and take 14 (3d6 + 4) bludgeoning damage plus 14 (3d6 + 4) slashing damage. On a successful save, the creature takes only half the damage, isn't knocked prone, and is pushed 5 ft. out of the bulette's space into an unoccupied space of the creature's choice. If no unoccupied space is within range, the creature instead falls prone in the bulette's space.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Camel",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 9,
			"hit_points": 15,
			"hit_dice": "2d10",
			"speed": "50 ft.",
			"strength": 16,
			"dexterity": 8,
			"constitution": 14,
			"intelligence": 2,
			"wisdom": 8,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 9",
			"languages": "",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4"
				}
			]
		},
		{
			"name": "Carrion Crawler",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 51,
			"hit_dice": "6d10",
			"speed": "30 ft., climb 30 ft.",
			"strength": 14,
			"dexterity": 13,
			"constitution": 16,
			"intelligence": 1,
			"wisdom": 12,
			"charisma": 5,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The carrion crawler has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The carrion crawler can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The carrion crawler makes two attacks: one with its tentacles and one with its bite.",
					"attack_bonus": 0
				},
				{
					"name": "Tentacles",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 4 (1d4 + 2) poison damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the poison on itself on a success.",
					"attack_bonus": 8,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Cat",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 2,
			"hit_dice": "1d4",
			"speed": "40 ft., climb 30 ft.",
			"strength": 3,
			"dexterity": 15,
			"constitution": 10,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The cat has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
					"attack_bonus": 0,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Cave Bear",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 42,
			"hit_dice": "5d10",
			"speed": "40 ft., swim 30 ft.",
			"strength": 20,
			"dexterity": 10,
			"constitution": 16,
			"intelligence": 2,
			"wisdom": 13,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The bear makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d8",
					"damage_bonus": 5
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Centaur",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral good",
			"armor_class": 12,
			"hit_points": 45,
			"hit_dice": "6d10",
			"speed": "50 ft.",
			"strength": 18,
			"dexterity": 14,
			"constitution": 14,
			"intelligence": 9,
			"wisdom": 13,
			"charisma": 11,
			"athletics": 6,
			"perception": 3,
			"survival": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "Elvish, Sylvan",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the centaur moves at least 30 ft. straight toward a target and then hits it with a pike attack on the same turn, the target takes an extra 10 (3d6) piercing damage.",
					"attack_bonus": 0,
					"damage_dice": "3d6"
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The centaur makes two attacks: one with its pike and one with its hooves or two with its longbow.",
					"attack_bonus": 0
				},
				{
					"name": "Pike",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d10",
					"damage_bonus": 4
				},
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Chain Devil",
			"size": "Medium",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 16,
			"hit_points": 85,
			"hit_dice": "10d8",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 18,
			"intelligence": 11,
			"wisdom": 12,
			"charisma": 14,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 8",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the devil's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The devil has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The devil makes two attacks with its chains.",
					"attack_bonus": 0
				},
				{
					"name": "Chain",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) slashing damage. The target is grappled (escape DC 14) if the devil isn't already grappling a creature. Until this grapple ends, the target is restrained and takes 7 (2d6) piercing damage at the start of each of its turns.",
					"attack_bonus": 8,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Animate Chains (Recharges after a Short or Long Rest)",
					"desc": "Up to four chains the devil can see within 60 feet of it magically sprout razor-edged barbs and animate under the devil's control, provided that the chains aren't being worn or carried.\nEach animated chain is an object with AC 20, 20 hit points, resistance to piercing damage, and immunity to psychic and thunder damage. When the devil uses Multiattack on its turn, it can use each animated chain to make one additional chain attack. An animated chain can grapple one creature of its own but can't make attacks while grappling. An animated chain reverts to its inanimate state if reduced to 0 hit points or if the devil is incapacitated or dies.",
					"attack_bonus": 0
				}
			],
			"reactions": [
				{
					"name": "Unnerving Mask",
					"desc": "When a creature the devil can see starts its turn within 30 feet of the devil, the devil can create the illusion that it looks like one of the creature's departed loved ones or bitter enemies. If the creature can see the devil, it must succeed on a DC 14 Wisdom saving throw or be frightened until the end of its turn.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Chimera",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 14,
			"hit_points": 114,
			"hit_dice": "12d10",
			"speed": "30 ft., fly 60 ft.",
			"strength": 19,
			"dexterity": 11,
			"constitution": 19,
			"intelligence": 3,
			"wisdom": 14,
			"charisma": 10,
			"perception": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 18",
			"languages": "understands Draconic but can't speak",
			"challenge_rating": "6",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The chimera makes three attacks: one with its bite, one with its horns, and one with its claws. When its fire breath is available, it can use the breath in place of its bite or horns.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Horns",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "1d12",
					"damage_bonus": 4
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The dragon head exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 31 (7d8) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "7d8"
				}
			]
		},
		{
			"name": "Chuul",
			"size": "Large",
			"type": "aberration",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 16,
			"hit_points": 93,
			"hit_dice": "11d10",
			"speed": "30 ft., swim 30 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 16,
			"intelligence": 5,
			"wisdom": 11,
			"charisma": 5,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "understands Deep Speech but can't speak",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The chuul can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Sense Magic",
					"desc": "The chuul senses magic within 120 feet of it at will. This trait otherwise works like the detect magic spell but isn't itself magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The chuul makes two pincer attacks. If the chuul is grappling a creature, the chuul can also use its tentacles once.",
					"attack_bonus": 0
				},
				{
					"name": "Pincer",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage. The target is grappled (escape DC 14) if it is a Large or smaller creature and the chuul doesn't have two other creatures grappled.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Tentacles",
					"desc": "One creature grappled by the chuul must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Clay Golem",
			"size": "Large",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 133,
			"hit_dice": "14d10",
			"speed": "20 ft.",
			"strength": 20,
			"dexterity": 9,
			"constitution": 18,
			"intelligence": 3,
			"wisdom": 8,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "understands the languages of its creator but can't speak",
			"challenge_rating": "9",
			"special_abilities": [
				{
					"name": "Acid Absorption",
					"desc": "Whenever the golem is subjected to acid damage, it takes no damage and instead regains a number of hit points equal to the acid damage dealt.",
					"attack_bonus": 0
				},
				{
					"name": "Berserk",
					"desc": "Whenever the golem starts its turn with 60 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Immutable Form",
					"desc": "The golem is immune to any spell or effect that would alter its form.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The golem has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The golem's weapon attacks are magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The golem makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw or have its hit point maximum reduced by an amount equal to the damage taken. The target dies if this attack reduces its hit point maximum to 0. The reduction lasts until removed by the greater restoration spell or other magic.",
					"attack_bonus": 8,
					"damage_dice": "2d10",
					"damage_bonus": 5
				},
				{
					"name": "Haste (Recharge 5-6)",
					"desc": "Until the end of its next turn, the golem magically gains a +2 bonus to its AC, has advantage on Dexterity saving throws, and can use its slam attack as a bonus action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Cloaker",
			"size": "Large",
			"type": "aberration",
			"subtype": "",
			"alignment": "chaotic neutral",
			"armor_class": 14,
			"hit_points": 78,
			"hit_dice": "12d10",
			"speed": "10 ft., fly 40 ft.",
			"strength": 17,
			"dexterity": 15,
			"constitution": 12,
			"intelligence": 13,
			"wisdom": 12,
			"charisma": 14,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "Deep Speech, Undercommon",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Damage Transfer",
					"desc": "While attached to a creature, the cloaker takes only half the damage dealt to it (rounded down). and that creature takes the other half.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance",
					"desc": "While the cloaker remains motionless without its underside exposed, it is indistinguishable from a dark leather cloak.",
					"attack_bonus": 0
				},
				{
					"name": "Light Sensitivity",
					"desc": "While in bright light, the cloaker has disadvantage on attack rolls and Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The cloaker makes two attacks: one with its bite and one with its tail.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 10 (2d6 + 3) piercing damage, and if the target is Large or smaller, the cloaker attaches to it. If the cloaker has advantage against the target, the cloaker attaches to the target's head, and the target is blinded and unable to breathe while the cloaker is attached. While attached, the cloaker can make this attack only against the target and has advantage on the attack roll. The cloaker can detach itself by spending 5 feet of its movement. A creature, including the target, can take its action to detach the cloaker by succeeding on a DC 16 Strength check.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 7 (1d8 + 3) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Moan",
					"desc": "Each creature within 60 feet of the cloaker that can hear its moan and that isn't an aberration must succeed on a DC 13 Wisdom saving throw or become frightened until the end of the cloaker's next turn. If a creature's saving throw is successful, the creature is immune to the cloaker's moan for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Phantasms (Recharges after a Short or Long Rest)",
					"desc": "The cloaker magically creates three illusory duplicates of itself if it isn't in bright light. The duplicates move with it and mimic its actions, shifting position so as to make it impossible to track which cloaker is the real one. If the cloaker is ever in an area of bright light, the duplicates disappear.\nWhenever any creature targets the cloaker with an attack or a harmful spell while a duplicate remains, that creature rolls randomly to determine whether it targets the cloaker or one of the duplicates. A creature is unaffected by this magical effect if it can't see or if it relies on senses other than sight.\nA duplicate has the cloaker's AC and uses its saving throws. If an attack hits a duplicate, or if a duplicate fails a saving throw against an effect that deals damage, the duplicate disappears.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Cloud Giant",
			"size": "Huge",
			"type": "giant",
			"subtype": "",
			"alignment": "neutral good (50%) or neutral evil (50%)",
			"armor_class": 14,
			"hit_points": 200,
			"hit_dice": "16d12",
			"speed": "40 ft.",
			"strength": 27,
			"dexterity": 10,
			"constitution": 22,
			"intelligence": 12,
			"wisdom": 16,
			"charisma": 16,
			"constitution_save": 10,
			"wisdom_save": 7,
			"charisma_save": 7,
			"insight": 7,
			"perception": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 17",
			"languages": "Common, Giant",
			"challenge_rating": "9",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The giant has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The giant's innate spellcasting ability is Charisma. It can innately cast the following spells, requiring no material components:\n\nAt will: detect magic, fog cloud, light\n3/day each: feather fall, fly, misty step, telekinesis\n1/day each: control weather, gaseous form",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The giant makes two morningstar attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Morningstar",
					"desc": "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) piercing damage.",
					"attack_bonus": 12,
					"damage_dice": "3d8",
					"damage_bonus": 8
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +12 to hit, range 60/240 ft., one target. Hit: 30 (4d10 + 8) bludgeoning damage.",
					"attack_bonus": 12,
					"damage_dice": "4d10",
					"damage_bonus": 8
				}
			]
		},
		{
			"name": "Cockatrice",
			"size": "Small",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 27,
			"hit_dice": "6d6",
			"speed": "20 ft., fly 40 ft.",
			"strength": 6,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 13,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "1/2",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) piercing damage, and the target must succeed on a DC 11 Constitution saving throw against being magically petrified. On a failed save, the creature begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified for 24 hours.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Commoner",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 10,
			"hit_points": 4,
			"hit_dice": "1d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 10,
			"constitution": 10,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language (usually Common)",
			"challenge_rating": "0",
			"actions": [
				{
					"name": "Club",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
					"attack_bonus": 2,
					"damage_dice": "1d4"
				}
			]
		},
		{
			"name": "Constrictor Snake",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 13,
			"hit_dice": "2d10",
			"speed": "30 ft., swim 30 ft.",
			"strength": 15,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Constrict",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 14). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Copper Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 16,
			"hit_points": 22,
			"hit_dice": "4d8",
			"speed": "30 ft., climb 30 ft., fly 60 ft.",
			"strength": 15,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 14,
			"wisdom": 11,
			"charisma": 13,
			"dexterity_save": 3,
			"constitution_save": 3,
			"wisdom_save": 2,
			"charisma_save": 3,
			"perception": 4,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "1",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 18 (4d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 1 5-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
					"attack_bonus": 0,
					"damage_dice": "4d8"
				}
			]
		},
		{
			"name": "Couatl",
			"size": "Medium",
			"type": "celestial",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 19,
			"hit_points": 97,
			"hit_dice": "13d8",
			"speed": "30 ft., fly 90 ft.",
			"strength": 16,
			"dexterity": 20,
			"constitution": 17,
			"intelligence": 18,
			"wisdom": 20,
			"charisma": 18,
			"constitution_save": 5,
			"wisdom_save": 7,
			"charisma_save": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "radiant",
			"damage_immunities": "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "",
			"senses": "truesight 120 ft., passive Perception 15",
			"languages": "all, telepathy 120 ft.",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Innate Spellcasting",
					"desc": "The couatl's spellcasting ability is Charisma (spell save DC 14). It can innately cast the following spells, requiring only verbal components:\n\nAt will: detect evil and good, detect magic, detect thoughts\n3/day each: bless, create food and water, cure wounds, lesser restoration, protection from poison, sanctuary, shield\n1/day each: dream, greater restoration, scrying",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The couatl's weapon attacks are magical.",
					"attack_bonus": 0
				},
				{
					"name": "Shielded Mind",
					"desc": "The couatl is immune to scrying and to any effect that would sense its emotions, read its thoughts, or detect its location.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one creature. Hit: 8 (1d6 + 5) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 24 hours. Until this poison ends, the target is unconscious. Another creature can use an action to shake the target awake.",
					"attack_bonus": 8,
					"damage_dice": "1d6",
					"damage_bonus": 5
				},
				{
					"name": "Constrict",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one Medium or smaller creature. Hit: 10 (2d6 + 3) bludgeoning damage, and the target is grappled (escape DC 15). Until this grapple ends, the target is restrained, and the couatl can't constrict another target.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Change Shape",
					"desc": "The couatl magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the couatl's choice).\nIn a new form, the couatl retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and other actions are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks. If the new form has a bite attack, the couatl can use its bite in that form.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Crab",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 2,
			"hit_dice": "1d4",
			"speed": "20 ft., swim 20 ft.",
			"strength": 2,
			"dexterity": 11,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 8,
			"charisma": 2,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The crab can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage.",
					"attack_bonus": 0,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Crocodile",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "20 ft., swim 20 ft.",
			"strength": 15,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "The crocodile can hold its breath for 15 minutes.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target is grappled (escape DC 12). Until this grapple ends, the target is restrained, and the crocodile can't bite another target",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Cult Fanatic",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any non-good alignment",
			"armor_class": 13,
			"hit_points": 22,
			"hit_dice": "6d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 10,
			"wisdom": 13,
			"charisma": 14,
			"deception": 4,
			"persuasion": 4,
			"religion": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "any one language (usually Common)",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Dark Devotion",
					"desc": "The fanatic has advantage on saving throws against being charmed or frightened.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The fanatic is a 4th-level spellcaster. Its spell casting ability is Wisdom (spell save DC 11, +3 to hit with spell attacks). The fanatic has the following cleric spells prepared:\n\nCantrips (at will): light, sacred flame, thaumaturgy\n- 1st level (4 slots): command, inflict wounds, shield of faith\n- 2nd level (3 slots): hold person, spiritual weapon",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The fanatic makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Dagger",
					"desc": "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Cultist",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any non-good alignment",
			"armor_class": 12,
			"hit_points": 9,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 12,
			"constitution": 10,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 10,
			"deception": 2,
			"religion": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language (usually Common)",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Dark Devotion",
					"desc": "The cultist has advantage on saving throws against being charmed or frightened.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Scimitar",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Darkmantle",
			"size": "Small",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 22,
			"hit_dice": "5d6",
			"speed": "10 ft., fly 30 ft.",
			"strength": 16,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Echolocation",
					"desc": "The darkmantle can't use its blindsight while deafened.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance",
					"desc": "While the darkmantle remains motionless, it is indistinguishable from a cave formation such as a stalactite or stalagmite.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Crush",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d6 + 3) bludgeoning damage, and the darkmantle attaches to the target. If the target is Medium or smaller and the darkmantle has advantage on the attack roll, it attaches by engulfing the target's head, and the target is also blinded and unable to breathe while the darkmantle is attached in this way.\nWhile attached to the target, the darkmantle can attack no other creature except the target but has advantage on its attack rolls. The darkmantle's speed also becomes 0, it can't benefit from any bonus to its speed, and it moves with the target.\nA creature can detach the darkmantle by making a successful DC 13 Strength check as an action. On its turn, the darkmantle can detach itself from the target by using 5 feet of movement.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Darkness Aura (1/day)",
					"desc": "A 15-foot radius of magical darkness extends out from the darkmantle, moves with it, and spreads around corners. The darkness lasts as long as the darkmantle maintains concentration, up to 10 minutes (as if concentrating on a spell). Darkvision can't penetrate this darkness, and no natural light can illuminate it. If any of the darkness overlaps with an area of light created by a spell of 2nd level or lower, the spell creating the light is dispelled.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Death Dog",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 12,
			"hit_points": 39,
			"hit_dice": "6d8",
			"speed": "40 ft.",
			"strength": 15,
			"dexterity": 14,
			"constitution": 14,
			"intelligence": 3,
			"wisdom": 13,
			"charisma": 6,
			"perception": 5,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 15",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Two-Headed",
					"desc": "The dog has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, or knocked unconscious.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dog makes two bite attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the creature must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. This reduction lasts until the disease is cured. The creature dies if the disease reduces its hit point maximum to 0.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Deep Gnome (Svirfneblin)",
			"size": "Small",
			"type": "humanoid",
			"subtype": "gnome",
			"alignment": "neutral good",
			"armor_class": 15,
			"hit_points": 16,
			"hit_dice": "3d6",
			"speed": "20 ft.",
			"strength": 15,
			"dexterity": 14,
			"constitution": 14,
			"intelligence": 12,
			"wisdom": 10,
			"charisma": 9,
			"investigation": 3,
			"perception": 2,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 12",
			"languages": "Gnomish, Terran, Undercommon",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Stone Camouflage",
					"desc": "The gnome has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
					"attack_bonus": 0
				},
				{
					"name": "Gnome Cunning",
					"desc": "The gnome has advantage on Intelligence, Wisdom, and Charisma saving throws against magic.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The gnome's innate spellcasting ability is Intelligence (spell save DC 11). It can innately cast the following spells, requiring no material components:\nAt will: nondetection (self only)\n1/day each: blindness/deafness, blur, disguise self",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "War Pick",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Poisoned Dart",
					"desc": "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Deer",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 4,
			"hit_dice": "1d8",
			"speed": "50 ft.",
			"strength": 11,
			"dexterity": 16,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 14,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "",
			"challenge_rating": "0",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "1d4"
				}
			]
		},
		{
			"name": "Deva",
			"size": "Medium",
			"type": "celestial",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 17,
			"hit_points": 136,
			"hit_dice": "16d8",
			"speed": "30 ft., fly 90 ft.",
			"strength": 18,
			"dexterity": 18,
			"constitution": 18,
			"intelligence": 17,
			"wisdom": 20,
			"charisma": 20,
			"wisdom_save": 9,
			"charisma_save": 9,
			"insight": 9,
			"perception": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "",
			"condition_immunities": "charmed, exhaustion, frightened",
			"senses": "darkvision 120 ft., passive Perception 19",
			"languages": "all, telepathy 120 ft.",
			"challenge_rating": "10",
			"special_abilities": [
				{
					"name": "Angelic Weapons",
					"desc": "The deva's weapon attacks are magical. When the deva hits with any weapon, the weapon deals an extra 4d8 radiant damage (included in the attack).",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The deva's spellcasting ability is Charisma (spell save DC 17). The deva can innately cast the following spells, requiring only verbal components:\nAt will: detect evil and good\n1/day each: commune, raise dead",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The deva has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The deva makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Mace",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage plus 18 (4d8) radiant damage.",
					"attack_bonus": 8,
					"damage_dice": "1d6 + 4d8",
					"damage_bonus": 4
				},
				{
					"name": "Healing Touch (3/Day)",
					"desc": "The deva touches another creature. The target magically regains 20 (4d8 + 2) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
					"attack_bonus": 0
				},
				{
					"name": "Change Shape",
					"desc": "The deva magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the deva's choice).\nIn a new form, the deva retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and special senses are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Dire Wolf",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 37,
			"hit_dice": "5d10",
			"speed": "50 ft.",
			"strength": 17,
			"dexterity": 15,
			"constitution": 15,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Djinni",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 17,
			"hit_points": 161,
			"hit_dice": "14d10",
			"speed": "30 ft., fly 90 ft.",
			"strength": 21,
			"dexterity": 15,
			"constitution": 22,
			"intelligence": 15,
			"wisdom": 16,
			"charisma": 20,
			"dexterity_save": 6,
			"wisdom_save": 7,
			"charisma_save": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning, thunder",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 13",
			"languages": "Auran",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Elemental Demise",
					"desc": "If the djinni dies, its body disintegrates into a warm breeze, leaving behind only equipment the djinni was wearing or carrying.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The djinni's innate spellcasting ability is Charisma (spell save DC 17, +9 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\n\nAt will: detect evil and good, detect magic, thunderwave 3/day each: create food and water (can create wine instead of water), tongues, wind walk\n1/day each: conjure elemental (air elemental only), creation, gaseous form, invisibility, major image, plane shift",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Genie Powers",
					"desc": "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\n\nDisguises.\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\nWishes.\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The djinni makes three scimitar attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Scimitar",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage plus 3 (1d6) lightning or thunder damage (djinni's choice).",
					"attack_bonus": 9,
					"damage_dice": "2d6 + 1d6",
					"damage_bonus": 5
				},
				{
					"name": "Create Whirlwind",
					"desc": "A 5-foot-radius, 30-foot-tall cylinder of swirling air magically forms on a point the djinni can see within 120 feet of it. The whirlwind lasts as long as the djinni maintains concentration (as if concentrating on a spell). Any creature but the djinni that enters the whirlwind must succeed on a DC 18 Strength saving throw or be restrained by it. The djinni can move the whirlwind up to 60 feet as an action, and creatures restrained by the whirlwind move with it. The whirlwind ends if the djinni loses sight of it.\nA creature can use its action to free a creature restrained by the whirlwind, including itself, by succeeding on a DC 18 Strength check. If the check succeeds, the creature is no longer restrained and moves to the nearest space outside the whirlwind.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Doppelganger",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "shapechanger",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 52,
			"hit_dice": "8d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 18,
			"constitution": 14,
			"intelligence": 11,
			"wisdom": 12,
			"charisma": 14,
			"deception": 6,
			"insight": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "charmed",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "Common",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The doppelganger can use its action to polymorph into a Small or Medium humanoid it has seen, or back into its true form. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Ambusher",
					"desc": "The doppelganger has advantage on attack rolls against any creature it has surprised.",
					"attack_bonus": 0
				},
				{
					"name": "Surprise Attack",
					"desc": "If the doppelganger surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 10 (3d6) damage from the attack.",
					"attack_bonus": 0,
					"damage_dice": "3d6"
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The doppelganger makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "1d6",
					"damage_bonus": 4
				},
				{
					"name": "Read Thoughts",
					"desc": "The doppelganger magically reads the surface thoughts of one creature within 60 ft. of it. The effect can penetrate barriers, but 3 ft. of wood or dirt, 2 ft. of stone, 2 inches of metal, or a thin sheet of lead blocks it. While the target is in range, the doppelganger can continue reading its thoughts, as long as the doppelganger's concentration isn't broken (as if concentrating on a spell). While reading the target's mind, the doppelganger has advantage on Wisdom (Insight) and Charisma (Deception, Intimidation, and Persuasion) checks against the target.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Draft Horse",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "40 ft.",
			"strength": 18,
			"dexterity": 10,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 11,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d4",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Dragon Turtle",
			"size": "Gargantuan",
			"type": "dragon",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 20,
			"hit_points": 341,
			"hit_dice": "22d20",
			"speed": "20 ft., swim 40 ft.",
			"strength": 25,
			"dexterity": 10,
			"constitution": 20,
			"intelligence": 10,
			"wisdom": 12,
			"charisma": 12,
			"dexterity_save": 6,
			"constitution_save": 11,
			"wisdom_save": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "fire",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 11",
			"languages": "Aquan, Draconic",
			"challenge_rating": "17",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon turtle can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon turtle makes three attacks: one with its bite and two with its claws. It can make one tail attack in place of its two claw attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) piercing damage.",
					"attack_bonus": 13,
					"damage_dice": "3d12",
					"damage_bonus": 7
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 16 (2d8 + 7) slashing damage.",
					"attack_bonus": 13,
					"damage_dice": "2d8",
					"damage_bonus": 7
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be pushed up to 10 feet away from the dragon turtle and knocked prone.",
					"attack_bonus": 13,
					"damage_dice": "3d12",
					"damage_bonus": 7
				},
				{
					"name": "Steam Breath (Recharge 5-6)",
					"desc": "The dragon turtle exhales scalding steam in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 52 (15d6) fire damage on a failed save, or half as much damage on a successful one. Being underwater doesn't grant resistance against this damage.",
					"attack_bonus": 0,
					"damage_dice": "15d6"
				}
			]
		},
		{
			"name": "Dretch",
			"size": "Small",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 11,
			"hit_points": 18,
			"hit_dice": "4d6",
			"speed": "20 ft.",
			"strength": 11,
			"dexterity": 11,
			"constitution": 12,
			"intelligence": 5,
			"wisdom": 8,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "Abyssal, telepathy 60 ft. (works only with creatures that understand Abyssal)",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dretch makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "1d6"
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 5 (2d4) slashing damage.",
					"attack_bonus": 2,
					"damage_dice": "2d4"
				},
				{
					"name": "Fetid Cloud (1/Day)",
					"desc": "A 10-foot radius of disgusting green gas extends out from the dretch. The gas spreads around corners, and its area is lightly obscured. It lasts for 1 minute or until a strong wind disperses it. Any creature that starts its turn in that area must succeed on a DC 11 Constitution saving throw or be poisoned until the start of its next turn. While poisoned in this way, the target can take either an action or a bonus action on its turn, not both, and can't take reactions.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Drider",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 19,
			"hit_points": 123,
			"hit_dice": "13d10",
			"speed": "30 ft., climb 30 ft.",
			"strength": 16,
			"dexterity": 16,
			"constitution": 18,
			"intelligence": 13,
			"wisdom": 14,
			"charisma": 12,
			"perception": 5,
			"stealth": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 15",
			"languages": "Elvish, Undercommon",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Fey Ancestry",
					"desc": "The drider has advantage on saving throws against being charmed, and magic can't put the drider to sleep.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The drider's innate spellcasting ability is Wisdom (spell save DC 13). The drider can innately cast the following spells, requiring no material components:\nAt will: dancing lights\n1/day each: darkness, faerie fire",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The drider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the drider has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The drider ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The drider makes three attacks, either with its longsword or its longbow. It can replace one of those attacks with a bite attack.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 2 (1d4) piercing damage plus 9 (2d8) poison damage.",
					"attack_bonus": 6,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +6 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) poison damage.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Drow",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "elf",
			"alignment": "neutral evil",
			"armor_class": 15,
			"hit_points": 13,
			"hit_dice": "3d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 14,
			"constitution": 10,
			"intelligence": 11,
			"wisdom": 11,
			"charisma": 12,
			"perception": 2,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 12",
			"languages": "Elvish, Undercommon",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Fey Ancestry",
					"desc": "The drow has advantage on saving throws against being charmed, and magic can't put the drow to sleep.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The drow's spellcasting ability is Charisma (spell save DC 11). It can innately cast the following spells, requiring no material components:\nAt will: dancing lights\n1/day each: darkness, faerie fire",
					"attack_bonus": 0
				},
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the drow has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Hand Crossbow",
					"desc": "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 hour. If the saving throw fails by 5 or more, the target is also unconscious while poisoned in this way. The target wakes up if it takes damage or if another creature takes an action to shake it awake.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Druid",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 11,
			"hit_points": 27,
			"hit_dice": "5d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 12,
			"wisdom": 15,
			"charisma": 11,
			"medicine": 4,
			"nature": 3,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "Druidic plus any two languages",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Spellcasting",
					"desc": "The druid is a 4th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). It has the following druid spells prepared:\n\n- Cantrips (at will): druidcraft, produce flame, shillelagh\n- 1st level (4 slots): entangle, longstrider, speak with animals, thunderwave\n- 2nd level (3 slots): animal messenger, barkskin",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Quarterstaff",
					"desc": "Melee Weapon Attack: +2 to hit (+4 to hit with shillelagh), reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage, or 6 (1d8 + 2) bludgeoning damage with shillelagh or if wielded with two hands.",
					"attack_bonus": 2,
					"damage_dice": "1d6"
				}
			]
		},
		{
			"name": "Dryad",
			"size": "Medium",
			"type": "fey",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 11,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 12,
			"constitution": 11,
			"intelligence": 14,
			"wisdom": 15,
			"charisma": 18,
			"perception": 4,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Elvish, Sylvan",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Innate Spellcasting",
					"desc": "The dryad's innate spellcasting ability is Charisma (spell save DC 14). The dryad can innately cast the following spells, requiring no material components:\n\nAt will: druidcraft\n3/day each: entangle, goodberry\n1/day each: barkskin, pass without trace, shillelagh",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The dryad has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Speak with Beasts and Plants",
					"desc": "The dryad can communicate with beasts and plants as if they shared a language.",
					"attack_bonus": 0
				},
				{
					"name": "Tree Stride",
					"desc": "Once on her turn, the dryad can use 10 ft. of her movement to step magically into one living tree within her reach and emerge from a second living tree within 60 ft. of the first tree, appearing in an unoccupied space within 5 ft. of the second tree. Both trees must be large or bigger.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Club",
					"desc": "Melee Weapon Attack: +2 to hit (+6 to hit with shillelagh), reach 5 ft., one target. Hit: 2 (1 d4) bludgeoning damage, or 8 (1d8 + 4) bludgeoning damage with shillelagh.",
					"attack_bonus": 2,
					"damage_dice": "1d4"
				},
				{
					"name": "Fey Charm",
					"desc": "The dryad targets one humanoid or beast that she can see within 30 feet of her. If the target can see the dryad, it must succeed on a DC 14 Wisdom saving throw or be magically charmed. The charmed creature regards the dryad as a trusted friend to be heeded and protected. Although the target isn't under the dryad's control, it takes the dryad's requests or actions in the most favorable way it can.\nEach time the dryad or its allies do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the dryad dies, is on a different plane of existence from the target, or ends the effect as a bonus action. If a target's saving throw is successful, the target is immune to the dryad's Fey Charm for the next 24 hours.\nThe dryad can have no more than one humanoid and up to three beasts charmed at a time.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Duergar",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "dwarf",
			"alignment": "lawful evil",
			"armor_class": 16,
			"hit_points": 26,
			"hit_dice": "4d8",
			"speed": "25 ft.",
			"strength": 14,
			"dexterity": 11,
			"constitution": 14,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "poison",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 10",
			"languages": "Dwarvish, Undercommon",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Duergar Resilience",
					"desc": "The duergar has advantage on saving throws against poison, spells, and illusions, as well as to resist being charmed or paralyzed.",
					"attack_bonus": 0
				},
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the duergar has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Enlarge (Recharges after a Short or Long Rest)",
					"desc": "For 1 minute, the duergar magically increases in size, along with anything it is wearing or carrying. While enlarged, the duergar is Large, doubles its damage dice on Strength-based weapon attacks (included in the attacks), and makes Strength checks and Strength saving throws with advantage. If the duergar lacks the room to become Large, it attains the maximum size possible in the space available.",
					"attack_bonus": 0
				},
				{
					"name": "War Pick",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage, or 11 (2d8 + 2) piercing damage while enlarged.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Javelin",
					"desc": "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 9 (2d6 + 2) piercing damage while enlarged.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Invisibility (Recharges after a Short or Long Rest)",
					"desc": "The duergar magically turns invisible until it attacks, casts a spell, or uses its Enlarge, or until its concentration is broken, up to 1 hour (as if concentrating on a spell). Any equipment the duergar wears or carries is invisible with it .",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Dust Mephit",
			"size": "Small",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 12,
			"hit_points": 17,
			"hit_dice": "5d6",
			"speed": "30 ft., fly 30 ft.",
			"strength": 5,
			"dexterity": 14,
			"constitution": 10,
			"intelligence": 9,
			"wisdom": 11,
			"charisma": 10,
			"perception": 2,
			"stealth": 4,
			"damage_vulnerabilities": "fire",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "Auran, Terran",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Death Burst",
					"desc": "When the mephit dies, it explodes in a burst of dust. Each creature within 5 ft. of it must then succeed on a DC 10 Constitution saving throw or be blinded for 1 minute. A blinded creature can repeat the saving throw on each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting (1/Day)",
					"desc": "The mephit can innately cast sleep, requiring no material components. Its innate spellcasting ability is Charisma.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Blinding Breath (Recharge 6)",
					"desc": "The mephit exhales a 15-foot cone of blinding dust. Each creature in that area must succeed on a DC 10 Dexterity saving throw or be blinded for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Mephits (1/Day)",
					"desc": "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Eagle",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 3,
			"hit_dice": "1d6",
			"speed": "10 ft., fly 60 ft.",
			"strength": 6,
			"dexterity": 15,
			"constitution": 10,
			"intelligence": 2,
			"wisdom": 14,
			"charisma": 7,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Earth Elemental",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 17,
			"hit_points": 126,
			"hit_dice": "12d10",
			"speed": "30 ft., burrow 30 ft.",
			"strength": 20,
			"dexterity": 8,
			"constitution": 20,
			"intelligence": 5,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "thunder",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, paralyzed, petrified, poisoned, unconscious",
			"senses": "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
			"languages": "Terran",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Earth Glide",
					"desc": "The elemental can burrow through nonmagical, unworked earth and stone. While doing so, the elemental doesn't disturb the material it moves through.",
					"attack_bonus": 0
				},
				{
					"name": "Siege Monster",
					"desc": "The elemental deals double damage to objects and structures.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The elemental makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
					"attack_bonus": 8,
					"damage_dice": "2d8",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Efreeti",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 17,
			"hit_points": 200,
			"hit_dice": "16d10",
			"speed": "40 ft., fly 60 ft.",
			"strength": 22,
			"dexterity": 12,
			"constitution": 24,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 16,
			"intelligence_save": 7,
			"wisdom_save": 6,
			"charisma_save": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 12",
			"languages": "Ignan",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Elemental Demise",
					"desc": "If the efreeti dies, its body disintegrates in a flash of fire and puff of smoke, leaving behind only equipment the djinni was wearing or carrying.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The efreeti's innate spell casting ability is Charisma (spell save DC 15, +7 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\n\nAt will: detect magic\n3/day: enlarge/reduce, tongues\n1/day each: conjure elemental (fire elemental only), gaseous form, invisibility, major image, plane shift, wall of fire",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Genie Powers",
					"desc": "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\n\nDisguises.\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\nWishes.\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The efreeti makes two scimitar attacks or uses its Hurl Flame twice.",
					"attack_bonus": 0
				},
				{
					"name": "Scimitar",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage plus 7 (2d6) fire damage.",
					"attack_bonus": 10,
					"damage_dice": "2d6 + 2d6",
					"damage_bonus": 6
				},
				{
					"name": "Hurl Flame",
					"desc": "Ranged Spell Attack: +7 to hit, range 120 ft., one target. Hit: 17 (5d6) fire damage.",
					"attack_bonus": 7,
					"damage_dice": "5d6"
				}
			]
		},
		{
			"name": "Elephant",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 76,
			"hit_dice": "8d12",
			"speed": "40 ft.",
			"strength": 22,
			"dexterity": 9,
			"constitution": 17,
			"intelligence": 3,
			"wisdom": 11,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Trampling Charge",
					"desc": "If the elephant moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the elephant can make one stomp attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) piercing damage.",
					"attack_bonus": 8,
					"damage_dice": "3d8",
					"damage_bonus": 6
				},
				{
					"name": "Stomp",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage.",
					"attack_bonus": 8,
					"damage_dice": "3d10",
					"damage_bonus": 6
				}
			]
		},
		{
			"name": "Elk",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 13,
			"hit_dice": "2d10",
			"speed": "50 ft.",
			"strength": 16,
			"dexterity": 10,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				}
			],
			"actions": [
				{
					"name": "Ram",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
					"attack_bonus": 0
				},
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one prone creature. Hit: 8 (2d4 + 3) bludgeoning damage.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Erinyes",
			"size": "Medium",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 153,
			"hit_dice": "18d8",
			"speed": "30 ft., fly 60 ft.",
			"strength": 18,
			"dexterity": 16,
			"constitution": 18,
			"intelligence": 14,
			"wisdom": 14,
			"charisma": 18,
			"dexterity_save": 7,
			"constitution_save": 8,
			"wisdom_save": 6,
			"charisma_save": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "truesight 120 ft., passive Perception 12",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "12",
			"special_abilities": [
				{
					"name": "Hellish Weapons",
					"desc": "The erinyes's weapon attacks are magical and deal an extra 13 (3d8) poison damage on a hit (included in the attacks).",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The erinyes has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The erinyes makes three attacks",
					"attack_bonus": 0
				},
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage, or 9 (1d10 + 4) slashing damage if used with two hands, plus 13 (3d8) poison damage.",
					"attack_bonus": 8,
					"damage_dice": "1d8 + 3d8",
					"damage_bonus": 4
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +7 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 13 (3d8) poison damage, and the target must succeed on a DC 14 Constitution saving throw or be poisoned. The poison lasts until it is removed by the lesser restoration spell or similar magic.",
					"attack_bonus": 7,
					"damage_dice": "1d8 + 3d8",
					"damage_bonus": 3
				},
				{
					"name": "Variant: Rope of Entanglement",
					"desc": "Some erinyes carry a rope of entanglement (detailed in the Dungeon Master's Guide). When such an erinyes uses its Multiattack, the erinyes can use the rope in place of two of the attacks.",
					"attack_bonus": 0
				}
			],
			"reactions": [
				{
					"name": "Parry",
					"desc": "The erinyes adds 4 to its AC against one melee attack that would hit it. To do so, the erinyes must see the attacker and be wielding a melee weapon.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ettercap",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 13,
			"hit_points": 44,
			"hit_dice": "8d8",
			"speed": "30 ft., climb 30 ft.",
			"strength": 14,
			"dexterity": 15,
			"constitution": 13,
			"intelligence": 7,
			"wisdom": 12,
			"charisma": 8,
			"perception": 3,
			"stealth": 4,
			"survival": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Spider Climb",
					"desc": "The ettercap can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Web Sense",
					"desc": "While in contact with a web, the ettercap knows the exact location of any other creature in contact with the same web.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The ettercap ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The ettercap makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage plus 4 (1d8) poison damage. The target must succeed on a DC 11 Constitution saving throw or be poisoned for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d4",
					"damage_bonus": 2
				},
				{
					"name": "Web (Recharge 5-6)",
					"desc": "Ranged Weapon Attack: +4 to hit, range 30/60 ft., one Large or smaller creature. Hit: The creature is restrained by webbing. As an action, the restrained creature can make a DC 11 Strength check, escaping from the webbing on a success. The effect ends if the webbing is destroyed. The webbing has AC 10, 5 hit points, is vulnerable to fire damage and immune to bludgeoning damage.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Web Garrote",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one Medium or Small creature against which the ettercap has advantage on the attack roll. Hit: 4 (1d4 + 2) bludgeoning damage, and the target is grappled (escape DC 12). Until this grapple ends, the target can't breathe, and the ettercap has advantage on attack rolls against it.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Ettin",
			"size": "Large",
			"type": "giant",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 12,
			"hit_points": 85,
			"hit_dice": "10d10",
			"speed": "40 ft.",
			"strength": 21,
			"dexterity": 8,
			"constitution": 17,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 8,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Giant, Orc",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Two Heads",
					"desc": "The ettin has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.",
					"attack_bonus": 0
				},
				{
					"name": "Wakeful",
					"desc": "When one of the ettin's heads is asleep, its other head is awake.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The ettin makes two attacks: one with its battleaxe and one with its morningstar.",
					"attack_bonus": 0
				},
				{
					"name": "Battleaxe",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 5
				},
				{
					"name": "Morningstar",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Fire Elemental",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 13,
			"hit_points": 102,
			"hit_dice": "12d10",
			"speed": "50 ft.",
			"strength": 10,
			"dexterity": 17,
			"constitution": 16,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "fire, poison",
			"condition_immunities": "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Ignan",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Fire Form",
					"desc": "The elemental can move through a space as narrow as 1 inch wide without squeezing. A creature that touches the elemental or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage. In addition, the elemental can enter a hostile creature's space and stop there. The first time it enters a creature's space on a turn, that creature takes 5 (1d10) fire damage and catches fire; until someone takes an action to douse the fire, the creature takes 5 (1d10) fire damage at the start of each of its turns.",
					"attack_bonus": 0,
					"damage_dice": "5d10"
				},
				{
					"name": "Illumination",
					"desc": "The elemental sheds bright light in a 30-foot radius and dim light in an additional 30 ft..",
					"attack_bonus": 0
				},
				{
					"name": "Water Susceptibility",
					"desc": "For every 5 ft. the elemental moves in water, or for every gallon of water splashed on it, it takes 1 cold damage.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The elemental makes two touch attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Touch",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) fire damage. If the target is a creature or a flammable object, it ignites. Until a creature takes an action to douse the fire, the target takes 5 (1d10) fire damage at the start of each of its turns.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Fire Giant",
			"size": "Huge",
			"type": "giant",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 162,
			"hit_dice": "13d12",
			"speed": "30 ft.",
			"strength": 25,
			"dexterity": 9,
			"constitution": 23,
			"intelligence": 10,
			"wisdom": 14,
			"charisma": 13,
			"dexterity_save": 3,
			"constitution_save": 10,
			"charisma_save": 5,
			"athletics": 11,
			"perception": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "passive Perception 16",
			"languages": "Giant",
			"challenge_rating": "9",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The giant makes two greatsword attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatsword",
					"desc": "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 28 (6d6 + 7) slashing damage.",
					"attack_bonus": 11,
					"damage_dice": "6d6",
					"damage_bonus": 7
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +11 to hit, range 60/240 ft., one target. Hit: 29 (4d10 + 7) bludgeoning damage.",
					"attack_bonus": 11,
					"damage_dice": "4d10",
					"damage_bonus": 7
				}
			]
		},
		{
			"name": "Flesh Golem",
			"size": "Medium",
			"type": "construct",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 9,
			"hit_points": 93,
			"hit_dice": "11d8",
			"speed": "30 ft.",
			"strength": 19,
			"dexterity": 9,
			"constitution": 18,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "understands the languages of its creator but can't speak",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Berserk",
					"desc": "Whenever the golem starts its turn with 40 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.\nThe golem's creator, if within 60 feet of the berserk golem, can try to calm it by speaking firmly and persuasively. The golem must be able to hear its creator, who must take an action to make a DC 15 Charisma (Persuasion) check. If the check succeeds, the golem ceases being berserk. If it takes damage while still at 40 hit points or fewer, the golem might go berserk again.",
					"attack_bonus": 0
				},
				{
					"name": "Aversion of Fire",
					"desc": "If the golem takes fire damage, it has disadvantage on attack rolls and ability checks until the end of its next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Immutable Form",
					"desc": "The golem is immune to any spell or effect that would alter its form.",
					"attack_bonus": 0
				},
				{
					"name": "Lightning Absorption",
					"desc": "Whenever the golem is subjected to lightning damage, it takes no damage and instead regains a number of hit points equal to the lightning damage dealt.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The golem has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The golem's weapon attacks are magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The golem makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Flying Snake",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 5,
			"hit_dice": "2d4",
			"speed": "30 ft., fly 60 ft., swim 30 ft.",
			"strength": 4,
			"dexterity": 18,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Flyby",
					"desc": "The snake doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 1 piercing damage plus 7 (3d4) poison damage.",
					"attack_bonus": 6,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Flying Sword",
			"size": "Small",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 17,
			"hit_points": 17,
			"hit_dice": "5d6",
			"speed": "0 ft., fly 50 ft. It can hover.",
			"strength": 12,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 1,
			"wisdom": 5,
			"charisma": 1,
			"dexterity_save": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison, psychic",
			"condition_immunities": "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 7",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Antimagic Susceptibility",
					"desc": "The sword is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the sword must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance",
					"desc": "While the sword remains motionless and isn't flying, it is indistinguishable from a normal sword.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Frog",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "20 ft., swim 20 ft.",
			"strength": 1,
			"dexterity": 13,
			"constitution": 8,
			"intelligence": 1,
			"wisdom": 8,
			"charisma": 3,
			"perception": 1,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The frog can breathe air and water",
					"attack_bonus": 0
				},
				{
					"name": "Standing Leap",
					"desc": "The frog's long jump is up to 10 ft. and its high jump is up to 5 ft., with or without a running start.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Frost Giant",
			"size": "Huge",
			"type": "giant",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 15,
			"hit_points": 138,
			"hit_dice": "12d12",
			"speed": "40 ft.",
			"strength": 23,
			"dexterity": 9,
			"constitution": 21,
			"intelligence": 9,
			"wisdom": 10,
			"charisma": 12,
			"constitution_save": 8,
			"wisdom_save": 3,
			"charisma_save": 4,
			"athletics": 9,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "Giant",
			"challenge_rating": "8",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The giant makes two greataxe attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greataxe",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 25 (3d12 + 6) slashing damage.",
					"attack_bonus": 9,
					"damage_dice": "3d12",
					"damage_bonus": 6
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
					"attack_bonus": 9,
					"damage_dice": "4d10",
					"damage_bonus": 6
				}
			]
		},
		{
			"name": "Gargoyle",
			"size": "Medium",
			"type": "elemental",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 15,
			"hit_points": 52,
			"hit_dice": "7d8",
			"speed": "30 ft., fly 60 ft.",
			"strength": 15,
			"dexterity": 11,
			"constitution": 16,
			"intelligence": 6,
			"wisdom": 11,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, petrified, poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Terran",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the gargoyle remains motion less, it is indistinguishable from an inanimate statue.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The gargoyle makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Gelatinous Cube",
			"size": "Large",
			"type": "ooze",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 6,
			"hit_points": 84,
			"hit_dice": "8d10",
			"speed": "15 ft.",
			"strength": 14,
			"dexterity": 3,
			"constitution": 20,
			"intelligence": 1,
			"wisdom": 6,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "blinded, charmed, deafened, exhaustion, frightened, prone",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Ooze Cube",
					"desc": "The cube takes up its entire space. Other creatures can enter the space, but a creature that does so is subjected to the cube's Engulf and has disadvantage on the saving throw.\nCreatures inside the cube can be seen but have total cover.\nA creature within 5 feet of the cube can take an action to pull a creature or object out of the cube. Doing so requires a successful DC 12 Strength check, and the creature making the attempt takes 10 (3d6) acid damage.\nThe cube can hold only one Large creature or up to four Medium or smaller creatures inside it at a time.",
					"attack_bonus": 0
				},
				{
					"name": "Transparent",
					"desc": "Even when the cube is in plain sight, it takes a successful DC 15 Wisdom (Perception) check to spot a cube that has neither moved nor attacked. A creature that tries to enter the cube's space while unaware of the cube is surprised by the cube.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Pseudopod",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) acid damage.",
					"attack_bonus": 4,
					"damage_dice": "3d6"
				},
				{
					"name": "Engulf",
					"desc": "The cube moves up to its speed. While doing so, it can enter Large or smaller creatures' spaces. Whenever the cube enters a creature's space, the creature must make a DC 12 Dexterity saving throw.\nOn a successful save, the creature can choose to be pushed 5 feet back or to the side of the cube. A creature that chooses not to be pushed suffers the consequences of a failed saving throw.\nOn a failed save, the cube enters the creature's space, and the creature takes 10 (3d6) acid damage and is engulfed. The engulfed creature can't breathe, is restrained, and takes 21 (6d6) acid damage at the start of each of the cube's turns. When the cube moves, the engulfed creature moves with it.\nAn engulfed creature can try to escape by taking an action to make a DC 12 Strength check. On a success, the creature escapes and enters a space of its choice within 5 feet of the cube.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ghast",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 13,
			"hit_points": 36,
			"hit_dice": "8d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 17,
			"constitution": 10,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "necrotic",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Common",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Stench",
					"desc": "Any creature that starts its turn within 5 ft. of the ghast must succeed on a DC 10 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the ghast's Stench for 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Turn Defiance",
					"desc": "The ghast and any ghouls within 30 ft. of it have advantage on saving throws against effects that turn undead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 12 (2d8 + 3) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "2d8",
					"damage_bonus": 3
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a creature other than an undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Ghost",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "any alignment",
			"armor_class": 11,
			"hit_points": 45,
			"hit_dice": "10d8",
			"speed": "0 ft., fly 40 ft. It can hover.",
			"strength": 7,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 10,
			"wisdom": 12,
			"charisma": 17,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "cold, necrotic, poison",
			"condition_immunities": "charmed, exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "any languages it knew in life",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Ethereal Sight",
					"desc": "The ghost can see 60 ft. into the Ethereal Plane when it is on the Material Plane, and vice versa.",
					"attack_bonus": 0
				},
				{
					"name": "Incorporeal Movement",
					"desc": "The ghost can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Withering Touch",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 17 (4d6 + 3) necrotic damage.",
					"attack_bonus": 5,
					"damage_dice": "4d6",
					"damage_bonus": 3
				},
				{
					"name": "Etherealness",
					"desc": "The ghost enters the Ethereal Plane from the Material Plane, or vice versa. It is visible on the Material Plane while it is in the Border Ethereal, and vice versa, yet it can't affect or be affected by anything on the other plane.",
					"attack_bonus": 0
				},
				{
					"name": "Horrifying Visage",
					"desc": "Each non-undead creature within 60 ft. of the ghost that can see it must succeed on a DC 13 Wisdom saving throw or be frightened for 1 minute. If the save fails by 5 or more, the target also ages 1d4 _ 10 years. A frightened target can repeat the saving throw at the end of each of its turns, ending the frightened condition on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to this ghost's Horrifying Visage for the next 24 hours. The aging effect can be reversed with a greater restoration spell, but only within 24 hours of it occurring.",
					"attack_bonus": 0
				},
				{
					"name": "Possession (Recharge 6)",
					"desc": "One humanoid that the ghost can see within 5 ft. of it must succeed on a DC 13 Charisma saving throw or be possessed by the ghost; the ghost then disappears, and the target is incapacitated and loses control of its body. The ghost now controls the body but doesn't deprive the target of awareness. The ghost can't be targeted by any attack, spell, or other effect, except ones that turn undead, and it retains its alignment, Intelligence, Wisdom, Charisma, and immunity to being charmed and frightened. It otherwise uses the possessed target's statistics, but doesn't gain access to the target's knowledge, class features, or proficiencies.\nThe possession lasts until the body drops to 0 hit points, the ghost ends it as a bonus action, or the ghost is turned or forced out by an effect like the dispel evil and good spell. When the possession ends, the ghost reappears in an unoccupied space within 5 ft. of the body. The target is immune to this ghost's Possession for 24 hours after succeeding on the saving throw or after the possession ends.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ghoul",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "30 ft.",
			"strength": 13,
			"dexterity": 15,
			"constitution": 10,
			"intelligence": 7,
			"wisdom": 10,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Common",
			"challenge_rating": "1",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "2d6",
					"damage_bonus": 2
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage. If the target is a creature other than an elf or undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Giant Ape",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 157,
			"hit_dice": "15d12",
			"speed": "40 ft., climb 40 ft.",
			"strength": 23,
			"dexterity": 14,
			"constitution": 18,
			"intelligence": 7,
			"wisdom": 12,
			"charisma": 7,
			"athletics": 9,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "7",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The ape makes two fist attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Fist",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) bludgeoning damage.",
					"attack_bonus": 9,
					"damage_dice": "3d10",
					"damage_bonus": 6
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +9 to hit, range 50/100 ft., one target. Hit: 30 (7d6 + 6) bludgeoning damage.",
					"attack_bonus": 9,
					"damage_dice": "7d6",
					"damage_bonus": 6
				}
			]
		},
		{
			"name": "Giant Badger",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 13,
			"hit_dice": "2d8",
			"speed": "30 ft., burrow 10 ft.",
			"strength": 13,
			"dexterity": 10,
			"constitution": 15,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The badger makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "2d4",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Giant Bat",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 22,
			"hit_dice": "4d10",
			"speed": "10 ft., fly 60 ft.",
			"strength": 15,
			"dexterity": 16,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Echolocation",
					"desc": "The bat can't use its blindsight while deafened.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing",
					"desc": "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Boar",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 42,
			"hit_dice": "5d10",
			"speed": "40 ft.",
			"strength": 17,
			"dexterity": 10,
			"constitution": 16,
			"intelligence": 2,
			"wisdom": 7,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 8",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				},
				{
					"name": "Relentless (Recharges after a Short or Long Rest)",
					"desc": "If the boar takes 10 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Tusk",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Giant Centipede",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 4,
			"hit_dice": "1d6",
			"speed": "30 ft., climb 30 ft.",
			"strength": 5,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Bite",
					"desc": "Bite. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or take 10 (3d6) poison damage. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Constrictor Snake",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 60,
			"hit_dice": "8d12",
			"speed": "30 ft., swim 30 ft.",
			"strength": 19,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 3,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Constrict",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 13 (2d8 + 4) bludgeoning damage, and the target is grappled (escape DC 16). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Giant Crab",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 15,
			"hit_points": 13,
			"hit_dice": "3d8",
			"speed": "30 ft., swim 30 ft.",
			"strength": 13,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 1,
			"wisdom": 9,
			"charisma": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The crab can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage, and the target is grappled (escape DC 11). The crab has two claws, each of which can grapple only one target.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Giant Crocodile",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 85,
			"hit_dice": "9d12",
			"speed": "30 ft., swim 50 ft.",
			"strength": 21,
			"dexterity": 9,
			"constitution": 17,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 7,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "The crocodile can hold its breath for 30 minutes.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The crocodile makes two attacks: one with its bite and one with its tail.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 21 (3d10 + 5) piercing damage, and the target is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the crocodile can't bite another target.",
					"attack_bonus": 8,
					"damage_dice": "3d10",
					"damage_bonus": 5
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target not grappled by the crocodile. Hit: 14 (2d8 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 16 Strength saving throw or be knocked prone.",
					"attack_bonus": 8,
					"damage_dice": "2d8",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Giant Eagle",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "neutral good",
			"armor_class": 13,
			"hit_points": 26,
			"hit_dice": "4d10",
			"speed": "10 ft., fly 80 ft.",
			"strength": 16,
			"dexterity": 17,
			"constitution": 13,
			"intelligence": 8,
			"wisdom": 14,
			"charisma": 10,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "Giant Eagle, understands Common and Auran but can't speak",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The eagle makes two attacks: one with its beak and one with its talons.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Giant Elk",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 15,
			"hit_points": 42,
			"hit_dice": "5d12",
			"speed": "60 ft.",
			"strength": 19,
			"dexterity": 16,
			"constitution": 14,
			"intelligence": 7,
			"wisdom": 14,
			"charisma": 10,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "Giant Elk, understands Common, Elvish, and Sylvan but can't speak",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				}
			],
			"actions": [
				{
					"name": "Ram",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one prone creature. Hit: 22 (4d8 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "4d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Giant Fire Beetle",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 4,
			"hit_dice": "1d6",
			"speed": "30 ft.",
			"strength": 8,
			"dexterity": 10,
			"constitution": 12,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Illumination",
					"desc": "The beetle sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 2 (1d6 — 1) slashing damage.",
					"attack_bonus": 1,
					"damage_dice": "1d6",
					"damage_bonus": -1
				}
			]
		},
		{
			"name": "Giant Frog",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 18,
			"hit_dice": "4d8",
			"speed": "30 ft., swim 30 ft.",
			"strength": 12,
			"dexterity": 13,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 3,
			"perception": 2,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The frog can breathe air and water",
					"attack_bonus": 0
				},
				{
					"name": "Standing Leap",
					"desc": "The frog's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage, and the target is grappled (escape DC 11). Until this grapple ends, the target is restrained, and the frog can't bite another target.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				},
				{
					"name": "Swallow",
					"desc": "The frog makes one bite attack against a Small or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the frog, and it takes 5 (2d4) acid damage at the start of each of the frog's turns. The frog can have only one target swallowed at a time. If the frog dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 ft. of movement, exiting prone.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Giant Goat",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "40 ft.",
			"strength": 17,
			"dexterity": 11,
			"constitution": 12,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 5 (2d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d4"
				},
				{
					"name": "Sure-Footed",
					"desc": "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Ram",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
					"attack_bonus": 5,
					"damage_dice": "2d4",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Giant Hyena",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 45,
			"hit_dice": "6d10",
			"speed": "50 ft.",
			"strength": 16,
			"dexterity": 14,
			"constitution": 14,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Rampage",
					"desc": "When the hyena reduces a creature to 0 hit points with a melee attack on its turn, the hyena can take a bonus action to move up to half its speed and make a bite attack.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Giant Lizard",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "30 ft., climb 30 ft.",
			"strength": 15,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Variant: Hold Breath",
					"desc": "The lizard can hold its breath for 15 minutes. (A lizard that has this trait also has a swimming speed of 30 feet.)",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Spider Climb",
					"desc": "The lizard can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Octopus",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 52,
			"hit_dice": "8d10",
			"speed": "10 ft., swim 60 ft.",
			"strength": 17,
			"dexterity": 13,
			"constitution": 13,
			"intelligence": 4,
			"wisdom": 10,
			"charisma": 4,
			"perception": 4,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "While out of water, the octopus can hold its breath for 1 hour.",
					"attack_bonus": 0
				},
				{
					"name": "Underwater Camouflage",
					"desc": "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The octopus can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Tentacles",
					"desc": "Melee Weapon Attack: +5 to hit, reach 15 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage. If the target is a creature, it is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the octopus can't use its tentacles on another target.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Ink Cloud (Recharges after a Short or Long Rest)",
					"desc": "A 20-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Giant Owl",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 12,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "5 ft., fly 60 ft.",
			"strength": 13,
			"dexterity": 15,
			"constitution": 12,
			"intelligence": 8,
			"wisdom": 13,
			"charisma": 10,
			"perception": 5,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 15",
			"languages": "Giant Owl, understands Common, Elvish, and Sylvan but can't speak",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Flyby",
					"desc": "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing and Sight",
					"desc": "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 8 (2d6 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "2d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Giant Poisonous Snake",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "30 ft., swim 30 ft.",
			"strength": 10,
			"dexterity": 18,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 3,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 6 (1d4 + 4) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 6,
					"damage_dice": "1d4",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Giant Rat",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 7,
			"hit_dice": "2d6",
			"speed": "30 ft.",
			"strength": 7,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The rat has advantage on an attack roll against a creature if at least one of the rat's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Rat (Diseased)",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 7,
			"hit_dice": "2d6",
			"speed": "30 ft.",
			"strength": 7,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 10 Constitution saving throw or contract a disease. Until the disease is cured, the target can't regain hit points except by magical means, and the target's hit point maximum decreases by 3 (1d6) every 24 hours. If the target's hit point maximum drops to 0 as a result of this disease, the target dies.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Scorpion",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 15,
			"hit_points": 52,
			"hit_dice": "7d10",
			"speed": "40 ft.",
			"strength": 15,
			"dexterity": 13,
			"constitution": 15,
			"intelligence": 1,
			"wisdom": 9,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "3",
			"actions": [
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 12). The scorpion has two claws, each of which can grapple only one target.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Multiattack",
					"desc": "The scorpion makes three attacks: two with its claws and one with its sting.",
					"attack_bonus": 0
				},
				{
					"name": "Sting",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 12 Constitution saving throw, taking 22 (4d10) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Sea Horse",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 16,
			"hit_dice": "3d10",
			"speed": "0 ft., swim 40 ft.",
			"strength": 12,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the sea horse moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) bludgeoning damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				},
				{
					"name": "Water Breathing",
					"desc": "The sea horse can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Ram",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Giant Shark",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 126,
			"hit_dice": "11d12",
			"speed": "swim 50 ft.",
			"strength": 23,
			"dexterity": 11,
			"constitution": 21,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 5,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Blood Frenzy",
					"desc": "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The shark can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
					"attack_bonus": 9,
					"damage_dice": "3d10",
					"damage_bonus": 6
				}
			]
		},
		{
			"name": "Giant Spider",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 26,
			"hit_dice": "4d10",
			"speed": "30 ft., climb 30 ft.",
			"strength": 14,
			"dexterity": 16,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 11,
			"charisma": 4,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Spider Climb",
					"desc": "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Web Sense",
					"desc": "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The spider ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 9 (2d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Web (Recharge 5-6)",
					"desc": "Ranged Weapon Attack: +5 to hit, range 30/60 ft., one creature. Hit: The target is restrained by webbing. As an action, the restrained target can make a DC 12 Strength check, bursting the webbing on a success. The webbing can also be attacked and destroyed (AC 10; hp 5; vulnerability to fire damage; immunity to bludgeoning, poison, and psychic damage).",
					"attack_bonus": 5
				}
			]
		},
		{
			"name": "Giant Toad",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 39,
			"hit_dice": "6d10",
			"speed": "20 ft., swim 40 ft.",
			"strength": 15,
			"dexterity": 13,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The toad can breathe air and water",
					"attack_bonus": 0
				},
				{
					"name": "Standing Leap",
					"desc": "The toad's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 5 (1d10) poison damage, and the target is grappled (escape DC 13). Until this grapple ends, the target is restrained, and the toad can't bite another target.",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				},
				{
					"name": "Swallow",
					"desc": "The toad makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the toad, and it takes 10 (3d6) acid damage at the start of each of the toad's turns. The toad can have only one target swallowed at a time.\nIf the toad dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 feet of movement, exiting prone.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Giant Vulture",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 10,
			"hit_points": 22,
			"hit_dice": "3d10",
			"speed": "10 ft., fly 60 ft.",
			"strength": 15,
			"dexterity": 10,
			"constitution": 15,
			"intelligence": 6,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "understands Common but can't speak",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Sight and Smell",
					"desc": "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The vulture makes two attacks: one with its beak and one with its talons.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d4",
					"damage_bonus": 2
				},
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Wasp",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 13,
			"hit_dice": "3d8",
			"speed": "10 ft., fly 50 ft., swim 50 ft.",
			"strength": 10,
			"dexterity": 14,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/2",
			"actions": [
				{
					"name": "Sting",
					"desc": "Sting. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Giant Weasel",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 9,
			"hit_dice": "2d8",
			"speed": "40 ft.",
			"strength": 11,
			"dexterity": 16,
			"constitution": 10,
			"intelligence": 4,
			"wisdom": 12,
			"charisma": 5,
			"perception": 3,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Giant Wolf Spider",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "40 ft., climb 40 ft.",
			"strength": 12,
			"dexterity": 16,
			"constitution": 13,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 4,
			"perception": 3,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Spider Climb",
					"desc": "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Web Sense",
					"desc": "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The spider ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 7 (2d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Gibbering Mouther",
			"size": "Medium",
			"type": "aberration",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 9,
			"hit_points": 67,
			"hit_dice": "9d8",
			"speed": "10 ft., swim 10 ft.",
			"strength": 10,
			"dexterity": 8,
			"constitution": 16,
			"intelligence": 3,
			"wisdom": 10,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "prone",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Aberrant Ground",
					"desc": "The ground in a 10-foot radius around the mouther is doughlike difficult terrain. Each creature that starts its turn in that area must succeed on a DC 10 Strength saving throw or have its speed reduced to 0 until the start of its next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Gibbering",
					"desc": "The mouther babbles incoherently while it can see any creature and isn't incapacitated. Each creature that starts its turn within 20 feet of the mouther and can hear the gibbering must succeed on a DC 10 Wisdom saving throw. On a failure, the creature can't take reactions until the start of its next turn and rolls a d8 to determine what it does during its turn. On a 1 to 4, the creature does nothing. On a 5 or 6, the creature takes no action or bonus action and uses all its movement to move in a randomly determined direction. On a 7 or 8, the creature makes a melee attack against a randomly determined creature within its reach or does nothing if it can't make such an attack.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The gibbering mouther makes one bite attack and, if it can, uses its Blinding Spittle.",
					"attack_bonus": 0
				},
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 17 (5d6) piercing damage. If the target is Medium or smaller, it must succeed on a DC 10 Strength saving throw or be knocked prone. If the target is killed by this damage, it is absorbed into the mouther.",
					"attack_bonus": 2,
					"damage_dice": "5d6"
				},
				{
					"name": "Blinding Spittle (Recharge 5-6)",
					"desc": "The mouther spits a chemical glob at a point it can see within 15 feet of it. The glob explodes in a blinding flash of light on impact. Each creature within 5 feet of the flash must succeed on a DC 13 Dexterity saving throw or be blinded until the end of the mouther's next turn.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Glabrezu",
			"size": "Large",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 17,
			"hit_points": 157,
			"hit_dice": "15d10",
			"speed": "40 ft.",
			"strength": 20,
			"dexterity": 15,
			"constitution": 21,
			"intelligence": 19,
			"wisdom": 17,
			"charisma": 16,
			"strength_save": 9,
			"constitution_save": 9,
			"wisdom_save": 7,
			"charisma_save": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "truesight 120 ft., passive Perception 13",
			"languages": "Abyssal, telepathy 120 ft.",
			"challenge_rating": "9",
			"special_abilities": [
				{
					"name": "Innate Spellcasting",
					"desc": "The glabrezu's spellcasting ability is Intelligence (spell save DC 16). The glabrezu can innately cast the following spells, requiring no material components:\nAt will: darkness, detect magic, dispel magic\n1/day each: confusion, fly, power word stun",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The glabrezu has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The glabrezu makes four attacks: two with its pincers and two with its fists. Alternatively, it makes two attacks with its pincers and casts one spell.",
					"attack_bonus": 0
				},
				{
					"name": "Pincer",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a Medium or smaller creature, it is grappled (escape DC 15). The glabrezu has two pincers, each of which can grapple only one target.",
					"attack_bonus": 9,
					"damage_dice": "2d10",
					"damage_bonus": 5
				},
				{
					"name": "Fist",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
					"attack_bonus": 9,
					"damage_dice": "2d4",
					"damage_bonus": 2
				},
				{
					"name": "Variant: Summon Demon (1/Day)",
					"desc": "The demon chooses what to summon and attempts a magical summoning.\nA glabrezu has a 30 percent chance of summoning 1d3 vrocks, 1d2 hezrous, or one glabrezu.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Gladiator",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 16,
			"hit_points": 112,
			"hit_dice": "15d8",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 10,
			"wisdom": 12,
			"charisma": 15,
			"strength_save": 7,
			"dexterity_save": 5,
			"constitution_save": 6,
			"athletics": 10,
			"intimidation": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "any one language (usually Common)",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Brave",
					"desc": "The gladiator has advantage on saving throws against being frightened.",
					"attack_bonus": 0
				},
				{
					"name": "Brute",
					"desc": "A melee weapon deals one extra die of its damage when the gladiator hits with it (included in the attack).",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The gladiator makes three melee attacks or two ranged attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. and range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Shield Bash",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 9 (2d4 + 4) bludgeoning damage. If the target is a Medium or smaller creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
					"attack_bonus": 7,
					"damage_dice": "2d4",
					"damage_bonus": 4
				}
			],
			"reactions": [
				{
					"name": "Parry",
					"desc": "The gladiator adds 3 to its AC against one melee attack that would hit it. To do so, the gladiator must see the attacker and be wielding a melee weapon.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Gnoll",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "gnoll",
			"alignment": "chaotic evil",
			"armor_class": 15,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "30 ft.",
			"strength": 14,
			"dexterity": 12,
			"constitution": 11,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Gnoll",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Rampage",
					"desc": "When the gnoll reduces a creature to 0 hit points with a melee attack on its turn, the gnoll can take a bonus action to move up to half its speed and make a bite attack.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Goat",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 4,
			"hit_dice": "1d8",
			"speed": "40 ft.",
			"strength": 12,
			"dexterity": 10,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 2 (1d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 10 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "1d4"
				},
				{
					"name": "Sure-Footed",
					"desc": "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Ram",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Goblin",
			"size": "Small",
			"type": "humanoid",
			"subtype": "goblinoid",
			"alignment": "neutral evil",
			"armor_class": 15,
			"hit_points": 7,
			"hit_dice": "2d6",
			"speed": "30 ft.",
			"strength": 8,
			"dexterity": 14,
			"constitution": 10,
			"intelligence": 10,
			"wisdom": 8,
			"charisma": 8,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "Common, Goblin",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Nimble Escape",
					"desc": "The goblin can take the Disengage or Hide action as a bonus action on each of its turns.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Scimitar",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Shortbow",
					"desc": "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Gold Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 17,
			"hit_points": 60,
			"hit_dice": "8d8",
			"speed": "30 ft., fly 60 ft., swim 30 ft.",
			"strength": 19,
			"dexterity": 14,
			"constitution": 17,
			"intelligence": 14,
			"wisdom": 11,
			"charisma": 16,
			"dexterity_save": 4,
			"constitution_save": 5,
			"wisdom_save": 2,
			"charisma_save": 5,
			"perception": 4,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d10",
					"damage_bonus": 4
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 22 (4d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "4d10"
				}
			]
		},
		{
			"name": "Gorgon",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 19,
			"hit_points": 114,
			"hit_dice": "12d10",
			"speed": "40 ft.",
			"strength": 20,
			"dexterity": 11,
			"constitution": 18,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 7,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "petrified",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Trampling Charge",
					"desc": "If the gorgon moves at least 20 feet straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 16 Strength saving throw or be knocked prone. If the target is prone, the gorgon can make one attack with its hooves against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 18 (2d12 + 5) piercing damage.",
					"attack_bonus": 8,
					"damage_dice": "2d12",
					"damage_bonus": 5
				},
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage.",
					"attack_bonus": 8,
					"damage_dice": "2d10",
					"damage_bonus": 5
				},
				{
					"name": "Petrifying Breath (Recharge 5-6)",
					"desc": "The gorgon exhales petrifying gas in a 30-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw. On a failed save, a target begins to turn to stone and is restrained. The restrained target must repeat the saving throw at the end of its next turn. On a success, the effect ends on the target. On a failure, the target is petrified until freed by the greater restoration spell or other magic.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Gray Ooze",
			"size": "Medium",
			"type": "ooze",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 8,
			"hit_points": 22,
			"hit_dice": "3d8",
			"speed": "10 ft., climb 10 ft.",
			"strength": 12,
			"dexterity": 6,
			"constitution": 16,
			"intelligence": 1,
			"wisdom": 6,
			"charisma": 2,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid, cold, fire",
			"damage_immunities": "",
			"condition_immunities": "blinded, charmed, deafened, exhaustion, frightened, prone",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Amorphous",
					"desc": "The ooze can move through a space as narrow as 1 inch wide without squeezing.",
					"attack_bonus": 0
				},
				{
					"name": "Corrode Metal",
					"desc": "Any nonmagical weapon made of metal that hits the ooze corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal that hits the ooze is destroyed after dealing damage.\nThe ooze can eat through 2-inch-thick, nonmagical metal in 1 round.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance",
					"desc": "While the ooze remains motionless, it is indistinguishable from an oily pool or wet rock.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Pseudopod",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage plus 7 (2d6) acid damage, and if the target is wearing nonmagical metal armor, its armor is partly corroded and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Green Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 17,
			"hit_points": 38,
			"hit_dice": "7d8",
			"speed": "30 ft., fly 60 ft., swim 30 ft.",
			"strength": 15,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 14,
			"wisdom": 11,
			"charisma": 13,
			"dexterity_save": 3,
			"constitution_save": 3,
			"wisdom_save": 2,
			"charisma_save": 3,
			"perception": 4,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 3 (1d6) poison damage.",
					"attack_bonus": 4,
					"damage_dice": "1d10 + 1d6",
					"damage_bonus": 3
				},
				{
					"name": "Poison Breath (Recharge 5-6)",
					"desc": "The dragon exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 11 Constitution saving throw, taking 21 (6d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "6d6"
				}
			]
		},
		{
			"name": "Green Hag",
			"size": "Medium",
			"type": "fey",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 17,
			"hit_points": 82,
			"hit_dice": "11d8",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 12,
			"constitution": 16,
			"intelligence": 13,
			"wisdom": 14,
			"charisma": 14,
			"arcana": 3,
			"deception": 4,
			"perception": 4,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Common, Draconic, Sylvan",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The hag can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The hag's innate spellcasting ability is Charisma (spell save DC 12). She can innately cast the following spells, requiring no material components:\n\nAt will: dancing lights, minor illusion, vicious mockery",
					"attack_bonus": 0
				},
				{
					"name": "Mimicry",
					"desc": "The hag can mimic animal sounds and humanoid voices. A creature that hears the sounds can tell they are imitations with a successful DC 14 Wisdom (Insight) check.",
					"attack_bonus": 0
				},
				{
					"name": "Hag Coven",
					"desc": "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
					"attack_bonus": 0
				},
				{
					"name": "Shared Spellcasting (Coven Only)",
					"desc": "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\n\n- 1st level (4 slots): identify, ray of sickness\n- 2nd level (3 slots): hold person, locate object\n- 3rd level (3 slots): bestow curse, counterspell, lightning bolt\n- 4th level (3 slots): phantasmal killer, polymorph\n- 5th level (2 slots): contact other plane, scrying\n- 6th level (1 slot): eye bite\n\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
					"attack_bonus": 0
				},
				{
					"name": "Hag Eye (Coven Only)",
					"desc": "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Illusory Appearance",
					"desc": "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like another creature of her general size and humanoid shape. The illusion ends if the hag takes a bonus action to end it or if she dies.\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have smooth skin, but someone touching her would feel her rough flesh. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 20 Intelligence (Investigation) check to discern that the hag is disguised.",
					"attack_bonus": 0
				},
				{
					"name": "Invisible Passage",
					"desc": "The hag magically turns invisible until she attacks or casts a spell, or until her concentration ends (as if concentrating on a spell). While invisible, she leaves no physical evidence of her passage, so she can be tracked only by magic. Any equipment she wears or carries is invisible with her.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Grick",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 14,
			"hit_points": 27,
			"hit_dice": "6d8",
			"speed": "30 ft., climb 30 ft.",
			"strength": 14,
			"dexterity": 14,
			"constitution": 11,
			"intelligence": 3,
			"wisdom": 14,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing damage from nonmagical weapons",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Stone Camouflage",
					"desc": "The grick has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The grick makes one attack with its tentacles. If that attack hits, the grick can make one beak attack against the same target.",
					"attack_bonus": 0
				},
				{
					"name": "Tentacles",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d6",
					"damage_bonus": 2
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Griffon",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 59,
			"hit_dice": "7d10",
			"speed": "30 ft., fly 80 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 2,
			"wisdom": 13,
			"charisma": 8,
			"perception": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 15",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The griffon has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The griffon makes two attacks: one with its beak and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Grimlock",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "grimlock",
			"alignment": "neutral evil",
			"armor_class": 11,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 9,
			"wisdom": 8,
			"charisma": 6,
			"athletics": 5,
			"perception": 3,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "blinded",
			"condition_immunities": "",
			"senses": "blindsight 30 ft. or 10 ft. while deafened (blind beyond this radius), passive Perception 13",
			"languages": "Undercommon",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Blind Senses",
					"desc": "The grimlock can't use its blindsight while deafened and unable to smell.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing and Smell",
					"desc": "The grimlock has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Stone Camouflage",
					"desc": "The grimlock has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Spiked Bone Club",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) bludgeoning damage plus 2 (1d4) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4 + 1d4",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Guard",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 16,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 13,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 10,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "any one language (usually Common)",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Guardian Naga",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 18,
			"hit_points": 127,
			"hit_dice": "15d10",
			"speed": "40 ft.",
			"strength": 19,
			"dexterity": 18,
			"constitution": 16,
			"intelligence": 16,
			"wisdom": 19,
			"charisma": 18,
			"dexterity_save": 8,
			"constitution_save": 7,
			"intelligence_save": 7,
			"wisdom_save": 8,
			"charisma_save": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "charmed, poisoned",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Celestial, Common",
			"challenge_rating": "10",
			"special_abilities": [
				{
					"name": "Rejuvenation",
					"desc": "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The naga is an 11th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 16, +8 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following cleric spells prepared:\n\n- Cantrips (at will): mending, sacred flame, thaumaturgy\n- 1st level (4 slots): command, cure wounds, shield of faith\n- 2nd level (3 slots): calm emotions, hold person\n- 3rd level (3 slots): bestow curse, clairvoyance\n- 4th level (3 slots): banishment, freedom of movement\n- 5th level (2 slots): flame strike, geas\n- 6th level (1 slot): true seeing",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 8 (1d8 + 4) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 8,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Spit Poison",
					"desc": "Ranged Weapon Attack: +8 to hit, range 15/30 ft., one creature. Hit: The target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 8,
					"damage_dice": "10d8"
				}
			]
		},
		{
			"name": "Gynosphinx",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "lawful neutral",
			"armor_class": 17,
			"hit_points": 136,
			"hit_dice": "16d10",
			"speed": "40 ft., fly 60 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 18,
			"wisdom": 18,
			"charisma": 18,
			"arcana": 12,
			"history": 12,
			"perception": 8,
			"religion": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "psychic",
			"condition_immunities": "charmed, frightened",
			"senses": "truesight 120 ft., passive Perception 18",
			"languages": "Common, Sphinx",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Inscrutable",
					"desc": "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The sphinx's weapon attacks are magical.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The sphinx is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 16, +8 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following wizard spells prepared:\n\n- Cantrips (at will): mage hand, minor illusion, prestidigitation\n- 1st level (4 slots): detect magic, identify, shield\n- 2nd level (3 slots): darkness, locate object, suggestion\n- 3rd level (3 slots): dispel magic, remove curse, tongues\n- 4th level (3 slots): banishment, greater invisibility\n- 5th level (1 slot): legend lore",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The sphinx makes two claw attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
					"attack_bonus": 9,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			],
			"legendary_actions": [
				{
					"name": "Claw Attack",
					"desc": "The sphinx makes one claw attack.",
					"attack_bonus": 0
				},
				{
					"name": "Teleport (Costs 2 Actions)",
					"desc": "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
					"attack_bonus": 0
				},
				{
					"name": "Cast a Spell (Costs 3 Actions)",
					"desc": "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Half-Red Dragon Veteran",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "human",
			"alignment": "any alignment",
			"armor_class": 18,
			"hit_points": 65,
			"hit_dice": "10d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 13,
			"constitution": 14,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "fire",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 12",
			"languages": "Common, Draconic",
			"challenge_rating": "5",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
					"attack_bonus": 0
				},
				{
					"name": "Longsword",
					"desc": "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Heavy Crossbow",
					"desc": "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d10",
					"damage_bonus": 1
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The veteran exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "7d6"
				}
			]
		},
		{
			"name": "Harpy",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 11,
			"hit_points": 38,
			"hit_dice": "7d8",
			"speed": "20 ft., fly 40 ft.",
			"strength": 12,
			"dexterity": 13,
			"constitution": 12,
			"intelligence": 7,
			"wisdom": 10,
			"charisma": 13,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "Common",
			"challenge_rating": "1",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The harpy makes two attacks: one with its claws and one with its club.",
					"attack_bonus": 0
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "2d4",
					"damage_bonus": 1
				},
				{
					"name": "Club",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				},
				{
					"name": "Luring Song",
					"desc": "The harpy sings a magical melody. Every humanoid and giant within 300 ft. of the harpy that can hear the song must succeed on a DC 11 Wisdom saving throw or be charmed until the song ends. The harpy must take a bonus action on its subsequent turns to continue singing. It can stop singing at any time. The song ends if the harpy is incapacitated.\nWhile charmed by the harpy, a target is incapacitated and ignores the songs of other harpies. If the charmed target is more than 5 ft. away from the harpy, the must move on its turn toward the harpy by the most direct route. It doesn't avoid opportunity attacks, but before moving into damaging terrain, such as lava or a pit, and whenever it takes damage from a source other than the harpy, a target can repeat the saving throw. A creature can also repeat the saving throw at the end of each of its turns. If a creature's saving throw is successful, the effect ends on it.\nA target that successfully saves is immune to this harpy's song for the next 24 hours.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Hawk",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "10 ft., fly 60 ft.",
			"strength": 5,
			"dexterity": 16,
			"constitution": 8,
			"intelligence": 2,
			"wisdom": 14,
			"charisma": 6,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
					"attack_bonus": 5,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Hell Hound",
			"size": "Medium",
			"type": "fiend",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 15,
			"hit_points": 45,
			"hit_dice": "7d8",
			"speed": "50 ft.",
			"strength": 17,
			"dexterity": 12,
			"constitution": 14,
			"intelligence": 6,
			"wisdom": 13,
			"charisma": 6,
			"perception": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 15",
			"languages": "understands Infernal but can't speak it",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The hound has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The hound has advantage on an attack roll against a creature if at least one of the hound's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 7 (2d6) fire damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The hound exhales fire in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "6d6"
				}
			]
		},
		{
			"name": "Hezrou",
			"size": "Large",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 16,
			"hit_points": 136,
			"hit_dice": "13d10",
			"speed": "30 ft.",
			"strength": 19,
			"dexterity": 17,
			"constitution": 20,
			"intelligence": 5,
			"wisdom": 12,
			"charisma": 13,
			"strength_save": 7,
			"constitution_save": 8,
			"wisdom_save": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 11",
			"languages": "Abyssal, telepathy 120 ft.",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The hezrou has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Stench",
					"desc": "Any creature that starts its turn within 10 feet of the hezrou must succeed on a DC 14 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the hezrou's stench for 24 hours.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The hezrou makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d10",
					"damage_bonus": 4
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Variant: Summon Demon (1/Day)",
					"desc": "The demon chooses what to summon and attempts a magical summoning.\nA hezrou has a 30 percent chance of summoning 2d6 dretches or one hezrou.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Hill Giant",
			"size": "Huge",
			"type": "giant",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 13,
			"hit_points": 105,
			"hit_dice": "10d12",
			"speed": "40 ft.",
			"strength": 21,
			"dexterity": 8,
			"constitution": 19,
			"intelligence": 5,
			"wisdom": 9,
			"charisma": 6,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "Giant",
			"challenge_rating": "5",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The giant makes two greatclub attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatclub",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 18 (3d8 + 5) bludgeoning damage.",
					"attack_bonus": 8,
					"damage_dice": "3d8",
					"damage_bonus": 5
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +8 to hit, range 60/240 ft., one target. Hit: 21 (3d10 + 5) bludgeoning damage.",
					"attack_bonus": 8,
					"damage_dice": "3d10",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Hippogriff",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "40 ft, fly 60 ft.",
			"strength": 17,
			"dexterity": 13,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 8,
			"perception": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 15",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The hippogriff has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The hippogriff makes two attacks: one with its beak and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d10",
					"damage_bonus": 3
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Hobgoblin",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "goblinoid",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 13,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Common, Goblin",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Martial Advantage",
					"desc": "Once per turn, the hobgoblin can deal an extra 7 (2d6) damage to a creature it hits with a weapon attack if that creature is within 5 ft. of an ally of the hobgoblin that isn't incapacitated.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				}
			],
			"actions": [
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage, or 6 (1d10 + 1) slashing damage if used with two hands.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Homunculus",
			"size": "Tiny",
			"type": "construct",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 13,
			"hit_points": 5,
			"hit_dice": "2d4",
			"speed": "20 ft., fly 40 ft.",
			"strength": 4,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "charmed, poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "understands the languages of its creator but can't speak",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Telepathic Bond",
					"desc": "While the homunculus is on the same plane of existence as its master, it can magically convey what it senses to its master, and the two can communicate telepathically.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or be poisoned for 1 minute. If the saving throw fails by 5 or more, the target is instead poisoned for 5 (1d10) minutes and unconscious while poisoned in this way.",
					"attack_bonus": 4,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Horned Devil",
			"size": "Large",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 148,
			"hit_dice": "17d10",
			"speed": "20 ft., fly 60 ft.",
			"strength": 22,
			"dexterity": 17,
			"constitution": 21,
			"intelligence": 12,
			"wisdom": 16,
			"charisma": 17,
			"strength_save": 10,
			"dexterity_save": 7,
			"wisdom_save": 7,
			"charisma_save": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 13",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the devil's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The devil has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The devil makes three melee attacks: two with its fork and one with its tail. It can use Hurl Flame in place of any melee attack.",
					"attack_bonus": 0
				},
				{
					"name": "Fork",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (2d8 + 6) piercing damage.",
					"attack_bonus": 10,
					"damage_dice": "2d8",
					"damage_bonus": 6
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 10 (1d8 + 6) piercing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 17 Constitution saving throw or lose 10 (3d6) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 10 (3d6). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
					"attack_bonus": 10,
					"damage_dice": "1d8",
					"damage_bonus": 6
				},
				{
					"name": "Hurl Flame",
					"desc": "Ranged Spell Attack: +7 to hit, range 150 ft., one target. Hit: 14 (4d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
					"attack_bonus": 7,
					"damage_dice": "4d6"
				}
			]
		},
		{
			"name": "Hunter Shark",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 45,
			"hit_dice": "6d10",
			"speed": "swim 40 ft.",
			"strength": 18,
			"dexterity": 13,
			"constitution": 15,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 4,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Blood Frenzy",
					"desc": "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The shark can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Hydra",
			"size": "Huge",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 15,
			"hit_points": 172,
			"hit_dice": "15d12",
			"speed": "30 ft., swim 30 ft.",
			"strength": 20,
			"dexterity": 12,
			"constitution": 20,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 7,
			"perception": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 16",
			"languages": "",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "The hydra can hold its breath for 1 hour.",
					"attack_bonus": 0
				},
				{
					"name": "Multiple Heads",
					"desc": "The hydra has five heads. While it has more than one head, the hydra has advantage on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.\nWhenever the hydra takes 25 or more damage in a single turn, one of its heads dies. If all its heads die, the hydra dies.\nAt the end of its turn, it grows two heads for each of its heads that died since its last turn, unless it has taken fire damage since its last turn. The hydra regains 10 hit points for each head regrown in this way.",
					"attack_bonus": 0
				},
				{
					"name": "Reactive Heads",
					"desc": "For each head the hydra has beyond one, it gets an extra reaction that can be used only for opportunity attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Wakeful",
					"desc": "While the hydra sleeps, at least one of its heads is awake.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The hydra makes as many bite attacks as it has heads.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
					"attack_bonus": 8,
					"damage_dice": "1d10",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Hyena",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 5,
			"hit_dice": "1d8",
			"speed": "50 ft.",
			"strength": 11,
			"dexterity": 13,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 5,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Pack Tactics",
					"desc": "The hyena has advantage on an attack roll against a creature if at least one of the hyena's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "1d6"
				}
			]
		},
		{
			"name": "Ice Devil",
			"size": "Large",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 180,
			"hit_dice": "19d10",
			"speed": "40 ft.",
			"strength": 21,
			"dexterity": 14,
			"constitution": 18,
			"intelligence": 18,
			"wisdom": 15,
			"charisma": 18,
			"dexterity_save": 7,
			"constitution_save": 9,
			"wisdom_save": 7,
			"charisma_save": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "blindsight 60 ft., darkvision 120 ft., passive Perception 12",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "14",
			"special_abilities": [
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the devil's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The devil has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The devil makes three attacks: one with its bite, one with its claws, and one with its tail.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) piercing damage plus 10 (3d6) cold damage.",
					"attack_bonus": 10,
					"damage_dice": "2d6 + 3d6",
					"damage_bonus": 5
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 10 (2d4 + 5) slashing damage plus 10 (3d6) cold damage.",
					"attack_bonus": 10,
					"damage_dice": "2d4 + 3d6",
					"damage_bonus": 5
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack:+10 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage plus 10 (3d6) cold damage.",
					"attack_bonus": 10,
					"damage_dice": "2d6 + 3d6",
					"damage_bonus": 5
				},
				{
					"name": "Wall of Ice",
					"desc": "The devil magically forms an opaque wall of ice on a solid surface it can see within 60 feet of it. The wall is 1 foot thick and up to 30 feet long and 10 feet high, or it's a hemispherical dome up to 20 feet in diameter.\nWhen the wall appears, each creature in its space is pushed out of it by the shortest route. The creature chooses which side of the wall to end up on, unless the creature is incapacitated. The creature then makes a DC 17 Dexterity saving throw, taking 35 (10d6) cold damage on a failed save, or half as much damage on a successful one.\nThe wall lasts for 1 minute or until the devil is incapacitated or dies. The wall can be damaged and breached; each 10-foot section has AC 5, 30 hit points, vulnerability to fire damage, and immunity to acid, cold, necrotic, poison, and psychic damage. If a section is destroyed, it leaves behind a sheet of frigid air in the space the wall occupied. Whenever a creature finishes moving through the frigid air on a turn, willingly or otherwise, the creature must make a DC 17 Constitution saving throw, taking 17 (5d6) cold damage on a failed save, or half as much damage on a successful one. The frigid air dissipates when the rest of the wall vanishes.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ice Mephit",
			"size": "Small",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 11,
			"hit_points": 21,
			"hit_dice": "6d6",
			"speed": "30 ft., fly 30 ft.",
			"strength": 7,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 9,
			"wisdom": 11,
			"charisma": 12,
			"perception": 2,
			"stealth": 3,
			"damage_vulnerabilities": "bludgeoning, fire",
			"damage_resistances": "",
			"damage_immunities": "cold, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "Aquan, Auran",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Death Burst",
					"desc": "When the mephit dies, it explodes in a burst of jagged ice. Each creature within 5 ft. of it must make a DC 10 Dexterity saving throw, taking 4 (1d8) slashing damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "1d8"
				},
				{
					"name": "False Appearance",
					"desc": "While the mephit remains motionless, it is indistinguishable from an ordinary shard of ice.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting (1/Day)",
					"desc": "The mephit can innately cast fog cloud, requiring no material components. Its innate spellcasting ability is Charisma.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) cold damage.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				},
				{
					"name": "Frost Breath (Recharge 6)",
					"desc": "The mephit exhales a 15-foot cone of cold air. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 5 (2d4) cold damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Mephits (1/Day)",
					"desc": "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Imp",
			"size": "Tiny",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 13,
			"hit_points": 10,
			"hit_dice": "3d4",
			"speed": "20 ft., fly 40 ft.",
			"strength": 6,
			"dexterity": 17,
			"constitution": 13,
			"intelligence": 11,
			"wisdom": 12,
			"charisma": 14,
			"deception": 4,
			"insight": 3,
			"persuasion": 4,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical/nonsilver weapons",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 11",
			"languages": "Infernal, Common",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The imp can use its action to polymorph into a beast form that resembles a rat (speed 20 ft.), a raven (20 ft., fly 60 ft.), or a spider (20 ft., climb 20 ft.), or back into its true form. Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the imp's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The imp has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Familiar",
					"desc": "The imp can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the imp is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the imp can end its service as a familiar, ending the telepathic bond.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Sting (Bite in Beast Form)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must make on a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 3
				},
				{
					"name": "Invisibility",
					"desc": "The imp magically turns invisible until it attacks, or until its concentration ends (as if concentrating on a spell). Any equipment the imp wears or carries is invisible with it.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Invisible Stalker",
			"size": "Medium",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 14,
			"hit_points": 104,
			"hit_dice": "16d8",
			"speed": "50 ft., fly 50 ft. (hover)",
			"strength": 16,
			"dexterity": 19,
			"constitution": 14,
			"intelligence": 10,
			"wisdom": 15,
			"charisma": 11,
			"perception": 8,
			"stealth": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
			"senses": "darkvision 60 ft., passive Perception 18",
			"languages": "Auran, understands Common but doesn't speak it",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Invisibility",
					"desc": "The stalker is invisible.",
					"attack_bonus": 0
				},
				{
					"name": "Faultless Tracker",
					"desc": "The stalker is given a quarry by its summoner. The stalker knows the direction and distance to its quarry as long as the two of them are on the same plane of existence. The stalker also knows the location of its summoner.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The stalker makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Iron Golem",
			"size": "Large",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 20,
			"hit_points": 210,
			"hit_dice": "20d10",
			"speed": "30 ft.",
			"strength": 24,
			"dexterity": 9,
			"constitution": 20,
			"intelligence": 3,
			"wisdom": 11,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
			"senses": "darkvision 120 ft., passive Perception 10",
			"languages": "understands the languages of its creator but can't speak",
			"challenge_rating": "16",
			"special_abilities": [
				{
					"name": "Fire Absorption",
					"desc": "Whenever the golem is subjected to fire damage, it takes no damage and instead regains a number of hit points equal to the fire damage dealt.",
					"attack_bonus": 0
				},
				{
					"name": "Immutable Form",
					"desc": "The golem is immune to any spell or effect that would alter its form.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The golem has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The golem's weapon attacks are magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The golem makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
					"attack_bonus": 13,
					"damage_dice": "3d8",
					"damage_bonus": 7
				},
				{
					"name": "Sword",
					"desc": "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 23 (3d10 + 7) slashing damage.",
					"attack_bonus": 13,
					"damage_dice": "3d10",
					"damage_bonus": 7
				},
				{
					"name": "Poison Breath (Recharge 5-6)",
					"desc": "The golem exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 45 (l0d8) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "10d8"
				}
			]
		},
		{
			"name": "Jackal",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 3,
			"hit_dice": "1d6",
			"speed": "40 ft.",
			"strength": 8,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 6,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The jackal has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The jackal has advantage on an attack roll against a creature if at least one of the jackal's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 — 1) piercing damage.",
					"attack_bonus": 1,
					"damage_dice": "1d4",
					"damage_bonus": -1
				}
			]
		},
		{
			"name": "Killer Whale",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 90,
			"hit_dice": "12d12",
			"speed": "swim 60 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 120 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Echolocation",
					"desc": "The whale can't use its blindsight while deafened.",
					"attack_bonus": 0
				},
				{
					"name": "Hold Breath",
					"desc": "The whale can hold its breath for 30 minutes",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing",
					"desc": "The whale has advantage on Wisdom (Perception) checks that rely on hearing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 21 (5d6 + 4) piercing damage.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Knight",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 18,
			"hit_points": 52,
			"hit_dice": "8d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 11,
			"constitution": 14,
			"intelligence": 11,
			"wisdom": 11,
			"charisma": 15,
			"constitution_save": 4,
			"wisdom_save": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language (usually Common)",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Brave",
					"desc": "The knight has advantage on saving throws against being frightened.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The knight makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatsword",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Heavy Crossbow",
					"desc": "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "1d10"
				},
				{
					"name": "Leadership (Recharges after a Short or Long Rest)",
					"desc": "For 1 minute, the knight can utter a special command or warning whenever a nonhostile creature that it can see within 30 ft. of it makes an attack roll or a saving throw. The creature can add a d4 to its roll provided it can hear and understand the knight. A creature can benefit from only one Leadership die at a time. This effect ends if the knight is incapacitated.",
					"attack_bonus": 0
				}
			],
			"reactions": [
				{
					"name": "Parry",
					"desc": "The knight adds 2 to its AC against one melee attack that would hit it. To do so, the knight must see the attacker and be wielding a melee weapon.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Kobold",
			"size": "Small",
			"type": "humanoid",
			"subtype": "kobold",
			"alignment": "lawful evil",
			"armor_class": 12,
			"hit_points": 5,
			"hit_dice": "2d6",
			"speed": "30 ft.",
			"strength": 7,
			"dexterity": 15,
			"constitution": 9,
			"intelligence": 8,
			"wisdom": 7,
			"charisma": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 8",
			"languages": "Common, Draconic",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the kobold has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The kobold has advantage on an attack roll against a creature if at least one of the kobold's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Dagger",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Sling",
					"desc": "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Kraken",
			"size": "Gargantuan",
			"type": "monstrosity",
			"subtype": "titan",
			"alignment": "chaotic evil",
			"armor_class": 18,
			"hit_points": 472,
			"hit_dice": "27d20",
			"speed": "20 ft., swim 60 ft.",
			"strength": 30,
			"dexterity": 11,
			"constitution": 25,
			"intelligence": 22,
			"wisdom": 18,
			"charisma": 20,
			"strength_save": 17,
			"dexterity_save": 7,
			"constitution_save": 14,
			"intelligence_save": 13,
			"wisdom_save": 11,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "frightened, paralyzed",
			"senses": "truesight 120 ft., passive Perception 14",
			"languages": "understands Abyssal, Celestial, Infernal, and Primordial but can't speak, telepathy 120 ft.",
			"challenge_rating": "23",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The kraken can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Freedom of Movement",
					"desc": "The kraken ignores difficult terrain, and magical effects can't reduce its speed or cause it to be restrained. It can spend 5 feet of movement to escape from nonmagical restraints or being grappled.",
					"attack_bonus": 0
				},
				{
					"name": "Siege Monster",
					"desc": "The kraken deals double damage to objects and structures.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The kraken makes three tentacle attacks, each of which it can replace with one use of Fling.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 23 (3d8 + 10) piercing damage. If the target is a Large or smaller creature grappled by the kraken, that creature is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the kraken, and it takes 42 (12d6) acid damage at the start of each of the kraken's turns. If the kraken takes 50 damage or more on a single turn from a creature inside it, the kraken must succeed on a DC 25 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the kraken. If the kraken dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
					"attack_bonus": 7,
					"damage_dice": "3d8",
					"damage_bonus": 10
				},
				{
					"name": "Tentacle",
					"desc": "Melee Weapon Attack: +7 to hit, reach 30 ft., one target. Hit: 20 (3d6 + 10) bludgeoning damage, and the target is grappled (escape DC 18). Until this grapple ends, the target is restrained. The kraken has ten tentacles, each of which can grapple one target.",
					"attack_bonus": 7,
					"damage_dice": "3d6",
					"damage_bonus": 10
				},
				{
					"name": "Fling",
					"desc": "One Large or smaller object held or creature grappled by the kraken is thrown up to 60 feet in a random direction and knocked prone. If a thrown target strikes a solid surface, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 18 Dexterity saving throw or take the same damage and be knocked prone.",
					"attack_bonus": 0
				},
				{
					"name": "Lightning Storm",
					"desc": "The kraken magically creates three bolts of lightning, each of which can strike a target the kraken can see within 120 feet of it. A target must make a DC 23 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "4d10"
				}
			],
			"legendary_actions": [
				{
					"name": "Tentacle Attack or Fling",
					"desc": "The kraken makes one tentacle attack or uses its Fling.",
					"attack_bonus": 0
				},
				{
					"name": "Lightning Storm (Costs 2 Actions)",
					"desc": "The kraken uses Lightning Storm.",
					"attack_bonus": 0
				},
				{
					"name": "Ink Cloud (Costs 3 Actions)",
					"desc": "While underwater, the kraken expels an ink cloud in a 60-foot radius. The cloud spreads around corners, and that area is heavily obscured to creatures other than the kraken. Each creature other than the kraken that ends its turn there must succeed on a DC 23 Constitution saving throw, taking 16 (3d10) poison damage on a failed save, or half as much damage on a successful one. A strong current disperses the cloud, which otherwise disappears at the end of the kraken's next turn.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Lamia",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 13,
			"hit_points": 97,
			"hit_dice": "13d10",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 13,
			"constitution": 15,
			"intelligence": 14,
			"wisdom": 15,
			"charisma": 16,
			"deception": 7,
			"insight": 4,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "Abyssal, Common",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Innate Spellcasting",
					"desc": "The lamia's innate spellcasting ability is Charisma (spell save DC 13). It can innately cast the following spells, requiring no material components. At will: disguise self (any humanoid form), major image 3/day each: charm person, mirror image, scrying, suggestion 1/day: geas",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The lamia makes two attacks: one with its claws and one with its dagger or Intoxicating Touch.",
					"attack_bonus": 0
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d10",
					"damage_bonus": 3
				},
				{
					"name": "Dagger",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 3
				},
				{
					"name": "Intoxicating Touch",
					"desc": "Melee Spell Attack: +5 to hit, reach 5 ft., one creature. Hit: The target is magically cursed for 1 hour. Until the curse ends, the target has disadvantage on Wisdom saving throws and all ability checks.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Lemure",
			"size": "Medium",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 7,
			"hit_points": 13,
			"hit_dice": "3d8",
			"speed": "15 ft.",
			"strength": 10,
			"dexterity": 5,
			"constitution": 11,
			"intelligence": 1,
			"wisdom": 11,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold",
			"damage_immunities": "fire, poison",
			"condition_immunities": "charmed, frightened, poisoned",
			"senses": "darkvision 120 ft., passive Perception 10",
			"languages": "understands infernal but can't speak",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Devil's Sight",
					"desc": "Magical darkness doesn't impede the lemure's darkvision.",
					"attack_bonus": 0
				},
				{
					"name": "Hellish Rejuvenation",
					"desc": "A lemure that dies in the Nine Hells comes back to life with all its hit points in 1d10 days unless it is killed by a good-aligned creature with a bless spell cast on that creature or its remains are sprinkled with holy water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Fist",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage",
					"attack_bonus": 3,
					"damage_dice": "1d4"
				}
			]
		},
		{
			"name": "Lich",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "any evil alignment",
			"armor_class": 17,
			"hit_points": 135,
			"hit_dice": "18d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 16,
			"constitution": 16,
			"intelligence": 20,
			"wisdom": 14,
			"charisma": 16,
			"constitution_save": 10,
			"intelligence_save": 12,
			"wisdom_save": 9,
			"arcana": 18,
			"history": 12,
			"insight": 9,
			"perception": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, lightning, necrotic",
			"damage_immunities": "poison; bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, poisoned",
			"senses": "truesight 120 ft., passive Perception 19",
			"languages": "Common plus up to five other languages",
			"challenge_rating": "21",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the lich fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				},
				{
					"name": "Rejuvenation",
					"desc": "If it has a phylactery, a destroyed lich gains a new body in 1d10 days, regaining all its hit points and becoming active again. The new body appears within 5 feet of the phylactery.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The lich is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 20, +12 to hit with spell attacks). The lich has the following wizard spells prepared:\n\n- Cantrips (at will): mage hand, prestidigitation, ray of frost\n- 1st level (4 slots): detect magic, magic missile, shield, thunderwave\n- 2nd level (3 slots): detect thoughts, invisibility, Melf's acid arrow, mirror image\n- 3rd level (3 slots): animate dead, counterspell, dispel magic, fireball\n- 4th level (3 slots): blight, dimension door\n- 5th level (3 slots): cloudkill, scrying\n- 6th level (1 slot): disintegrate, globe of invulnerability\n- 7th level (1 slot): finger of death, plane shift\n- 8th level (1 slot): dominate monster, power word stun\n- 9th level (1 slot): power word kill",
					"attack_bonus": 0
				},
				{
					"name": "Turn Resistance",
					"desc": "The lich has advantage on saving throws against any effect that turns undead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Paralyzing Touch",
					"desc": "Melee Spell Attack: +12 to hit, reach 5 ft., one creature. Hit: 10 (3d6) cold damage. The target must succeed on a DC 18 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 12,
					"damage_dice": "3d6"
				}
			],
			"legendary_actions": [
				{
					"name": "Cantrip",
					"desc": "The lich casts a cantrip.",
					"attack_bonus": 0
				},
				{
					"name": "Paralyzing Touch (Costs 2 Actions)",
					"desc": "The lich uses its Paralyzing Touch.",
					"attack_bonus": 0
				},
				{
					"name": "Frightening Gaze (Costs 2 Actions)",
					"desc": "The lich fixes its gaze on one creature it can see within 10 feet of it. The target must succeed on a DC 18 Wisdom saving throw against this magic or become frightened for 1 minute. The frightened target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to the lich's gaze for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Disrupt Life (Costs 3 Actions)",
					"desc": "Each living creature within 20 feet of the lich must make a DC 18 Constitution saving throw against this magic, taking 21 (6d6) necrotic damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "6d6"
				}
			]
		},
		{
			"name": "Lion",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 26,
			"hit_dice": "4d10",
			"speed": "50 ft.",
			"strength": 17,
			"dexterity": 15,
			"constitution": 13,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 8,
			"perception": 3,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The lion has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The lion has advantage on an attack roll against a creature if at least one of the lion's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				},
				{
					"name": "Pounce",
					"desc": "If the lion moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the lion can make one bite attack against it as a bonus action.",
					"attack_bonus": 0
				},
				{
					"name": "Running Leap",
					"desc": "With a 10-foot running start, the lion can long jump up to 25 ft..",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Lizard",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 2,
			"hit_dice": "1d4",
			"speed": "20 ft., climb 20 ft.",
			"strength": 2,
			"dexterity": 11,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 8,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "0",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
					"attack_bonus": 0,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Lizardfolk",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "lizardfolk",
			"alignment": "neutral",
			"armor_class": 15,
			"hit_points": 22,
			"hit_dice": "4d8",
			"speed": "30 ft., swim 30 ft.",
			"strength": 15,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 7,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"stealth": 4,
			"survival": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "Draconic",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "The lizardfolk can hold its breath for 15 minutes.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The lizardfolk makes two melee attacks, each one with a different weapon.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Heavy Club",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Javelin",
					"desc": "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Spiked Shield",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Mage",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 12,
			"hit_points": 40,
			"hit_dice": "9d8",
			"speed": "30 ft.",
			"strength": 9,
			"dexterity": 14,
			"constitution": 11,
			"intelligence": 17,
			"wisdom": 12,
			"charisma": 11,
			"intelligence_save": 6,
			"wisdom_save": 4,
			"arcana": 6,
			"history": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "any four languages",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Spellcasting",
					"desc": "The mage is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks). The mage has the following wizard spells prepared:\n\n- Cantrips (at will): fire bolt, light, mage hand, prestidigitation\n- 1st level (4 slots): detect magic, mage armor, magic missile, shield\n- 2nd level (3 slots): misty step, suggestion\n- 3rd level (3 slots): counterspell, fireball, fly\n- 4th level (3 slots): greater invisibility, ice storm\n- 5th level (1 slot): cone of cold",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Dagger",
					"desc": "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Magma Mephit",
			"size": "Small",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 11,
			"hit_points": 22,
			"hit_dice": "5d6",
			"speed": "30 ft., fly 30 ft.",
			"strength": 8,
			"dexterity": 12,
			"constitution": 12,
			"intelligence": 7,
			"wisdom": 10,
			"charisma": 10,
			"stealth": 3,
			"damage_vulnerabilities": "cold",
			"damage_resistances": "",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Ignan, Terran",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Death Burst",
					"desc": "When the mephit dies, it explodes in a burst of lava. Each creature within 5 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				},
				{
					"name": "False Appearance",
					"desc": "While the mephit remains motionless, it is indistinguishable from an ordinary mound of magma.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting (1/Day)",
					"desc": "The mephit can innately cast heat metal (spell save DC 10), requiring no material components. Its innate spellcasting ability is Charisma.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft ., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) fire damage.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				},
				{
					"name": "Fire Breath (Recharge 6)",
					"desc": "The mephit exhales a 15-foot cone of fire. Each creature in that area must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Mephits (1/Day)",
					"desc": "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Magmin",
			"size": "Small",
			"type": "elemental",
			"subtype": "",
			"alignment": "chaotic neutral",
			"armor_class": 14,
			"hit_points": 9,
			"hit_dice": "2d6",
			"speed": "30 ft.",
			"strength": 7,
			"dexterity": 15,
			"constitution": 12,
			"intelligence": 8,
			"wisdom": 11,
			"charisma": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Ignan",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Death Burst",
					"desc": "When the magmin dies, it explodes in a burst of fire and magma. Each creature within 10 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one. Flammable objects that aren't being worn or carried in that area are ignited.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				},
				{
					"name": "Ignited Illumination",
					"desc": "As a bonus action, the magmin can set itself ablaze or extinguish its flames. While ablaze, the magmin sheds bright light in a 10-foot radius and dim light for an additional 10 ft.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Touch",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d6) fire damage. If the target is a creature or a flammable object, it ignites. Until a target takes an action to douse the fire, the target takes 3 (1d6) fire damage at the end of each of its turns.",
					"attack_bonus": 4,
					"damage_dice": "2d6"
				}
			]
		},
		{
			"name": "Mammoth",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 126,
			"hit_dice": "11d12",
			"speed": "40 ft.",
			"strength": 24,
			"dexterity": 9,
			"constitution": 21,
			"intelligence": 3,
			"wisdom": 11,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Trampling Charge",
					"desc": "If the mammoth moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 18 Strength saving throw or be knocked prone. If the target is prone, the mammoth can make one stomp attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 25 (4d8 + 7) piercing damage.",
					"attack_bonus": 10,
					"damage_dice": "4d8",
					"damage_bonus": 7
				},
				{
					"name": "Stomp",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one prone creature. Hit: 29 (4d10 + 7) bludgeoning damage.",
					"attack_bonus": 10,
					"damage_dice": "4d10",
					"damage_bonus": 7
				}
			]
		},
		{
			"name": "Manticore",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 14,
			"hit_points": 68,
			"hit_dice": "8d10",
			"speed": "30 ft., fly 50 ft.",
			"strength": 17,
			"dexterity": 16,
			"constitution": 17,
			"intelligence": 7,
			"wisdom": 12,
			"charisma": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Tail Spike Regrowth",
					"desc": "The manticore has twenty-four tail spikes. Used spikes regrow when the manticore finishes a long rest.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The manticore makes three attacks: one with its bite and two with its claws or three with its tail spikes.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Tail Spike",
					"desc": "Ranged Weapon Attack: +5 to hit, range 100/200 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Marilith",
			"size": "Large",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 18,
			"hit_points": 189,
			"hit_dice": "18d10",
			"speed": "40 ft.",
			"strength": 18,
			"dexterity": 20,
			"constitution": 20,
			"intelligence": 18,
			"wisdom": 16,
			"charisma": 20,
			"strength_save": 9,
			"constitution_save": 10,
			"wisdom_save": 8,
			"charisma_save": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "truesight 120 ft., passive Perception 13",
			"languages": "Abyssal, telepathy 120 ft.",
			"challenge_rating": "16",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The marilith has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The marilith's weapon attacks are magical.",
					"attack_bonus": 0
				},
				{
					"name": "Reactive",
					"desc": "The marilith can take one reaction on every turn in combat.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The marilith can make seven attacks: six with its longswords and one with its tail.",
					"attack_bonus": 0
				},
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
					"attack_bonus": 9,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 15 (2d10 + 4) bludgeoning damage. If the target is Medium or smaller, it is grappled (escape DC 19). Until this grapple ends, the target is restrained, the marilith can automatically hit the target with its tail, and the marilith can't make tail attacks against other targets.",
					"attack_bonus": 9,
					"damage_dice": "2d10",
					"damage_bonus": 4
				},
				{
					"name": "Teleport",
					"desc": "The marilith magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Demon (1/Day)",
					"desc": "The demon chooses what to summon and attempts a magical summoning.\nA marilith has a 50 percent chance of summoning 1d6 vrocks, 1d4 hezrous, 1d3 glabrezus, 1d2 nalfeshnees, or one marilith.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			],
			"reactions": [
				{
					"name": "Parry",
					"desc": "The marilith adds 5 to its AC against one melee attack that would hit it. To do so, the marilith must see the attacker and be wielding a melee weapon.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Mastiff",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 5,
			"hit_dice": "1d8",
			"speed": "40 ft.",
			"strength": 13,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The mastiff has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Medusa",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 15,
			"hit_points": 127,
			"hit_dice": "17d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 12,
			"wisdom": 13,
			"charisma": 15,
			"deception": 5,
			"insight": 4,
			"perception": 4,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Common",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Petrifying Gaze",
					"desc": "When a creature that can see the medusa's eyes starts its turn within 30 ft. of the medusa, the medusa can force it to make a DC 14 Constitution saving throw if the medusa isn't incapacitated and can see the creature. If the saving throw fails by 5 or more, the creature is instantly petrified. Otherwise, a creature that fails the save begins to turn to stone and is restrained. The restrained creature must repeat the saving throw at the end of its next turn, becoming petrified on a failure or ending the effect on a success. The petrification lasts until the creature is freed by the greater restoration spell or other magic.\nUnless surprised, a creature can avert its eyes to avoid the saving throw at the start of its turn. If the creature does so, it can't see the medusa until the start of its next turn, when it can avert its eyes again. If the creature looks at the medusa in the meantime, it must immediately make the save.\nIf the medusa sees itself reflected on a polished surface within 30 ft. of it and in an area of bright light, the medusa is, due to its curse, affected by its own gaze.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The medusa makes either three melee attacks —  one with its snake hair and two with its shortsword — or two ranged attacks with its longbow.",
					"attack_bonus": 0
				},
				{
					"name": "Snake Hair",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage plus 14 (4d6) poison damage.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +5 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage plus 7 (2d6) poison damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6"
				}
			]
		},
		{
			"name": "Merfolk",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "merfolk",
			"alignment": "neutral",
			"armor_class": 11,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "10 ft., swim 40 ft.",
			"strength": 10,
			"dexterity": 13,
			"constitution": 12,
			"intelligence": 11,
			"wisdom": 11,
			"charisma": 12,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "Aquan, Common",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The merfolk can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +2 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 3 (1d6) piercing damage, or 4 (1d8) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 2,
					"damage_dice": "1d6"
				}
			]
		},
		{
			"name": "Merrow",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 13,
			"hit_points": 45,
			"hit_dice": "6d10",
			"speed": "10 ft., swim 40 ft.",
			"strength": 18,
			"dexterity": 10,
			"constitution": 15,
			"intelligence": 8,
			"wisdom": 10,
			"charisma": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Abyssal, Aquan",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The merrow can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The merrow makes two attacks: one with its bite and one with its claws or harpoon.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d4",
					"damage_bonus": 4
				},
				{
					"name": "Harpoon",
					"desc": "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a Huge or smaller creature, it must succeed on a Strength contest against the merrow or be pulled up to 20 feet toward the merrow.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Mimic",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "shapechanger",
			"alignment": "neutral",
			"armor_class": 12,
			"hit_points": 58,
			"hit_dice": "9d8",
			"speed": "15 ft.",
			"strength": 17,
			"dexterity": 12,
			"constitution": 15,
			"intelligence": 5,
			"wisdom": 13,
			"charisma": 8,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "prone",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The mimic can use its action to polymorph into an object or back into its true, amorphous form. Its statistics are the same in each form. Any equipment it is wearing or carrying isn 't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Adhesive (Object Form Only)",
					"desc": "The mimic adheres to anything that touches it. A Huge or smaller creature adhered to the mimic is also grappled by it (escape DC 13). Ability checks made to escape this grapple have disadvantage.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance (Object Form Only)",
					"desc": "While the mimic remains motionless, it is indistinguishable from an ordinary object.",
					"attack_bonus": 0
				},
				{
					"name": "Grappler",
					"desc": "The mimic has advantage on attack rolls against any creature grappled by it.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Pseudopod",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage. If the mimic is in object form, the target is subjected to its Adhesive trait.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) acid damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8 + 1d8",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Minotaur",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 14,
			"hit_points": 76,
			"hit_dice": "9d10",
			"speed": "40 ft.",
			"strength": 18,
			"dexterity": 11,
			"constitution": 16,
			"intelligence": 6,
			"wisdom": 16,
			"charisma": 9,
			"perception": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 17",
			"languages": "Abyssal",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the minotaur moves at least 10 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 ft. away and knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d8"
				},
				{
					"name": "Labyrinthine Recall",
					"desc": "The minotaur can perfectly recall any path it has traveled.",
					"attack_bonus": 0
				},
				{
					"name": "Reckless",
					"desc": "At the start of its turn, the minotaur can gain advantage on all melee weapon attack rolls it makes during that turn, but attack rolls against it have advantage until the start of its next turn.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Greataxe",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d12",
					"damage_bonus": 4
				},
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Minotaur Skeleton",
			"size": "Large",
			"type": "undead",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 12,
			"hit_points": 67,
			"hit_dice": "9d10",
			"speed": "40 ft.",
			"strength": 18,
			"dexterity": 11,
			"constitution": 15,
			"intelligence": 6,
			"wisdom": 8,
			"charisma": 5,
			"damage_vulnerabilities": "bludgeoning",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, poisoned",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "understands Abyssal but can't speak",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the skeleton moves at least 10 feet straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 feet away and knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d8"
				}
			],
			"actions": [
				{
					"name": "Greataxe",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d12",
					"damage_bonus": 4
				},
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Mule",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "40 ft.",
			"strength": 14,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Beast of Burden",
					"desc": "The mule is considered to be a Large animal for the purpose of determining its carrying capacity.",
					"attack_bonus": 0
				},
				{
					"name": "Sure-Footed",
					"desc": "The mule has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Mummy",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 11,
			"hit_points": 58,
			"hit_dice": "9d8",
			"speed": "20 ft.",
			"strength": 16,
			"dexterity": 8,
			"constitution": 15,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 12,
			"wisdom_save": 2,
			"damage_vulnerabilities": "fire",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "necrotic, poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "the languages it knew in life",
			"challenge_rating": "3",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
					"attack_bonus": 0
				},
				{
					"name": "Rotting Fist",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage plus 10 (3d6) necrotic damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Dreadful Glare",
					"desc": "The mummy targets one creature it can see within 60 ft. of it. If the target can see the mummy, it must succeed on a DC 11 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies (but not mummy lords) for the next 24 hours.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Mummy Lord",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 17,
			"hit_points": 97,
			"hit_dice": "13d8",
			"speed": "20 ft.",
			"strength": 18,
			"dexterity": 10,
			"constitution": 17,
			"intelligence": 11,
			"wisdom": 18,
			"charisma": 16,
			"constitution_save": 8,
			"intelligence_save": 5,
			"wisdom_save": 9,
			"charisma_save": 8,
			"history": 5,
			"religion": 5,
			"damage_vulnerabilities": "bludgeoning",
			"damage_resistances": "",
			"damage_immunities": "necrotic, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, poisoned",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "the languages it knew in life",
			"challenge_rating": "15",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The mummy lord has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Rejuvenation",
					"desc": "A destroyed mummy lord gains a new body in 24 hours if its heart is intact, regaining all its hit points and becoming active again. The new body appears within 5 feet of the mummy lord's heart.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The mummy lord is a 10th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 17, +9 to hit with spell attacks). The mummy lord has the following cleric spells prepared:\n\n- Cantrips (at will): sacred flame, thaumaturgy\n- 1st level (4 slots): command, guiding bolt, shield of faith\n- 2nd level (3 slots): hold person, silence, spiritual weapon\n- 3rd level (3 slots): animate dead, dispel magic\n- 4th level (3 slots): divination, guardian of faith\n- 5th level (2 slots): contagion, insect plague\n- 6th level (1 slot): harm",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
					"attack_bonus": 0
				},
				{
					"name": "Rotting Fist",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage plus 21 (6d6) necrotic damage. If the target is a creature, it must succeed on a DC 16 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
					"attack_bonus": 9,
					"damage_dice": "3d6 + 6d6",
					"damage_bonus": 4
				},
				{
					"name": "Dreadful Glare",
					"desc": "The mummy lord targets one creature it can see within 60 feet of it. If the target can see the mummy lord, it must succeed on a DC 16 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies and mummy lords for the next 24 hours.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Attack",
					"desc": "The mummy lord makes one attack with its rotting fist or uses its Dreadful Glare.",
					"attack_bonus": 0
				},
				{
					"name": "Blinding Dust",
					"desc": "Blinding dust and sand swirls magically around the mummy lord. Each creature within 5 feet of the mummy lord must succeed on a DC 16 Constitution saving throw or be blinded until the end of the creature's next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Blasphemous Word (Costs 2 Actions)",
					"desc": "The mummy lord utters a blasphemous word. Each non-undead creature within 10 feet of the mummy lord that can hear the magical utterance must succeed on a DC 16 Constitution saving throw or be stunned until the end of the mummy lord's next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Channel Negative Energy (Costs 2 Actions)",
					"desc": "The mummy lord magically unleashes negative energy. Creatures within 60 feet of the mummy lord, including ones behind barriers and around corners, can't regain hit points until the end of the mummy lord's next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Whirlwind of Sand (Costs 2 Actions)",
					"desc": "The mummy lord magically transforms into a whirlwind of sand, moves up to 60 feet, and reverts to its normal form. While in whirlwind form, the mummy lord is immune to all damage, and it can't be grappled, petrified, knocked prone, restrained, or stunned. Equipment worn or carried by the mummy lord remain in its possession.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Nalfeshnee",
			"size": "Large",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 18,
			"hit_points": 184,
			"hit_dice": "16d10",
			"speed": "20 ft., fly 30 ft.",
			"strength": 21,
			"dexterity": 10,
			"constitution": 22,
			"intelligence": 19,
			"wisdom": 12,
			"charisma": 15,
			"constitution_save": 11,
			"intelligence_save": 9,
			"wisdom_save": 6,
			"charisma_save": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "truesight 120 ft., passive Perception 11",
			"languages": "Abyssal, telepathy 120 ft.",
			"challenge_rating": "13",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The nalfeshnee has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The nalfeshnee uses Horror Nimbus if it can.  It then makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 32 (5d10 + 5) piercing damage.",
					"attack_bonus": 10,
					"damage_dice": "5d10",
					"damage_bonus": 5
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (3d6 + 5) slashing damage.",
					"attack_bonus": 10,
					"damage_dice": "3d6",
					"damage_bonus": 5
				},
				{
					"name": "Horror Nimbus (Recharge 5-6)",
					"desc": "The nalfeshnee magically emits scintillating, multicolored light. Each creature within 15 feet of the nalfeshnee that can see the light must succeed on a DC 15 Wisdom saving throw or be frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the nalfeshnee's Horror Nimbus for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Teleport",
					"desc": "The nalfeshnee magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Demon (1/Day)",
					"desc": "The demon chooses what to summon and attempts a magical summoning.\nA nalfeshnee has a 50 percent chance of summoning 1d4 vrocks, 1d3 hezrous, 1d2 glabrezus, or one nalfeshnee.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Night Hag",
			"size": "Medium",
			"type": "fiend",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 17,
			"hit_points": 112,
			"hit_dice": "15d8",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 16,
			"wisdom": 14,
			"charisma": 16,
			"deception": 7,
			"insight": 6,
			"perception": 6,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "",
			"condition_immunities": "charmed",
			"senses": "darkvision 120 ft., passive Perception 16",
			"languages": "Abyssal, Common, Infernal, Primordial",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Innate Spellcasting",
					"desc": "The hag's innate spellcasting ability is Charisma (spell save DC 14, +6 to hit with spell attacks). She can innately cast the following spells, requiring no material components:\n\nAt will: detect magic, magic missile\n2/day each: plane shift (self only), ray of enfeeblement, sleep",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The hag has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Night Hag Items",
					"desc": "A night hag carries two very rare magic items that she must craft for herself If either object is lost, the night hag will go to great lengths to retrieve it, as creating a new tool takes time and effort.\nHeartstone: This lustrous black gem allows a night hag to become ethereal while it is in her possession. The touch of a heartstone also cures any disease. Crafting a heartstone takes 30 days.\nSoul Bag: When an evil humanoid dies as a result of a night hag's Nightmare Haunting, the hag catches the soul in this black sack made of stitched flesh. A soul bag can hold only one evil soul at a time, and only the night hag who crafted the bag can catch a soul with it. Crafting a soul bag takes 7 days and a humanoid sacrifice (whose flesh is used to make the bag).",
					"attack_bonus": 0
				},
				{
					"name": "Hag Coven",
					"desc": "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
					"attack_bonus": 0
				},
				{
					"name": "Shared Spellcasting (Coven Only)",
					"desc": "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\n\n- 1st level (4 slots): identify, ray of sickness\n- 2nd level (3 slots): hold person, locate object\n- 3rd level (3 slots): bestow curse, counterspell, lightning bolt\n- 4th level (3 slots): phantasmal killer, polymorph\n- 5th level (2 slots): contact other plane, scrying\n- 6th level (1 slot): eye bite\n\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
					"attack_bonus": 0
				},
				{
					"name": "Hag Eye (Coven Only)",
					"desc": "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws (Hag Form Only)",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Change Shape",
					"desc": "The hag magically polymorphs into a Small or Medium female humanoid, or back into her true form. Her statistics are the same in each form. Any equipment she is wearing or carrying isn't transformed. She reverts to her true form if she dies.",
					"attack_bonus": 0
				},
				{
					"name": "Etherealness",
					"desc": "The hag magically enters the Ethereal Plane from the Material Plane, or vice versa. To do so, the hag must have a heartstone in her possession.",
					"attack_bonus": 0
				},
				{
					"name": "Nightmare Haunting (1/Day)",
					"desc": "While on the Ethereal Plane, the hag magically touches a sleeping humanoid on the Material Plane. A protection from evil and good spell cast on the target prevents this contact, as does a magic circle. As long as the contact persists, the target has dreadful visions. If these visions last for at least 1 hour, the target gains no benefit from its rest, and its hit point maximum is reduced by 5 (1d10). If this effect reduces the target's hit point maximum to 0, the target dies, and if the target was evil, its soul is trapped in the hag's soul bag. The reduction to the target's hit point maximum lasts until removed by the greater restoration spell or similar magic.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Nightmare",
			"size": "Large",
			"type": "fiend",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 13,
			"hit_points": 68,
			"hit_dice": "8d10",
			"speed": "60 ft., fly 90 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 10,
			"wisdom": 13,
			"charisma": 15,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "understands Abyssal, Common, and Infernal but can't speak",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Confer Fire Resistance",
					"desc": "The nightmare can grant resistance to fire damage to anyone riding it.",
					"attack_bonus": 0
				},
				{
					"name": "Illumination",
					"desc": "The nightmare sheds bright light in a 10-foot radius and dim light for an additional 10 feet.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage plus 7 (2d6) fire damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8 + 2d6",
					"damage_bonus": 4
				},
				{
					"name": "Ethereal Stride",
					"desc": "The nightmare and up to three willing creatures within 5 feet of it magically enter the Ethereal Plane from the Material Plane, or vice versa.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Noble",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 15,
			"hit_points": 9,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 12,
			"constitution": 11,
			"intelligence": 12,
			"wisdom": 14,
			"charisma": 16,
			"deception": 5,
			"insight": 4,
			"persuasion": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "any two languages",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Rapier",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				}
			],
			"reactions": [
				{
					"name": "Parry",
					"desc": "The noble adds 2 to its AC against one melee attack that would hit it. To do so, the noble must see the attacker and be wielding a melee weapon.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ochre Jelly",
			"size": "Large",
			"type": "ooze",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 8,
			"hit_points": 45,
			"hit_dice": "6d10",
			"speed": "10 ft., climb 10 ft.",
			"strength": 15,
			"dexterity": 6,
			"constitution": 14,
			"intelligence": 2,
			"wisdom": 6,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid",
			"damage_immunities": "lightning, slashing",
			"condition_immunities": "blinded, charmed, deafened, exhaustion, frightened, prone",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Amorphous",
					"desc": "The jelly can move through a space as narrow as 1 inch wide without squeezing.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The jelly can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Pseudopod",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) bludgeoning damage plus 3 (1d6) acid damage.",
					"attack_bonus": 4,
					"damage_dice": "2d6",
					"damage_bonus": 2
				}
			],
			"reactions": [
				{
					"name": "Split",
					"desc": "When a jelly that is Medium or larger is subjected to lightning or slashing damage, it splits into two new jellies if it has at least 10 hit points. Each new jelly has hit points equal to half the original jelly's, rounded down. New jellies are one size smaller than the original jelly.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Octopus",
			"size": "Small",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 3,
			"hit_dice": "1d6",
			"speed": "5 ft., swim 30 ft.",
			"strength": 4,
			"dexterity": 15,
			"constitution": 11,
			"intelligence": 3,
			"wisdom": 10,
			"charisma": 4,
			"perception": 2,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "While out of water, the octopus can hold its breath for 30 minutes.",
					"attack_bonus": 0
				},
				{
					"name": "Underwater Camouflage",
					"desc": "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The octopus can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Tentacles",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage, and the target is grappled (escape DC 10). Until this grapple ends, the octopus can't use its tentacles on another target.",
					"attack_bonus": 4,
					"damage_bonus": 1
				},
				{
					"name": "Ink Cloud (Recharges after a Short or Long Rest)",
					"desc": "A 5-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Ogre",
			"size": "Large",
			"type": "giant",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 11,
			"hit_points": 59,
			"hit_dice": "7d10",
			"speed": "40 ft.",
			"strength": 19,
			"dexterity": 8,
			"constitution": 16,
			"intelligence": 5,
			"wisdom": 7,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 8",
			"languages": "Common, Giant",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Greatclub",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Javelin",
					"desc": "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Ogre Zombie",
			"size": "Large",
			"type": "undead",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 8,
			"hit_points": 85,
			"hit_dice": "9d10",
			"speed": "30 ft.",
			"strength": 19,
			"dexterity": 6,
			"constitution": 18,
			"intelligence": 3,
			"wisdom": 6,
			"charisma": 5,
			"wisdom_save": 0,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 8",
			"languages": "understands Common and Giant but can't speak",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Undead Fortitude",
					"desc": "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Morningstar",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Oni",
			"size": "Large",
			"type": "giant",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 16,
			"hit_points": 110,
			"hit_dice": "13d10",
			"speed": "30 ft., fly 30 ft.",
			"strength": 19,
			"dexterity": 11,
			"constitution": 16,
			"intelligence": 14,
			"wisdom": 12,
			"charisma": 15,
			"dexterity_save": 3,
			"constitution_save": 6,
			"wisdom_save": 4,
			"charisma_save": 5,
			"arcana": 5,
			"deception": 8,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Common, Giant",
			"challenge_rating": "7",
			"special_abilities": [
				{
					"name": "Innate Spellcasting",
					"desc": "The oni's innate spellcasting ability is Charisma (spell save DC 13). The oni can innately cast the following spells, requiring no material components:\n\nAt will: darkness, invisibility\n1/day each: charm person, cone of cold, gaseous form, sleep",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The oni's weapon attacks are magical.",
					"attack_bonus": 0
				},
				{
					"name": "Regeneration",
					"desc": "The oni regains 10 hit points at the start of its turn if it has at least 1 hit point.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The oni makes two attacks, either with its claws or its glaive.",
					"attack_bonus": 0
				},
				{
					"name": "Claw (Oni Form Only)",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Glaive",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) slashing damage, or 9 (1d10 + 4) slashing damage in Small or Medium form.",
					"attack_bonus": 7,
					"damage_dice": "2d10",
					"damage_bonus": 4
				},
				{
					"name": "Change Shape",
					"desc": "The oni magically polymorphs into a Small or Medium humanoid, into a Large giant, or back into its true form. Other than its size, its statistics are the same in each form. The only equipment that is transformed is its glaive, which shrinks so that it can be wielded in humanoid form. If the oni dies, it reverts to its true form, and its glaive reverts to its normal size.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Orc",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "orc",
			"alignment": "chaotic evil",
			"armor_class": 13,
			"hit_points": 15,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 12,
			"constitution": 16,
			"intelligence": 7,
			"wisdom": 11,
			"charisma": 10,
			"intimidation": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Common, Orc",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Aggressive",
					"desc": "As a bonus action, the orc can move up to its speed toward a hostile creature that it can see.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Greataxe",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d12",
					"damage_bonus": 3
				},
				{
					"name": "Javelin",
					"desc": "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Otyugh",
			"size": "Large",
			"type": "aberration",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 14,
			"hit_points": 114,
			"hit_dice": "12d10",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 11,
			"constitution": 19,
			"intelligence": 6,
			"wisdom": 13,
			"charisma": 6,
			"constitution_save": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 11",
			"languages": "Otyugh",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Limited Telepathy",
					"desc": "The otyugh can magically transmit simple messages and images to any creature within 120 ft. of it that can understand a language. This form of telepathy doesn't allow the receiving creature to telepathically respond.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The otyugh makes three attacks: one with its bite and two with its tentacles.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d8 + 3) piercing damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the target must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. The disease is cured on a success. The target dies if the disease reduces its hit point maximum to 0. This reduction to the target's hit point maximum lasts until the disease is cured.",
					"attack_bonus": 6,
					"damage_dice": "2d8",
					"damage_bonus": 3
				},
				{
					"name": "Tentacle",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage plus 4 (1d8) piercing damage. If the target is Medium or smaller, it is grappled (escape DC 13) and restrained until the grapple ends. The otyugh has two tentacles, each of which can grapple one target.",
					"attack_bonus": 6,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Tentacle Slam",
					"desc": "The otyugh slams creatures grappled by it into each other or a solid surface. Each creature must succeed on a DC 14 Constitution saving throw or take 10 (2d6 + 3) bludgeoning damage and be stunned until the end of the otyugh's next turn. On a successful save, the target takes half the bludgeoning damage and isn't stunned.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Owl",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "5 ft., fly 60 ft.",
			"strength": 3,
			"dexterity": 13,
			"constitution": 8,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Flyby",
					"desc": "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing and Sight",
					"desc": "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
					"attack_bonus": 3,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Owlbear",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 59,
			"hit_dice": "7d10",
			"speed": "40 ft.",
			"strength": 20,
			"dexterity": 12,
			"constitution": 17,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Keen Sight and Smell",
					"desc": "The owlbear has advantage on Wisdom (Perception) checks that rely on sight or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The owlbear makes two attacks: one with its beak and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 10 (1d10 + 5) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d10",
					"damage_bonus": 5
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Panther",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 13,
			"hit_dice": "3d8",
			"speed": "50 ft., climb 40 ft.",
			"strength": 14,
			"dexterity": 15,
			"constitution": 10,
			"intelligence": 3,
			"wisdom": 14,
			"charisma": 7,
			"perception": 4,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The panther has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pounce",
					"desc": "If the panther moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the panther can make one bite attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Pegasus",
			"size": "Large",
			"type": "celestial",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 12,
			"hit_points": 59,
			"hit_dice": "7d10",
			"speed": "60 ft., fly 90 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 10,
			"wisdom": 15,
			"charisma": 13,
			"dexterity_save": 4,
			"wisdom_save": 4,
			"charisma_save": 3,
			"perception": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 16",
			"languages": "understands Celestial, Common, Elvish, and Sylvan but can't speak",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Phase Spider",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 32,
			"hit_dice": "5d10",
			"speed": "30 ft., climb 30 ft.",
			"strength": 15,
			"dexterity": 15,
			"constitution": 12,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 6,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Ethereal Jaunt",
					"desc": "As a bonus action, the spider can magically shift from the Material Plane to the Ethereal Plane, or vice versa.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The spider ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 18 (4d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
					"attack_bonus": 4,
					"damage_dice": "1d10",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Pit Fiend",
			"size": "Large",
			"type": "fiend",
			"subtype": "devil",
			"alignment": "lawful evil",
			"armor_class": 19,
			"hit_points": 300,
			"hit_dice": "24d10",
			"speed": "30 ft., fly 60 ft.",
			"strength": 26,
			"dexterity": 14,
			"constitution": 24,
			"intelligence": 22,
			"wisdom": 18,
			"charisma": 24,
			"dexterity_save": 8,
			"constitution_save": 13,
			"wisdom_save": 10,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "truesight 120 ft., passive Perception 14",
			"languages": "Infernal, telepathy 120 ft.",
			"challenge_rating": "20",
			"special_abilities": [
				{
					"name": "Fear Aura",
					"desc": "Any creature hostile to the pit fiend that starts its turn within 20 feet of the pit fiend must make a DC 21 Wisdom saving throw, unless the pit fiend is incapacitated. On a failed save, the creature is frightened until the start of its next turn. If a creature's saving throw is successful, the creature is immune to the pit fiend's Fear Aura for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The pit fiend has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The pit fiend's weapon attacks are magical.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The pit fiend's spellcasting ability is Charisma (spell save DC 21). The pit fiend can innately cast the following spells, requiring no material components:\nAt will: detect magic, fireball\n3/day each: hold monster, wall of fire",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The pit fiend makes four attacks: one with its bite, one with its claw, one with its mace, and one with its tail.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) piercing damage. The target must succeed on a DC 21 Constitution saving throw or become poisoned. While poisoned in this way, the target can't regain hit points, and it takes 21 (6d6) poison damage at the start of each of its turns. The poisoned target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 14,
					"damage_dice": "4d6",
					"damage_bonus": 8
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft. , one target. Hit: 17 (2d8 + 8) slashing damage.",
					"attack_bonus": 14,
					"damage_dice": "2d8",
					"damage_bonus": 8
				},
				{
					"name": "Mace",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 15 (2d6 + 8) bludgeoning damage plus 21 (6d6) fire damage.",
					"attack_bonus": 14,
					"damage_dice": "2d6",
					"damage_bonus": 8
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 24 (3d1O + 8) bludgeoning damage.",
					"attack_bonus": 14,
					"damage_dice": "3d10",
					"damage_bonus": 8
				}
			]
		},
		{
			"name": "Planetar",
			"size": "Large",
			"type": "celestial",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 19,
			"hit_points": 200,
			"hit_dice": "16d10",
			"speed": "40 ft., fly 120 ft.",
			"strength": 24,
			"dexterity": 20,
			"constitution": 24,
			"intelligence": 19,
			"wisdom": 22,
			"charisma": 25,
			"constitution_save": 12,
			"wisdom_save": 11,
			"charisma_save": 12,
			"perception": 11,
			"damage_vulnerabilities": "",
			"damage_resistances": "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "",
			"condition_immunities": "charmed, exhaustion, frightened",
			"senses": "truesight 120 ft., passive Perception 21",
			"languages": "all, telepathy 120 ft.",
			"challenge_rating": "16",
			"special_abilities": [
				{
					"name": "Angelic Weapons",
					"desc": "The planetar's weapon attacks are magical. When the planetar hits with any weapon, the weapon deals an extra 5d8 radiant damage (included in the attack).",
					"attack_bonus": 0
				},
				{
					"name": "Divine Awareness",
					"desc": "The planetar knows if it hears a lie.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The planetar's spellcasting ability is Charisma (spell save DC 20). The planetar can innately cast the following spells, requiring no material components:\nAt will: detect evil and good, invisibility (self only)\n3/day each: blade barrier, dispel evil and good, flame strike, raise dead\n1/day each: commune, control weather, insect plague",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The planetar has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The planetar makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatsword",
					"desc": "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 21 (4d6 + 7) slashing damage plus 22 (5d8) radiant damage.",
					"attack_bonus": 12,
					"damage_dice": "4d6 + 5d8",
					"damage_bonus": 7
				},
				{
					"name": "Healing Touch (4/Day)",
					"desc": "The planetar touches another creature. The target magically regains 30 (6d8 + 3) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Plesiosaurus",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 68,
			"hit_dice": "8d10",
			"speed": "20 ft., swim 40 ft.",
			"strength": 18,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 5,
			"perception": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Hold Breath",
					"desc": "The plesiosaurus can hold its breath for 1 hour.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "3d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Poisonous Snake",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 2,
			"hit_dice": "1d4",
			"speed": "30 ft., swim 30 ft.",
			"strength": 2,
			"dexterity": 16,
			"constitution": 11,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage, and the target must make a DC 10 Constitution saving throw, taking 5 (2d4) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 5,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Polar Bear",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 42,
			"hit_dice": "5d10",
			"speed": "40 ft., swim 30 ft.",
			"strength": 20,
			"dexterity": 10,
			"constitution": 16,
			"intelligence": 2,
			"wisdom": 13,
			"charisma": 7,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The bear makes two attacks: one with its bite and one with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d8",
					"damage_bonus": 5
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Pony",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "40 ft.",
			"strength": 15,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 11,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
					"attack_bonus": 4,
					"damage_dice": "2d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Priest",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 13,
			"hit_points": 27,
			"hit_dice": "5d8",
			"speed": "25 ft.",
			"strength": 10,
			"dexterity": 10,
			"constitution": 12,
			"intelligence": 13,
			"wisdom": 16,
			"charisma": 13,
			"medicine": 7,
			"persuasion": 3,
			"religion": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "any two languages",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Divine Eminence",
					"desc": "As a bonus action, the priest can expend a spell slot to cause its melee weapon attacks to magically deal an extra 10 (3d6) radiant damage to a target on a hit. This benefit lasts until the end of the turn. If the priest expends a spell slot of 2nd level or higher, the extra damage increases by 1d6 for each level above 1st.",
					"attack_bonus": 0,
					"damage_dice": "3d6"
				},
				{
					"name": "Spellcasting",
					"desc": "The priest is a 5th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 13, +5 to hit with spell attacks). The priest has the following cleric spells prepared:\n\n- Cantrips (at will): light, sacred flame, thaumaturgy\n- 1st level (4 slots): cure wounds, guiding bolt, sanctuary\n- 2nd level (3 slots): lesser restoration, spiritual weapon\n- 3rd level (2 slots): dispel magic, spirit guardians",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Mace",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage.",
					"attack_bonus": 2,
					"damage_dice": "1d6"
				}
			]
		},
		{
			"name": "Pseudodragon",
			"size": "Tiny",
			"type": "dragon",
			"subtype": "",
			"alignment": "neutral good",
			"armor_class": 13,
			"hit_points": 7,
			"hit_dice": "2d4",
			"speed": "15 ft., fly 60 ft.",
			"strength": 6,
			"dexterity": 15,
			"constitution": 13,
			"intelligence": 10,
			"wisdom": 12,
			"charisma": 10,
			"perception": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
			"languages": "understands Common and Draconic but can't speak",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Keen Senses",
					"desc": "The pseudodragon has advantage on Wisdom (Perception) checks that rely on sight, hearing, or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The pseudodragon has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Limited Telepathy",
					"desc": "The pseudodragon can magically communicate simple ideas, emotions, and images telepathically with any creature within 100 ft. of it that can understand a language.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Familiar",
					"desc": "The pseudodragon can serve another creature as a familiar, forming a magic, telepathic bond with that willing companion. While the two are bonded, the companion can sense what the pseudodragon senses as long as they are within 1 mile of each other. While the pseudodragon is within 10 feet of its companion, the companion shares the pseudodragon's Magic Resistance trait. At any time and for any reason, the pseudodragon can end its service as a familiar, ending the telepathic bond.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Sting",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or become poisoned for 1 hour. If the saving throw fails by 5 or more, the target falls unconscious for the same duration, or until it takes damage or another creature uses an action to shake it awake.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Purple Worm",
			"size": "Gargantuan",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 18,
			"hit_points": 247,
			"hit_dice": "15d20",
			"speed": "50 ft., burrow 30 ft.",
			"strength": 28,
			"dexterity": 7,
			"constitution": 22,
			"intelligence": 1,
			"wisdom": 8,
			"charisma": 4,
			"constitution_save": 11,
			"wisdom_save": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., tremorsense 60 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "15",
			"special_abilities": [
				{
					"name": "Tunneler",
					"desc": "The worm can burrow through solid rock at half its burrow speed and leaves a 10-foot-diameter tunnel in its wake.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The worm makes two attacks: one with its bite and one with its stinger.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d8 + 9) piercing damage. If the target is a Large or smaller creature, it must succeed on a DC 19 Dexterity saving throw or be swallowed by the worm. A swallowed creature is blinded and restrained, it has total cover against attacks and other effects outside the worm, and it takes 21 (6d6) acid damage at the start of each of the worm's turns.\nIf the worm takes 30 damage or more on a single turn from a creature inside it, the worm must succeed on a DC 21 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the worm. If the worm dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 20 feet of movement, exiting prone.",
					"attack_bonus": 9,
					"damage_dice": "3d8",
					"damage_bonus": 9
				},
				{
					"name": "Tail Stinger",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 19 (3d6 + 9) piercing damage, and the target must make a DC 19 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 9,
					"damage_dice": "3d6",
					"damage_bonus": 9
				}
			]
		},
		{
			"name": "Quasit",
			"size": "Tiny",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 13,
			"hit_points": 7,
			"hit_dice": "3d4",
			"speed": "40 ft.",
			"strength": 5,
			"dexterity": 17,
			"constitution": 10,
			"intelligence": 7,
			"wisdom": 10,
			"charisma": 10,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold; fire; lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 10",
			"languages": "Abyssal, Common",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The quasit can use its action to polymorph into a beast form that resembles a bat (speed 10 ft. fly 40 ft.), a centipede (40 ft., climb 40 ft.), or a toad (40 ft., swim 40 ft.), or back into its true form . Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed . It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The quasit has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Familiar",
					"desc": "The quasit can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the quasit is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the quasit can end its service as a familiar, ending the telepathic bond.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claw (Bite in Beast Form)",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must succeed on a DC 10 Constitution saving throw or take 5 (2d4) poison damage and become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 3
				},
				{
					"name": "Scare (1/day)",
					"desc": "One creature of the quasit's choice within 20 ft. of it must succeed on a DC 10 Wisdom saving throw or be frightened for 1 minute. The target can repeat the saving throw at the end of each of its turns, with disadvantage if the quasit is within line of sight, ending the effect on itself on a success.",
					"attack_bonus": 0
				},
				{
					"name": "Invisibility",
					"desc": "The quasit magically turns invisible until it attacks or uses Scare, or until its concentration ends (as if concentrating on a spell). Any equipment the quasit wears or carries is invisible with it.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Quipper",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "swim 40 ft.",
			"strength": 2,
			"dexterity": 16,
			"constitution": 9,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Blood Frenzy",
					"desc": "The quipper has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The quipper can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
					"attack_bonus": 5,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Rakshasa",
			"size": "Medium",
			"type": "fiend",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 16,
			"hit_points": 110,
			"hit_dice": "13d8",
			"speed": "40 ft.",
			"strength": 14,
			"dexterity": 17,
			"constitution": 18,
			"intelligence": 13,
			"wisdom": 16,
			"charisma": 20,
			"deception": 10,
			"insight": 8,
			"damage_vulnerabilities": "piercing from magic weapons wielded by good creatures",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "Common, Infernal",
			"challenge_rating": "13",
			"special_abilities": [
				{
					"name": "Limited Magic Immunity",
					"desc": "The rakshasa can't be affected or detected by spells of 6th level or lower unless it wishes to be. It has advantage on saving throws against all other spells and magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The rakshasa's innate spellcasting ability is Charisma (spell save DC 18, +10 to hit with spell attacks). The rakshasa can innately cast the following spells, requiring no material components:\n\nAt will: detect thoughts, disguise self, mage hand, minor illusion\n3/day each: charm person, detect magic, invisibility, major image, suggestion\n1/day each: dominate person, fly, plane shift, true seeing",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The rakshasa makes two claw attacks",
					"attack_bonus": 0
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage, and the target is cursed if it is a creature. The magical curse takes effect whenever the target takes a short or long rest, filling the target's thoughts with horrible images and dreams. The cursed target gains no benefit from finishing a short or long rest. The curse lasts until it is lifted by a remove curse spell or similar magic.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Rat",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "20 ft.",
			"strength": 2,
			"dexterity": 11,
			"constitution": 9,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
					"attack_bonus": 0,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Raven",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "10 ft., fly 50 ft.",
			"strength": 2,
			"dexterity": 14,
			"constitution": 8,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 6,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Mimicry",
					"desc": "The raven can mimic simple sounds it has heard, such as a person whispering, a baby crying, or an animal chittering. A creature that hears the sounds can tell they are imitations with a successful DC 10 Wisdom (Insight) check.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Red Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 17,
			"hit_points": 75,
			"hit_dice": "10d8",
			"speed": "30 ft., climb 30 ft., fly 60 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 17,
			"intelligence": 12,
			"wisdom": 11,
			"charisma": 15,
			"dexterity_save": 2,
			"constitution_save": 5,
			"wisdom_save": 2,
			"charisma_save": 4,
			"perception": 4,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "4",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage plus 3 (1d6) fire damage.",
					"attack_bonus": 6,
					"damage_dice": "1d10 + 1d6",
					"damage_bonus": 4
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC l3 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "7d6"
				}
			]
		},
		{
			"name": "Reef Shark",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "4d8",
			"speed": "swim 40 ft.",
			"strength": 14,
			"dexterity": 13,
			"constitution": 13,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 4,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Pack Tactics",
					"desc": "The shark has advantage on an attack roll against a creature if at least one of the shark's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The shark can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Remorhaz",
			"size": "Huge",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 17,
			"hit_points": 195,
			"hit_dice": "17d12",
			"speed": "30 ft., burrow 20 ft.",
			"strength": 24,
			"dexterity": 13,
			"constitution": 21,
			"intelligence": 4,
			"wisdom": 10,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold, fire",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Heated Body",
					"desc": "A creature that touches the remorhaz or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
					"attack_bonus": 0,
					"damage_dice": "3d6"
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 40 (6d10 + 7) piercing damage plus 10 (3d6) fire damage. If the target is a creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the remorhaz can't bite another target.",
					"attack_bonus": 11,
					"damage_dice": "6d10 + 3d6",
					"damage_bonus": 7
				},
				{
					"name": "Swallow",
					"desc": "The remorhaz makes one bite attack against a Medium or smaller creature it is grappling. If the attack hits, that creature takes the bite's damage and is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the remorhaz, and it takes 21 (6d6) acid damage at the start of each of the remorhaz's turns.\nIf the remorhaz takes 30 damage or more on a single turn from a creature inside it, the remorhaz must succeed on a DC 15 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet oft he remorhaz. If the remorhaz dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Rhinoceros",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 45,
			"hit_dice": "6d10",
			"speed": "40 ft.",
			"strength": 21,
			"dexterity": 8,
			"constitution": 15,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the rhinoceros moves at least 20 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d8"
				}
			],
			"actions": [
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Riding Horse",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 13,
			"hit_dice": "2d10",
			"speed": "60 ft.",
			"strength": 16,
			"dexterity": 10,
			"constitution": 12,
			"intelligence": 2,
			"wisdom": 11,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
					"attack_bonus": 5,
					"damage_dice": "2d4",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Roc",
			"size": "Gargantuan",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 15,
			"hit_points": 248,
			"hit_dice": "16d20",
			"speed": "20 ft., fly 120 ft.",
			"strength": 28,
			"dexterity": 10,
			"constitution": 20,
			"intelligence": 3,
			"wisdom": 10,
			"charisma": 9,
			"dexterity_save": 4,
			"constitution_save": 9,
			"wisdom_save": 4,
			"charisma_save": 3,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "11",
			"special_abilities": [
				{
					"name": "Keen Sight",
					"desc": "The roc has advantage on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The roc makes two attacks: one with its beak and one with its talons.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 27 (4d8 + 9) piercing damage.",
					"attack_bonus": 13,
					"damage_dice": "4d8",
					"damage_bonus": 9
				},
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 23 (4d6 + 9) slashing damage, and the target is grappled (escape DC 19). Until this grapple ends, the target is restrained, and the roc can't use its talons on another target.",
					"attack_bonus": 13,
					"damage_dice": "4d6",
					"damage_bonus": 9
				}
			]
		},
		{
			"name": "Roper",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 20,
			"hit_points": 93,
			"hit_dice": "11d10",
			"speed": "10 ft., climb 10 ft.",
			"strength": 18,
			"dexterity": 8,
			"constitution": 17,
			"intelligence": 7,
			"wisdom": 16,
			"charisma": 6,
			"perception": 6,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 16",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the roper remains motionless, it is indistinguishable from a normal cave formation, such as a stalagmite.",
					"attack_bonus": 0
				},
				{
					"name": "Grasping Tendrils",
					"desc": "The roper can have up to six tendrils at a time. Each tendril can be attacked (AC 20; 10 hit points; immunity to poison and psychic damage). Destroying a tendril deals no damage to the roper, which can extrude a replacement tendril on its next turn. A tendril can also be broken if a creature takes an action and succeeds on a DC 15 Strength check against it.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The roper can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The roper makes four attacks with its tendrils, uses Reel, and makes one attack with its bite.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 22 (4d8 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "4d8",
					"damage_bonus": 4
				},
				{
					"name": "Tendril",
					"desc": "Melee Weapon Attack: +7 to hit, reach 50 ft., one creature. Hit: The target is grappled (escape DC 15). Until the grapple ends, the target is restrained and has disadvantage on Strength checks and Strength saving throws, and the roper can't use the same tendril on another target.",
					"attack_bonus": 7
				},
				{
					"name": "Reel",
					"desc": "The roper pulls each creature grappled by it up to 25 ft. straight toward it.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Rug of Smothering",
			"size": "Large",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 33,
			"hit_dice": "6d10",
			"speed": "10 ft.",
			"strength": 17,
			"dexterity": 14,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 3,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison, psychic",
			"condition_immunities": "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Antimagic Susceptibility",
					"desc": "The rug is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the rug must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
					"attack_bonus": 0
				},
				{
					"name": "Damage Transfer",
					"desc": "While it is grappling a creature, the rug takes only half the damage dealt to it, and the creature grappled by the rug takes the other half.",
					"attack_bonus": 0
				},
				{
					"name": "False Appearance",
					"desc": "While the rug remains motionless, it is indistinguishable from a normal rug.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Smother",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one Medium or smaller creature. Hit: The creature is grappled (escape DC 13). Until this grapple ends, the target is restrained, blinded, and at risk of suffocating, and the rug can't smother another target. In addition, at the start of each of the target's turns, the target takes 10 (2d6 + 3) bludgeoning damage.",
					"attack_bonus": 0,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Rust Monster",
			"size": "Medium",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 27,
			"hit_dice": "5d8",
			"speed": "40 ft.",
			"strength": 13,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 13,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Iron Scent",
					"desc": "The rust monster can pinpoint, by scent, the location of ferrous metal within 30 feet of it.",
					"attack_bonus": 0
				},
				{
					"name": "Rust Metal",
					"desc": "Any nonmagical weapon made of metal that hits the rust monster corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Non magical ammunition made of metal that hits the rust monster is destroyed after dealing damage.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d8",
					"damage_bonus": 1
				},
				{
					"name": "Antennae",
					"desc": "The rust monster corrodes a nonmagical ferrous metal object it can see within 5 feet of it. If the object isn't being worn or carried, the touch destroys a 1-foot cube of it. If the object is being worn or carried by a creature, the creature can make a DC 11 Dexterity saving throw to avoid the rust monster's touch.\nIf the object touched is either metal armor or a metal shield being worn or carried, its takes a permanent and cumulative -1 penalty to the AC it offers. Armor reduced to an AC of 10 or a shield that drops to a +0 bonus is destroyed. If the object touched is a held metal weapon, it rusts as described in the Rust Metal trait.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Saber-Toothed Tiger",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 52,
			"hit_dice": "7d10",
			"speed": "40 ft.",
			"strength": 18,
			"dexterity": 14,
			"constitution": 15,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 8,
			"perception": 3,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pounce",
					"desc": "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d10",
					"damage_bonus": 5
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 5
				}
			]
		},
		{
			"name": "Sahuagin",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "sahuagin",
			"alignment": "lawful evil",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "4d8",
			"speed": "30 ft., swim 40 ft.",
			"strength": 13,
			"dexterity": 11,
			"constitution": 12,
			"intelligence": 12,
			"wisdom": 13,
			"charisma": 9,
			"perception": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 15",
			"languages": "Sahuagin",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Blood Frenzy",
					"desc": "The sahuagin has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Limited Amphibiousness",
					"desc": "The sahuagin can breathe air and water, but it needs to be submerged at least once every 4 hours to avoid suffocating.",
					"attack_bonus": 0
				},
				{
					"name": "Shark Telepathy",
					"desc": "The sahuagin can magically command any shark within 120 feet of it, using a limited telepathy.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The sahuagin makes two melee attacks: one with its bite and one with its claws or spear.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) slashing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d4",
					"damage_bonus": 1
				},
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Salamander",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 15,
			"hit_points": 90,
			"hit_dice": "12d10",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 14,
			"constitution": 15,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 12,
			"damage_vulnerabilities": "cold",
			"damage_resistances": "bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Ignan",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Heated Body",
					"desc": "A creature that touches the salamander or hits it with a melee attack while within 5 ft. of it takes 7 (2d6) fire damage.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				},
				{
					"name": "Heated Weapons",
					"desc": "Any metal melee weapon the salamander wields deals an extra 3 (1d6) fire damage on a hit (included in the attack).",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The salamander makes two attacks: one with its spear and one with its tail.",
					"attack_bonus": 0
				},
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. or range 20 ft./60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage plus 7 (2d6) fire damage, and the target is grappled (escape DC 14). Until this grapple ends, the target is restrained, the salamander can automatically hit the target with its tail, and the salamander can't make tail attacks against other targets.",
					"attack_bonus": 7,
					"damage_dice": "2d6 + 2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Satyr",
			"size": "Medium",
			"type": "fey",
			"subtype": "",
			"alignment": "chaotic neutral",
			"armor_class": 14,
			"hit_points": 31,
			"hit_dice": "7d8",
			"speed": "40 ft.",
			"strength": 12,
			"dexterity": 16,
			"constitution": 11,
			"intelligence": 12,
			"wisdom": 10,
			"charisma": 14,
			"perception": 2,
			"performance": 6,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "Common, Elvish, Sylvan",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The satyr has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Ram",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) bludgeoning damage.",
					"attack_bonus": 3,
					"damage_dice": "2d4",
					"damage_bonus": 1
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1 d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Shortbow",
					"desc": "Ranged Weapon Attack: +5 to hit, range 80/320 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Variant: Panpipes",
					"desc": "Gentle Lullaby. The creature falls asleep and is unconscious for 1 minute. The effect ends if the creature takes damage or if someone takes an action to shake the creature awake.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Scorpion",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "10 ft.",
			"strength": 2,
			"dexterity": 11,
			"constitution": 8,
			"intelligence": 1,
			"wisdom": 8,
			"charisma": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "0",
			"actions": [
				{
					"name": "Sting",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must make a DC 9 Constitution saving throw, taking 4 (1d8) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 2,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Scout",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 13,
			"hit_points": 16,
			"hit_dice": "3d8",
			"speed": "30 ft.",
			"strength": 11,
			"dexterity": 14,
			"constitution": 12,
			"intelligence": 11,
			"wisdom": 13,
			"charisma": 11,
			"nature": 4,
			"perception": 5,
			"stealth": 6,
			"survival": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 15",
			"languages": "any one language (usually Common)",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Keen Hearing and Sight",
					"desc": "The scout has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The scout makes two melee attacks or two ranged attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +4 to hit, ranged 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Sea Hag",
			"size": "Medium",
			"type": "fey",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 14,
			"hit_points": 52,
			"hit_dice": "7d8",
			"speed": "30 ft., swim 40 ft.",
			"strength": 16,
			"dexterity": 13,
			"constitution": 16,
			"intelligence": 12,
			"wisdom": 12,
			"charisma": 13,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 11",
			"languages": "Aquan, Common, Giant",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The hag can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Horrific Appearance",
					"desc": "Any humanoid that starts its turn within 30 feet of the hag and can see the hag's true form must make a DC 11 Wisdom saving throw. On a failed save, the creature is frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the hag is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the hag's Horrific Appearance for the next 24 hours.\nUnless the target is surprised or the revelation of the hag's true form is sudden, the target can avert its eyes and avoid making the initial saving throw. Until the start of its next turn, a creature that averts its eyes has disadvantage on attack rolls against the hag.",
					"attack_bonus": 0
				},
				{
					"name": "Hag Coven",
					"desc": "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
					"attack_bonus": 0
				},
				{
					"name": "Shared Spellcasting (Coven Only)",
					"desc": "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\n\n- 1st level (4 slots): identify, ray of sickness\n- 2nd level (3 slots): hold person, locate object\n- 3rd level (3 slots): bestow curse, counterspell, lightning bolt\n- 4th level (3 slots): phantasmal killer, polymorph\n- 5th level (2 slots): contact other plane, scrying\n- 6th level (1 slot): eye bite\n\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
					"attack_bonus": 0
				},
				{
					"name": "Hag Eye (Coven Only)",
					"desc": "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Death Glare",
					"desc": "The hag targets one frightened creature she can see within 30 ft. of her. If the target can see the hag, it must succeed on a DC 11 Wisdom saving throw against this magic or drop to 0 hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Illusory Appearance",
					"desc": "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like an ugly creature of her general size and humanoid shape. The effect ends if the hag takes a bonus action to end it or if she dies.\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have no claws, but someone touching her hand might feel the claws. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 16 Intelligence (Investigation) check to discern that the hag is disguised.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Sea Horse",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "swim 20 ft.",
			"strength": 1,
			"dexterity": 12,
			"constitution": 8,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Water Breathing",
					"desc": "The sea horse can breathe only underwater.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Shadow",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 12,
			"hit_points": 16,
			"hit_dice": "3d8",
			"speed": "40 ft.",
			"strength": 6,
			"dexterity": 14,
			"constitution": 13,
			"intelligence": 6,
			"wisdom": 10,
			"charisma": 8,
			"stealth": 4,
			"damage_vulnerabilities": "radiant",
			"damage_resistances": "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "necrotic, poison",
			"condition_immunities": "exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Amorphous",
					"desc": "The shadow can move through a space as narrow as 1 inch wide without squeezing.",
					"attack_bonus": 0
				},
				{
					"name": "Shadow Stealth",
					"desc": "While in dim light or darkness, the shadow can take the Hide action as a bonus action. Its stealth bonus is also improved to +6.",
					"attack_bonus": 0
				},
				{
					"name": "Sunlight Weakness",
					"desc": "While in sunlight, the shadow has disadvantage on attack rolls, ability checks, and saving throws.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Strength Drain",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) necrotic damage, and the target's Strength score is reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.\nIf a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later.",
					"attack_bonus": 4,
					"damage_dice": "2d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Shambling Mound",
			"size": "Large",
			"type": "plant",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 15,
			"hit_points": 136,
			"hit_dice": "16d10",
			"speed": "20 ft., swim 20 ft.",
			"strength": 18,
			"dexterity": 8,
			"constitution": 16,
			"intelligence": 5,
			"wisdom": 10,
			"charisma": 5,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire",
			"damage_immunities": "lightning",
			"condition_immunities": "blinded, deafened, exhaustion",
			"senses": "blindsight 60 ft. (blind beyond this radius), passive Perception 10",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Lightning Absorption",
					"desc": "Whenever the shambling mound is subjected to lightning damage, it takes no damage and regains a number of hit points equal to the lightning damage dealt.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The shambling mound makes two slam attacks. If both attacks hit a Medium or smaller target, the target is grappled (escape DC 14), and the shambling mound uses its Engulf on it.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Engulf",
					"desc": "The shambling mound engulfs a Medium or smaller creature grappled by it. The engulfed target is blinded, restrained, and unable to breathe, and it must succeed on a DC 14 Constitution saving throw at the start of each of the mound's turns or take 13 (2d8 + 4) bludgeoning damage. If the mound moves, the engulfed target moves with it. The mound can have only one creature engulfed at a time.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Shield Guardian",
			"size": "Large",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 17,
			"hit_points": 142,
			"hit_dice": "15d10",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 8,
			"constitution": 18,
			"intelligence": 7,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, poisoned",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
			"languages": "understands commands given in any language but can't speak",
			"challenge_rating": "7",
			"special_abilities": [
				{
					"name": "Bound",
					"desc": "The shield guardian is magically bound to an amulet. As long as the guardian and its amulet are on the same plane of existence, the amulet's wearer can telepathically call the guardian to travel to it, and the guardian knows the distance and direction to the amulet. If the guardian is within 60 feet of the amulet's wearer, half of any damage the wearer takes (rounded up) is transferred to the guardian.",
					"attack_bonus": 0
				},
				{
					"name": "Regeneration",
					"desc": "The shield guardian regains 10 hit points at the start of its turn if it has at least 1 hit. point.",
					"attack_bonus": 0
				},
				{
					"name": "Spell Storing",
					"desc": "A spellcaster who wears the shield guardian's amulet can cause the guardian to store one spell of 4th level or lower. To do so, the wearer must cast the spell on the guardian. The spell has no effect but is stored within the guardian. When commanded to do so by the wearer or when a situation arises that was predefined by the spellcaster, the guardian casts the stored spell with any parameters set by the original caster, requiring no components. When the spell is cast or a new spell is stored, any previously stored spell is lost.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The guardian makes two fist attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Fist",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			],
			"reactions": [
				{
					"name": "Shield",
					"desc": "When a creature makes an attack against the wearer of the guardian's amulet, the guardian grants a +2 bonus to the wearer's AC if the guardian is within 5 feet of the wearer.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Shrieker",
			"size": "Medium",
			"type": "plant",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 5,
			"hit_points": 13,
			"hit_dice": "3d8",
			"speed": "0 ft.",
			"strength": 1,
			"dexterity": 1,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 3,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "blinded, deafened, frightened",
			"senses": "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the shrieker remains motionless, it is indistinguishable from an ordinary fungus.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Shriek",
					"desc": "When bright light or a creature is within 30 feet of the shrieker, it emits a shriek audible within 300 feet of it. The shrieker continues to shriek until the disturbance moves out of range and for 1d4 of the shrieker's turns afterward",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Silver Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 17,
			"hit_points": 45,
			"hit_dice": "6d8",
			"speed": "30 ft., fly 60 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 17,
			"intelligence": 12,
			"wisdom": 11,
			"charisma": 15,
			"dexterity_save": 2,
			"constitution_save": 5,
			"wisdom_save": 2,
			"charisma_save": 4,
			"perception": 4,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d10",
					"damage_bonus": 4
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 15-foot cone. Each creature in that area must make a DC 13 Constitution saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "4d8"
				}
			]
		},
		{
			"name": "Skeleton",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 13,
			"hit_points": 13,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 14,
			"constitution": 15,
			"intelligence": 6,
			"wisdom": 8,
			"charisma": 5,
			"damage_vulnerabilities": "bludgeoning",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "understands all languages it spoke in life but can't speak",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Shortbow",
					"desc": "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Solar",
			"size": "Large",
			"type": "celestial",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 21,
			"hit_points": 243,
			"hit_dice": "18d10",
			"speed": "50 ft., fly 150 ft.",
			"strength": 26,
			"dexterity": 22,
			"constitution": 26,
			"intelligence": 25,
			"wisdom": 25,
			"charisma": 30,
			"intelligence_save": 14,
			"wisdom_save": 14,
			"charisma_save": 17,
			"perception": 14,
			"damage_vulnerabilities": "",
			"damage_resistances": "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "necrotic, poison",
			"condition_immunities": "charmed, exhaustion, frightened, poisoned",
			"senses": "truesight 120 ft., passive Perception 24",
			"languages": "all, telepathy 120 ft.",
			"challenge_rating": "21",
			"special_abilities": [
				{
					"name": "Angelic Weapons",
					"desc": "The solar's weapon attacks are magical. When the solar hits with any weapon, the weapon deals an extra 6d8 radiant damage (included in the attack).",
					"attack_bonus": 0
				},
				{
					"name": "Divine Awareness",
					"desc": "The solar knows if it hears a lie.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The solar's spell casting ability is Charisma (spell save DC 25). It can innately cast the following spells, requiring no material components:\nAt will: detect evil and good, invisibility (self only)\n3/day each: blade barrier, dispel evil and good, resurrection\n1/day each: commune, control weather",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The solar has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The solar makes two greatsword attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatsword",
					"desc": "Melee Weapon Attack: +15 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) slashing damage plus 27 (6d8) radiant damage.",
					"attack_bonus": 15,
					"damage_dice": "4d6 + 6d8",
					"damage_bonus": 8
				},
				{
					"name": "Slaying Longbow",
					"desc": "Ranged Weapon Attack: +13 to hit, range 150/600 ft., one target. Hit: 15 (2d8 + 6) piercing damage plus 27 (6d8) radiant damage. If the target is a creature that has 190 hit points or fewer, it must succeed on a DC 15 Constitution saving throw or die.",
					"attack_bonus": 13,
					"damage_dice": "2d8 + 6d8",
					"damage_bonus": 6
				},
				{
					"name": "Flying Sword",
					"desc": "The solar releases its greatsword to hover magically in an unoccupied space within 5 ft. of it. If the solar can see the sword, the solar can mentally command it as a bonus action to fly up to 50 ft. and either make one attack against a target or return to the solar's hands. If the hovering sword is targeted by any effect, the solar is considered to be holding it. The hovering sword falls if the solar dies.",
					"attack_bonus": 0
				},
				{
					"name": "Healing Touch (4/Day)",
					"desc": "The solar touches another creature. The target magically regains 40 (8d8 + 4) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Teleport",
					"desc": "The solar magically teleports, along with any equipment it is wearing or carrying, up to 120 ft. to an unoccupied space it can see.",
					"attack_bonus": 0
				},
				{
					"name": "Searing Burst (Costs 2 Actions)",
					"desc": "The solar emits magical, divine energy. Each creature of its choice in a 10 -foot radius must make a DC 23 Dexterity saving throw, taking 14 (4d6) fire damage plus 14 (4d6) radiant damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0
				},
				{
					"name": "Blinding Gaze (Costs 3 Actions)",
					"desc": "The solar targets one creature it can see within 30 ft. of it. If the target can see it, the target must succeed on a DC 15 Constitution saving throw or be blinded until magic such as the lesser restoration spell removes the blindness.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Specter",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "0 ft., fly 50 ft. (hover)",
			"strength": 1,
			"dexterity": 14,
			"constitution": 11,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 11,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "necrotic, poison",
			"condition_immunities": "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "understands all languages it knew in life but can't speak",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Incorporeal Movement",
					"desc": "The specter can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
					"attack_bonus": 0
				},
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the specter has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Life Drain",
					"desc": "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) necrotic damage. The target must succeed on a DC 10 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the creature finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
					"attack_bonus": 4,
					"damage_dice": "3d6"
				}
			]
		},
		{
			"name": "Spider",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "20 ft., climb 20 ft.",
			"strength": 2,
			"dexterity": 14,
			"constitution": 8,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 2,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 30 ft., passive Perception 12",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Spider Climb",
					"desc": "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Web Sense",
					"desc": "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The spider ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 9 Constitution saving throw or take 2 (1d4) poison damage.",
					"attack_bonus": 4,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Spirit Naga",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 15,
			"hit_points": 75,
			"hit_dice": "10d10",
			"speed": "40 ft.",
			"strength": 18,
			"dexterity": 17,
			"constitution": 14,
			"intelligence": 16,
			"wisdom": 15,
			"charisma": 16,
			"dexterity_save": 6,
			"constitution_save": 5,
			"wisdom_save": 5,
			"charisma_save": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "charmed, poisoned",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "Abyssal, Common",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Rejuvenation",
					"desc": "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
					"attack_bonus": 0
				},
				{
					"name": "Spellcasting",
					"desc": "The naga is a 10th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following wizard spells prepared:\n\n- Cantrips (at will): mage hand, minor illusion, ray of frost\n- 1st level (4 slots): charm person, detect magic, sleep\n- 2nd level (3 slots): detect thoughts, hold person\n- 3rd level (3 slots): lightning bolt, water breathing\n- 4th level (3 slots): blight, dimension door\n- 5th level (2 slots): dominate person",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 7 (1d6 + 4) piercing damage, and the target must make a DC 13 Constitution saving throw, taking 31 (7d8) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 7,
					"damage_dice": "1d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Sprite",
			"size": "Tiny",
			"type": "fey",
			"subtype": "",
			"alignment": "neutral good",
			"armor_class": 15,
			"hit_points": 2,
			"hit_dice": "1d4",
			"speed": "10 ft., fly 40 ft.",
			"strength": 3,
			"dexterity": 18,
			"constitution": 10,
			"intelligence": 14,
			"wisdom": 13,
			"charisma": 11,
			"perception": 3,
			"stealth": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "Common, Elvish, Sylvan",
			"challenge_rating": "1/4",
			"actions": [
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
					"attack_bonus": 2,
					"damage_bonus": 1
				},
				{
					"name": "Shortbow",
					"desc": "Ranged Weapon Attack: +6 to hit, range 40/160 ft., one target. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or become poisoned for 1 minute. If its saving throw result is 5 or lower, the poisoned target falls unconscious for the same duration, or until it takes damage or another creature takes an action to shake it awake.",
					"attack_bonus": 6,
					"damage_bonus": 1
				},
				{
					"name": "Heart Sight",
					"desc": "The sprite touches a creature and magically knows the creature's current emotional state. If the target fails a DC 10 Charisma saving throw, the sprite also knows the creature's alignment. Celestials, fiends, and undead automatically fail the saving throw.",
					"attack_bonus": 0
				},
				{
					"name": "Invisibility",
					"desc": "The sprite magically turns invisible until it attacks or casts a spell, or until its concentration ends (as if concentrating on a spell). Any equipment the sprite wears or carries is invisible with it.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Spy",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 12,
			"hit_points": 27,
			"hit_dice": "6d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 15,
			"constitution": 10,
			"intelligence": 12,
			"wisdom": 14,
			"charisma": 16,
			"deception": 5,
			"insight": 4,
			"investigation": 5,
			"perception": 6,
			"persuasion": 5,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 16",
			"languages": "any two languages",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Cunning Action",
					"desc": "On each of its turns, the spy can use a bonus action to take the Dash, Disengage, or Hide action.",
					"attack_bonus": 0
				},
				{
					"name": "Sneak Attack (1/Turn)",
					"desc": "The spy deals an extra 7 (2d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the spy that isn't incapacitated and the spy doesn't have disadvantage on the attack roll.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The spy makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Hand Crossbow",
					"desc": "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Steam Mephit",
			"size": "Small",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 10,
			"hit_points": 21,
			"hit_dice": "6d6",
			"speed": "30 ft., fly 30 ft.",
			"strength": 5,
			"dexterity": 11,
			"constitution": 10,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 12,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire, poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Aquan, Ignan",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Death Burst",
					"desc": "When the mephit dies, it explodes in a cloud of steam. Each creature within 5 ft. of the mephit must succeed on a DC 10 Dexterity saving throw or take 4 (1d8) fire damage.",
					"attack_bonus": 0,
					"damage_dice": "1d8"
				},
				{
					"name": "Innate Spellcasting (1/Day)",
					"desc": "The mephit can innately cast blur, requiring no material components. Its innate spellcasting ability is Charisma.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 2 (1d4) slashing damage plus 2 (1d4) fire damage.",
					"attack_bonus": 2,
					"damage_dice": "2d4"
				},
				{
					"name": "Steam Breath (Recharge 6)",
					"desc": "The mephit exhales a 15-foot cone of scalding steam. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 4 (1d8) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Mephits (1/Day)",
					"desc": "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Stirge",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 2,
			"hit_dice": "1d4",
			"speed": "10 ft., fly 40 ft.",
			"strength": 4,
			"dexterity": 16,
			"constitution": 11,
			"intelligence": 2,
			"wisdom": 8,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "1/8",
			"actions": [
				{
					"name": "Blood Drain",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 5 (1d4 + 3) piercing damage, and the stirge attaches to the target. While attached, the stirge doesn't attack. Instead, at the start of each of the stirge's turns, the target loses 5 (1d4 + 3) hit points due to blood loss.\nThe stirge can detach itself by spending 5 feet of its movement. It does so after it drains 10 hit points of blood from the target or the target dies. A creature, including the target, can use its action to detach the stirge.",
					"attack_bonus": 5,
					"damage_dice": "1d4",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Stone Giant",
			"size": "Huge",
			"type": "giant",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 17,
			"hit_points": 126,
			"hit_dice": "11d12",
			"speed": "40 ft.",
			"strength": 23,
			"dexterity": 15,
			"constitution": 20,
			"intelligence": 10,
			"wisdom": 12,
			"charisma": 9,
			"dexterity_save": 5,
			"constitution_save": 8,
			"wisdom_save": 4,
			"athletics": 12,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Giant",
			"challenge_rating": "7",
			"special_abilities": [
				{
					"name": "Stone Camouflage",
					"desc": "The giant has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The giant makes two greatclub attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatclub",
					"desc": "Melee Weapon Attack: +9 to hit, reach 15 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
					"attack_bonus": 9,
					"damage_dice": "3d8",
					"damage_bonus": 6
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage. If the target is a creature, it must succeed on a DC 17 Strength saving throw or be knocked prone.",
					"attack_bonus": 9,
					"damage_dice": "4d10",
					"damage_bonus": 6
				}
			],
			"reactions": [
				{
					"name": "Rock Catching",
					"desc": "If a rock or similar object is hurled at the giant, the giant can, with a successful DC 10 Dexterity saving throw, catch the missile and take no bludgeoning damage from it.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Stone Golem",
			"size": "Large",
			"type": "construct",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 17,
			"hit_points": 178,
			"hit_dice": "17d10",
			"speed": "30 ft.",
			"strength": 22,
			"dexterity": 9,
			"constitution": 20,
			"intelligence": 3,
			"wisdom": 11,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
			"condition_immunities": "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
			"senses": "darkvision 120 ft., passive Perception 10",
			"languages": "understands the languages of its creator but can't speak",
			"challenge_rating": "10",
			"special_abilities": [
				{
					"name": "Immutable Form",
					"desc": "The golem is immune to any spell or effect that would alter its form.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The golem has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The golem's weapon attacks are magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The golem makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
					"attack_bonus": 10,
					"damage_dice": "3d8",
					"damage_bonus": 6
				},
				{
					"name": "Slow (Recharge 5-6)",
					"desc": "The golem targets one or more creatures it can see within 10 ft. of it. Each target must make a DC 17 Wisdom saving throw against this magic. On a failed save, a target can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the target can take either an action or a bonus action on its turn, not both. These effects last for 1 minute. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Storm Giant",
			"size": "Huge",
			"type": "giant",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 16,
			"hit_points": 230,
			"hit_dice": "20d12",
			"speed": "50 ft., swim 50 ft.",
			"strength": 29,
			"dexterity": 14,
			"constitution": 20,
			"intelligence": 16,
			"wisdom": 18,
			"charisma": 18,
			"strength_save": 14,
			"constitution_save": 10,
			"wisdom_save": 9,
			"charisma_save": 9,
			"arcana": 8,
			"athletics": 14,
			"history": 8,
			"perception": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold",
			"damage_immunities": "lightning, thunder",
			"condition_immunities": "",
			"senses": "passive Perception 19",
			"languages": "Common, Giant",
			"challenge_rating": "13",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The giant can breathe air and water.",
					"attack_bonus": 0
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The giant's innate spellcasting ability is Charisma (spell save DC 17). It can innately cast the following spells, requiring no material components:\n\nAt will: detect magic, feather fall, levitate, light\n3/day each: control weather, water breathing",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The giant makes two greatsword attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Greatsword",
					"desc": "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 30 (6d6 + 9) slashing damage.",
					"attack_bonus": 14,
					"damage_dice": "6d6",
					"damage_bonus": 9
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +14 to hit, range 60/240 ft., one target. Hit: 35 (4d12 + 9) bludgeoning damage.",
					"attack_bonus": 14,
					"damage_dice": "4d12",
					"damage_bonus": 9
				},
				{
					"name": "Lightning Strike (Recharge 5-6)",
					"desc": "The giant hurls a magical lightning bolt at a point it can see within 500 feet of it. Each creature within 10 feet of that point must make a DC 17 Dexterity saving throw, taking 54 (12d8) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d8"
				}
			]
		},
		{
			"name": "Succubus/Incubus",
			"size": "Medium",
			"type": "fiend",
			"subtype": "shapechanger",
			"alignment": "neutral evil",
			"armor_class": 15,
			"hit_points": 66,
			"hit_dice": "12d8",
			"speed": "30 ft., fly 60 ft.",
			"strength": 8,
			"dexterity": 17,
			"constitution": 13,
			"intelligence": 15,
			"wisdom": 12,
			"charisma": 20,
			"deception": 9,
			"insight": 5,
			"perception": 5,
			"persuasion": 9,
			"stealth": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 15",
			"languages": "Abyssal, Common, Infernal, telepathy 60 ft.",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Telepathic Bond",
					"desc": "The fiend ignores the range restriction on its telepathy when communicating with a creature it has charmed. The two don't even need to be on the same plane of existence.",
					"attack_bonus": 0
				},
				{
					"name": "Shapechanger",
					"desc": "The fiend can use its action to polymorph into a Small or Medium humanoid, or back into its true form. Without wings, the fiend loses its flying speed. Other than its size and speed, its statistics are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Claw (Fiend Form Only)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Charm",
					"desc": "One humanoid the fiend can see within 30 feet of it must succeed on a DC 15 Wisdom saving throw or be magically charmed for 1 day. The charmed target obeys the fiend's verbal or telepathic commands. If the target suffers any harm or receives a suicidal command, it can repeat the saving throw, ending the effect on a success. If the target successfully saves against the effect, or if the effect on it ends, the target is immune to this fiend's Charm for the next 24 hours.\nThe fiend can have only one target charmed at a time. If it charms another, the effect on the previous target ends.",
					"attack_bonus": 0
				},
				{
					"name": "Draining Kiss",
					"desc": "The fiend kisses a creature charmed by it or a willing creature. The target must make a DC 15 Constitution saving throw against this magic, taking 32 (5d10 + 5) psychic damage on a failed save, or half as much damage on a successful one. The target's hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
					"attack_bonus": 0,
					"damage_dice": "5d10",
					"damage_bonus": 5
				},
				{
					"name": "Etherealness",
					"desc": "The fiend magically enters the Ethereal Plane from the Material Plane, or vice versa.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Swarm of Bats",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "0 ft., fly 30 ft.",
			"strength": 5,
			"dexterity": 15,
			"constitution": 10,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 60 ft., passive Perception 11",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Echolocation",
					"desc": "The swarm can't use its blindsight while deafened.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing",
					"desc": "The swarm has advantage on Wisdom (Perception) checks that rely on hearing.",
					"attack_bonus": 0
				},
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny bat. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +4 to hit, reach 0 ft., one creature in the swarm's space. Hit: 5 (2d4) piercing damage, or 2 (1d4) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 4,
					"damage_dice": "2d4"
				}
			]
		},
		{
			"name": "Swarm of Beetles",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "20 ft., burrow 5 ft., climb 20 ft.",
			"strength": 3,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 10 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 3,
					"damage_dice": "4d4"
				}
			]
		},
		{
			"name": "Swarm of Centipedes",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "20 ft., climb 20 ft.",
			"strength": 3,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 10 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.\nA creature reduced to 0 hit points by a swarm of centipedes is stable but poisoned for 1 hour, even after regaining hit points, and paralyzed while poisoned in this way.",
					"attack_bonus": 3,
					"damage_dice": "4d4"
				}
			]
		},
		{
			"name": "Swarm of Insects",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "20 ft., climb 20 ft.",
			"strength": 3,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 10 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 3,
					"damage_dice": "4d4"
				}
			]
		},
		{
			"name": "Swarm of Poisonous Snakes",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 14,
			"hit_points": 36,
			"hit_dice": "8d8",
			"speed": "30 ft., swim 30 ft.",
			"strength": 8,
			"dexterity": 18,
			"constitution": 11,
			"intelligence": 1,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 10 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny snake. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +6 to hit, reach 0 ft., one creature in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer. The target must make a DC 10 Constitution saving throw, taking 14 (4d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 6,
					"damage_dice": "2d6"
				}
			]
		},
		{
			"name": "Swarm of Quippers",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 28,
			"hit_dice": "8d8",
			"speed": "0 ft., swim 40 ft.",
			"strength": 13,
			"dexterity": 16,
			"constitution": 9,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "darkvision 60 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Blood Frenzy",
					"desc": "The swarm has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny quipper. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Water Breathing",
					"desc": "The swarm can breathe only underwater.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +5 to hit, reach 0 ft., one creature in the swarm's space. Hit: 14 (4d6) piercing damage, or 7 (2d6) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 5,
					"damage_dice": "4d6"
				}
			]
		},
		{
			"name": "Swarm of Rats",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 24,
			"hit_dice": "7d8",
			"speed": "30 ft.",
			"strength": 9,
			"dexterity": 11,
			"constitution": 9,
			"intelligence": 2,
			"wisdom": 10,
			"charisma": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "darkvision 30 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The swarm has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny rat. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +2 to hit, reach 0 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 2,
					"damage_dice": "2d6"
				}
			]
		},
		{
			"name": "Swarm of Ravens",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 24,
			"hit_dice": "7d8",
			"speed": "10 ft., fly 50 ft.",
			"strength": 6,
			"dexterity": 14,
			"constitution": 8,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "passive Perception 15",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny raven. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Beaks",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 4,
					"damage_dice": "2d6"
				}
			]
		},
		{
			"name": "Swarm of Spiders",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "20 ft., climb 20 ft.",
			"strength": 3,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 10 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The swarm can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Web Sense",
					"desc": "While in contact with a web, the swarm knows the exact location of any other creature in contact with the same web.",
					"attack_bonus": 0
				},
				{
					"name": "Web Walker",
					"desc": "The swarm ignores movement restrictions caused by webbing.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 3,
					"damage_dice": "4d4"
				}
			]
		},
		{
			"name": "Swarm of Wasps",
			"size": "Medium",
			"type": "swarm of Tiny beasts",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 22,
			"hit_dice": "5d8",
			"speed": "5 ft., fly 30 ft.",
			"strength": 3,
			"dexterity": 13,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 7,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "bludgeoning, piercing, slashing",
			"damage_immunities": "",
			"condition_immunities": "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
			"senses": "blindsight 10 ft., passive Perception 8",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Swarm",
					"desc": "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bites",
					"desc": "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
					"attack_bonus": 3,
					"damage_dice": "4d4"
				}
			]
		},
		{
			"name": "Tarrasque",
			"size": "Gargantuan",
			"type": "monstrosity",
			"subtype": "titan",
			"alignment": "unaligned",
			"armor_class": 25,
			"hit_points": 676,
			"hit_dice": "33d20",
			"speed": "40 ft.",
			"strength": 30,
			"dexterity": 11,
			"constitution": 30,
			"intelligence": 3,
			"wisdom": 11,
			"charisma": 11,
			"intelligence_save": 5,
			"wisdom_save": 9,
			"charisma_save": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
			"condition_immunities": "charmed, frightened, paralyzed, poisoned",
			"senses": "blindsight 120 ft., passive Perception 10",
			"languages": "",
			"challenge_rating": "30",
			"special_abilities": [
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the tarrasque fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The tarrasque has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Reflective Carapace",
					"desc": "Any time the tarrasque is targeted by a magic missile spell, a line spell, or a spell that requires a ranged attack roll, roll a d6. On a 1 to 5, the tarrasque is unaffected. On a 6, the tarrasque is unaffected, and the effect is reflected back at the caster as though it originated from the tarrasque, turning the caster into the target.",
					"attack_bonus": 0
				},
				{
					"name": "Siege Monster",
					"desc": "The tarrasque deals double damage to objects and structures.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The tarrasque can use its Frightful Presence. It then makes five attacks: one with its bite, two with its claws, one with its horns, and one with its tai l. It can use its Swallow instead of its bite.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 36 (4d12 + 10) piercing damage. If the target is a creature, it is grappled (escape DC 20). Until this grapple ends, the target is restrained, and the tarrasque can't bite another target.",
					"attack_bonus": 19,
					"damage_dice": "4d12",
					"damage_bonus": 10
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +19 to hit, reach 15 ft., one target. Hit: 28 (4d8 + 10) slashing damage.",
					"attack_bonus": 19,
					"damage_dice": "4d8",
					"damage_bonus": 10
				},
				{
					"name": "Horns",
					"desc": "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 32 (4d10 + 10) piercing damage.",
					"attack_bonus": 19,
					"damage_dice": "4d10",
					"damage_bonus": 10
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +19 to hit, reach 20 ft., one target. Hit: 24 (4d6 + 10) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be knocked prone.",
					"attack_bonus": 19,
					"damage_dice": "4d6",
					"damage_bonus": 10
				},
				{
					"name": "Frightful Presence",
					"desc": "Each creature of the tarrasque's choice within 120 feet of it and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the tarrasque is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the tarrasque's Frightful Presence for the next 24 hours.",
					"attack_bonus": 0
				},
				{
					"name": "Swallow",
					"desc": "The tarrasque makes one bite attack against a Large or smaller creature it is grappling. If the attack hits, the target takes the bite's damage, the target is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the tarrasque, and it takes 56 (16d6) acid damage at the start of each of the tarrasque's turns.\nIf the tarrasque takes 60 damage or more on a single turn from a creature inside it, the tarrasque must succeed on a DC 20 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the tarrasque. If the tarrasque dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 30 feet of movement, exiting prone.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Attack",
					"desc": "The tarrasque makes one claw attack or tail attack.",
					"attack_bonus": 0
				},
				{
					"name": "Move",
					"desc": "The tarrasque moves up to half its speed.",
					"attack_bonus": 0
				},
				{
					"name": "Chomp (Costs 2 Actions)",
					"desc": "The tarrasque makes one bite attack or uses its Swallow.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Thug",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any non-good alignment",
			"armor_class": 11,
			"hit_points": 32,
			"hit_dice": "5d8",
			"speed": "30 ft.",
			"strength": 15,
			"dexterity": 11,
			"constitution": 14,
			"intelligence": 10,
			"wisdom": 10,
			"charisma": 11,
			"intimidation": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language (usually Common)",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Pack Tactics",
					"desc": "The thug has advantage on an attack roll against a creature if at least one of the thug's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The thug makes two melee attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Mace",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) bludgeoning damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Heavy Crossbow",
					"desc": "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "1d10"
				}
			]
		},
		{
			"name": "Tiger",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 12,
			"hit_points": 37,
			"hit_dice": "5d10",
			"speed": "40 ft.",
			"strength": 17,
			"dexterity": 15,
			"constitution": 14,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 8,
			"perception": 3,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "",
			"challenge_rating": "1",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pounce",
					"desc": "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d10",
					"damage_bonus": 3
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Treant",
			"size": "Huge",
			"type": "plant",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 16,
			"hit_points": 138,
			"hit_dice": "12d12",
			"speed": "30 ft.",
			"strength": 23,
			"dexterity": 8,
			"constitution": 21,
			"intelligence": 12,
			"wisdom": 16,
			"charisma": 12,
			"damage_vulnerabilities": "fire",
			"damage_resistances": "bludgeoning, piercing",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "Common, Druidic, Elvish, Sylvan",
			"challenge_rating": "9",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the treant remains motionless, it is indistinguishable from a normal tree.",
					"attack_bonus": 0
				},
				{
					"name": "Siege Monster",
					"desc": "The treant deals double damage to objects and structures.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The treant makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 16 (3d6 + 6) bludgeoning damage.",
					"attack_bonus": 10,
					"damage_dice": "3d6",
					"damage_bonus": 6
				},
				{
					"name": "Rock",
					"desc": "Ranged Weapon Attack: +10 to hit, range 60/180 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
					"attack_bonus": 10,
					"damage_dice": "4d10",
					"damage_bonus": 6
				},
				{
					"name": "Animate Trees (1/Day)",
					"desc": "The treant magically animates one or two trees it can see within 60 feet of it. These trees have the same statistics as a treant, except they have Intelligence and Charisma scores of 1, they can't speak, and they have only the Slam action option. An animated tree acts as an ally of the treant. The tree remains animate for 1 day or until it dies; until the treant dies or is more than 120 feet from the tree; or until the treant takes a bonus action to turn it back into an inanimate tree. The tree then takes root if possible.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Tribal Warrior",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 12,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "30 ft.",
			"strength": 13,
			"dexterity": 11,
			"constitution": 12,
			"intelligence": 8,
			"wisdom": 11,
			"charisma": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "any one language",
			"challenge_rating": "1/8",
			"special_abilities": [
				{
					"name": "Pack Tactics",
					"desc": "The warrior has advantage on an attack roll against a creature if at least one of the warrior's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Spear",
					"desc": "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Triceratops",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 95,
			"hit_dice": "10d12",
			"speed": "50 ft.",
			"strength": 22,
			"dexterity": 9,
			"constitution": 17,
			"intelligence": 2,
			"wisdom": 11,
			"charisma": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 10",
			"languages": "",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Trampling Charge",
					"desc": "If the triceratops moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the triceratops can make one stomp attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Gore",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 24 (4d8 + 6) piercing damage.",
					"attack_bonus": 9,
					"damage_dice": "4d8",
					"damage_bonus": 6
				},
				{
					"name": "Stomp",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage",
					"attack_bonus": 9,
					"damage_dice": "3d10",
					"damage_bonus": 6
				}
			]
		},
		{
			"name": "Troll",
			"size": "Large",
			"type": "giant",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 15,
			"hit_points": 84,
			"hit_dice": "8d10",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 13,
			"constitution": 20,
			"intelligence": 7,
			"wisdom": 9,
			"charisma": 7,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "Giant",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Keen Smell",
					"desc": "The troll has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				},
				{
					"name": "Regeneration",
					"desc": "The troll regains 10 hit points at the start of its turn. If the troll takes acid or fire damage, this trait doesn't function at the start of the troll's next turn. The troll dies only if it starts its turn with 0 hit points and doesn't regenerate.",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Loathsome Limbs",
					"desc": "Whenever the troll takes at least 15 slashing damage at one time, roll a d20 to determine what else happens to it:\n1-10: Nothing else happens.\n11-14: One leg is severed from the troll if it has any legs left.\n15- 18: One arm is severed from the troll if it has any arms left.\n19-20: The troll is decapitated, but the troll dies only if it can't regenerate. If it dies, so does the severed head.\nIf the troll finishes a short or long rest without reattaching a severed limb or head, the part regrows. At that point, the severed part dies. Until then, a severed part acts on the troll's initiative and has its own action and movement. A severed part has AC 13, 10 hit points, and the troll's Regeneration trait.\nA severed leg is unable to attack and has a speed of 5 feet.\nA severed arm has a speed of 5 feet and can make one claw attack on its turn, with disadvantage on the attack roll unless the troll can see the arm and its target. Each time the troll loses an arm, it loses a claw attack.\nIf its head is severed, the troll loses its bite attack and its body is blinded unless the head can see it. The severed head has a speed of 0 feet and the troll's Keen Smell trait. It can make a bite attack but only against a target in its space.\nThe troll's speed is halved if it's missing a leg. If it loses both legs, it falls prone. If it has both arms, it can crawl. With only one arm, it can still crawl, but its speed is halved. With no arms or legs, its speed is 0, and it can't benefit from bonuses to speed.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The troll makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d6",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Tyrannosaurus Rex",
			"size": "Huge",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 136,
			"hit_dice": "13d12",
			"speed": "50 ft.",
			"strength": 25,
			"dexterity": 10,
			"constitution": 19,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 9,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "",
			"challenge_rating": "8",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The tyrannosaurus makes two attacks: one with its bite and one with its tail. It can't make both attacks against the same target.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 33 (4d12 + 7) piercing damage. If the target is a Medium or smaller creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the tyrannosaurus can't bite another target.",
					"attack_bonus": 10,
					"damage_dice": "4d12",
					"damage_bonus": 7
				},
				{
					"name": "Tail",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
					"attack_bonus": 10,
					"damage_dice": "3d8",
					"damage_bonus": 7
				}
			]
		},
		{
			"name": "Unicorn",
			"size": "Large",
			"type": "celestial",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 12,
			"hit_points": 67,
			"hit_dice": "9d10",
			"speed": "50 ft.",
			"strength": 18,
			"dexterity": 14,
			"constitution": 15,
			"intelligence": 11,
			"wisdom": 17,
			"charisma": 16,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "charmed, paralyzed, poisoned",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "Celestial, Elvish, Sylvan, telepathy 60 ft.",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Charge",
					"desc": "If the unicorn moves at least 20 ft. straight toward a target and then hits it with a horn attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d8"
				},
				{
					"name": "Innate Spellcasting",
					"desc": "The unicorn's innate spellcasting ability is Charisma (spell save DC 14). The unicorn can innately cast the following spells, requiring no components:\n\nAt will: detect evil and good, druidcraft, pass without trace\n1/day each: calm emotions, dispel evil and good, entangle",
					"attack_bonus": 0
				},
				{
					"name": "Magic Resistance",
					"desc": "The unicorn has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				},
				{
					"name": "Magic Weapons",
					"desc": "The unicorn's weapon attacks are magical.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The unicorn makes two attacks: one with its hooves and one with its horn.",
					"attack_bonus": 0
				},
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Horn",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 8 (1d8 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Healing Touch (3/Day)",
					"desc": "The unicorn touches another creature with its horn. The target magically regains 11 (2d8 + 2) hit points. In addition, the touch removes all diseases and neutralizes all poisons afflicting the target.",
					"attack_bonus": 0
				},
				{
					"name": "Teleport (1/Day)",
					"desc": "The unicorn magically teleports itself and up to three willing creatures it can see within 5 ft. of it, along with any equipment they are wearing or carrying, to a location the unicorn is familiar with, up to 1 mile away.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Hooves",
					"desc": "The unicorn makes one attack with its hooves.",
					"attack_bonus": 0
				},
				{
					"name": "Shimmering Shield (Costs 2 Actions)",
					"desc": "The unicorn creates a shimmering, magical field around itself or another creature it can see within 60 ft. of it. The target gains a +2 bonus to AC until the end of the unicorn's next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Heal Self (Costs 3 Actions)",
					"desc": "The unicorn magically regains 11 (2d8 + 2) hit points.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Vampire",
			"size": "Medium",
			"type": "undead",
			"subtype": "shapechanger",
			"alignment": "lawful evil",
			"armor_class": 16,
			"hit_points": 144,
			"hit_dice": "17d8",
			"speed": "30 ft.",
			"strength": 18,
			"dexterity": 18,
			"constitution": 18,
			"intelligence": 17,
			"wisdom": 15,
			"charisma": 18,
			"dexterity_save": 9,
			"wisdom_save": 7,
			"charisma_save": 9,
			"perception": 7,
			"stealth": 9,
			"damage_vulnerabilities": "",
			"damage_resistances": "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 120 ft., passive Perception 17",
			"languages": "the languages it knew in life",
			"challenge_rating": "13",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "If the vampire isn't in sun light or running water, it can use its action to polymorph into a Tiny bat or a Medium cloud of mist, or back into its true form.\nWhile in bat form, the vampire can't speak, its walking speed is 5 feet, and it has a flying speed of 30 feet. Its statistics, other than its size and speed, are unchanged. Anything it is wearing transforms with it, but nothing it is carrying does. It reverts to its true form if it dies.\nWhile in mist form, the vampire can't take any actions, speak, or manipulate objects. It is weightless, has a flying speed of 20 feet, can hover, and can enter a hostile creature's space and stop there. In addition, if air can pass through a space, the mist can do so without squeezing, and it can't pass through water. It has advantage on Strength, Dexterity, and Constitution saving throws, and it is immune to all nonmagical damage, except the damage it takes from sunlight.",
					"attack_bonus": 0
				},
				{
					"name": "Legendary Resistance (3/Day)",
					"desc": "If the vampire fails a saving throw, it can choose to succeed instead.",
					"attack_bonus": 0
				},
				{
					"name": "Misty Escape",
					"desc": "When it drops to 0 hit points outside its resting place, the vampire transforms into a cloud of mist (as in the Shapechanger trait) instead of falling unconscious, provided that it isn't in sunlight or running water. If it can't transform, it is destroyed.\nWhile it has 0 hit points in mist form, it can't revert to its vampire form, and it must reach its resting place within 2 hours or be destroyed. Once in its resting place, it reverts to its vampire form. It is then paralyzed until it regains at least 1 hit point. After spending 1 hour in its resting place with 0 hit points, it regains 1 hit point.",
					"attack_bonus": 0
				},
				{
					"name": "Regeneration",
					"desc": "The vampire regains 20 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Vampire Weaknesses",
					"desc": "The vampire has the following flaws:\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\nHarmed by Running Water. The vampire takes 20 acid damage if it ends its turn in running water.\nStake to the Heart. If a piercing weapon made of wood is driven into the vampire's heart while the vampire is incapacitated in its resting place, the vampire is paralyzed until the stake is removed.\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack (Vampire Form Only)",
					"desc": "The vampire makes two attacks, only one of which can be a bite attack.",
					"attack_bonus": 0
				},
				{
					"name": "Unarmed Strike (Vampire Form Only)",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one creature. Hit: 8 (1d8 + 4) bludgeoning damage. Instead of dealing damage, the vampire can grapple the target (escape DC 18).",
					"attack_bonus": 9,
					"damage_dice": "1d8",
					"damage_bonus": 4
				},
				{
					"name": "Bite (Bat or Vampire Form Only)",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 7 (1d6 + 4) piercing damage plus 10 (3d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0. A humanoid slain in this way and then buried in the ground rises the following night as a vampire spawn under the vampire's control.",
					"attack_bonus": 9,
					"damage_dice": "1d6 + 3d6",
					"damage_bonus": 4
				},
				{
					"name": "Charm",
					"desc": "The vampire targets one humanoid it can see within 30 ft. of it. If the target can see the vampire, the target must succeed on a DC 17 Wisdom saving throw against this magic or be charmed by the vampire. The charmed target regards the vampire as a trusted friend to be heeded and protected. Although the target isn't under the vampire's control, it takes the vampire's requests or actions in the most favorable way it can, and it is a willing target for the vampire's bit attack.\nEach time the vampire or the vampire's companions do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the vampire is destroyed, is on a different plane of existence than the target, or takes a bonus action to end the effect.",
					"attack_bonus": 0
				},
				{
					"name": "Children of the Night (1/Day)",
					"desc": "The vampire magically calls 2d4 swarms of bats or rats, provided that the sun isn't up. While outdoors, the vampire can call 3d6 wolves instead. The called creatures arrive in 1d4 rounds, acting as allies of the vampire and obeying its spoken commands. The beasts remain for 1 hour, until the vampire dies, or until the vampire dismisses them as a bonus action.",
					"attack_bonus": 0
				}
			],
			"legendary_actions": [
				{
					"name": "Move",
					"desc": "The vampire moves up to its speed without provoking opportunity attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Unarmed Strike",
					"desc": "The vampire makes one unarmed strike.",
					"attack_bonus": 0
				},
				{
					"name": "Bite (Costs 2 Actions)",
					"desc": "The vampire makes one bite attack.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Vampire Spawn",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 15,
			"hit_points": 82,
			"hit_dice": "11d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 16,
			"constitution": 16,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 12,
			"dexterity_save": 6,
			"wisdom_save": 3,
			"perception": 3,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "the languages it knew in life",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Regeneration",
					"desc": "The vampire regains 10 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
					"attack_bonus": 0
				},
				{
					"name": "Spider Climb",
					"desc": "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
					"attack_bonus": 0
				},
				{
					"name": "Vampire Weaknesses",
					"desc": "The vampire has the following flaws:\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\nHarmed by Running Water. The vampire takes 20 acid damage when it ends its turn in running water.\nStake to the Heart. The vampire is destroyed if a piercing weapon made of wood is driven into its heart while it is incapacitated in its resting place.\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The vampire makes two attacks, only one of which can be a bite attack.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 6 (1d6 + 3) piercing damage plus 7 (2d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
					"attack_bonus": 61
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 8 (2d4 + 3) slashing damage. Instead of dealing damage, the vampire can grapple the target (escape DC 13).",
					"attack_bonus": 6,
					"damage_dice": "2d4",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Veteran",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "any race",
			"alignment": "any alignment",
			"armor_class": 17,
			"hit_points": 58,
			"hit_dice": "9d8",
			"speed": "30 ft.",
			"strength": 16,
			"dexterity": 13,
			"constitution": 14,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 10,
			"athletics": 5,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "any one language (usually Common)",
			"challenge_rating": "3",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
					"attack_bonus": 0
				},
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Shortsword",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Heavy Crossbow",
					"desc": "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
					"attack_bonus": 3,
					"damage_dice": "1d10",
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Violet Fungus",
			"size": "Medium",
			"type": "plant",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 5,
			"hit_points": 18,
			"hit_dice": "4d8",
			"speed": "5 ft.",
			"strength": 3,
			"dexterity": 1,
			"constitution": 10,
			"intelligence": 1,
			"wisdom": 3,
			"charisma": 1,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "blinded, deafened, frightened",
			"senses": "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "False Appearance",
					"desc": "While the violet fungus remains motionless, it is indistinguishable from an ordinary fungus.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The fungus makes 1d4 Rotting Touch attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Rotting Touch",
					"desc": "Melee Weapon Attack: +2 to hit, reach 10 ft., one creature. Hit: 4 (1d8) necrotic damage.",
					"attack_bonus": 2,
					"damage_dice": "1d8"
				}
			]
		},
		{
			"name": "Vrock",
			"size": "Large",
			"type": "fiend",
			"subtype": "demon",
			"alignment": "chaotic evil",
			"armor_class": 15,
			"hit_points": 104,
			"hit_dice": "11d10",
			"speed": "40 ft., fly 60 ft.",
			"strength": 17,
			"dexterity": 15,
			"constitution": 18,
			"intelligence": 8,
			"wisdom": 13,
			"charisma": 8,
			"dexterity_save": 5,
			"wisdom_save": 4,
			"charisma_save": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "darkvision 120 ft., passive Perception 11",
			"languages": "Abyssal, telepathy 120 ft.",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Magic Resistance",
					"desc": "The vrock has advantage on saving throws against spells and other magical effects.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The vrock makes two attacks: one with its beak and one with its talons.",
					"attack_bonus": 0
				},
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Talons",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "2d10",
					"damage_bonus": 3
				},
				{
					"name": "Spores (Recharge 6)",
					"desc": "A 15-foot-radius cloud of toxic spores extends out from the vrock. The spores spread around corners. Each creature in that area must succeed on a DC 14 Constitution saving throw or become poisoned. While poisoned in this way, a target takes 5 (1d10) poison damage at the start of each of its turns. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. Emptying a vial of holy water on the target also ends the effect on it.",
					"attack_bonus": 0
				},
				{
					"name": "Stunning Screech (1/Day)",
					"desc": "The vrock emits a horrific screech. Each creature within 20 feet of it that can hear it and that isn't a demon must succeed on a DC 14 Constitution saving throw or be stunned until the end of the vrock's next turn .",
					"attack_bonus": 0
				},
				{
					"name": "Variant: Summon Demon (1/Day)",
					"desc": "The demon chooses what to summon and attempts a magical summoning.\nA vrock has a 30 percent chance of summoning 2d4 dretches or one vrock.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Vulture",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 10,
			"hit_points": 5,
			"hit_dice": "1d8",
			"speed": "10 ft., fly 50 ft.",
			"strength": 7,
			"dexterity": 10,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 4,
			"perception": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Sight and Smell",
					"desc": "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Beak",
					"desc": "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
					"attack_bonus": 2,
					"damage_dice": "1d4"
				}
			]
		},
		{
			"name": "Warhorse",
			"size": "Large",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 11,
			"hit_points": 19,
			"hit_dice": "3d10",
			"speed": "60 ft.",
			"strength": 18,
			"dexterity": 12,
			"constitution": 13,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 11",
			"languages": "",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Trampling Charge",
					"desc": "If the horse moves at least 20 ft. straight toward a creature and then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the horse can make another attack with its hooves against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Warhorse Skeleton",
			"size": "Large",
			"type": "undead",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 13,
			"hit_points": 22,
			"hit_dice": "3d10",
			"speed": "60 ft.",
			"strength": 18,
			"dexterity": 12,
			"constitution": 15,
			"intelligence": 2,
			"wisdom": 8,
			"charisma": 5,
			"damage_vulnerabilities": "bludgeoning",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, poisoned",
			"senses": "darkvision 60 ft., passive Perception 9",
			"languages": "",
			"challenge_rating": "1/2",
			"actions": [
				{
					"name": "Hooves",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Water Elemental",
			"size": "Large",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 14,
			"hit_points": 114,
			"hit_dice": "12d10",
			"speed": "30 ft., swim 90 ft.",
			"strength": 18,
			"dexterity": 14,
			"constitution": 18,
			"intelligence": 5,
			"wisdom": 10,
			"charisma": 8,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "poison",
			"condition_immunities": "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
			"senses": "darkvision 60 ft., passive Perception 10",
			"languages": "Aquan",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Water Form",
					"desc": "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
					"attack_bonus": 0
				},
				{
					"name": "Freeze",
					"desc": "If the elemental takes cold damage, it partially freezes; its speed is reduced by 20 ft. until the end of its next turn.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The elemental makes two slam attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Whelm (Recharge 4-6)",
					"desc": "Each creature in the elemental's space must make a DC 15 Strength saving throw. On a failure, a target takes 13 (2d8 + 4) bludgeoning damage. If it is Large or smaller, it is also grappled (escape DC 14). Until this grapple ends, the target is restrained and unable to breathe unless it can breathe water. If the saving throw is successful, the target is pushed out of the elemental's space.\nThe elemental can grapple one Large creature or up to two Medium or smaller creatures at one time. At the start of each of the elemental's turns, each target grappled by it takes 13 (2d8 + 4) bludgeoning damage. A creature within 5 feet of the elemental can pull a creature or object out of it by taking an action to make a DC 14 Strength and succeeding.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Weasel",
			"size": "Tiny",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 1,
			"hit_dice": "1d4",
			"speed": "30 ft.",
			"strength": 3,
			"dexterity": 16,
			"constitution": 8,
			"intelligence": 2,
			"wisdom": 12,
			"charisma": 3,
			"perception": 3,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "0",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
					"attack_bonus": 5,
					"damage_bonus": 1
				}
			]
		},
		{
			"name": "Werebear",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "human",
			"alignment": "neutral good",
			"armor_class": 10,
			"hit_points": 135,
			"hit_dice": "18d8",
			"speed": "30 ft. (40 ft., climb 30 ft. in bear or hybrid form)",
			"strength": 19,
			"dexterity": 10,
			"constitution": 17,
			"intelligence": 11,
			"wisdom": 12,
			"charisma": 12,
			"perception": 7,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
			"condition_immunities": "",
			"senses": "passive Perception 17",
			"languages": "Common (can't speak in bear form)",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The werebear can use its action to polymorph into a Large bear-humanoid hybrid or into a Large bear, or back into its true form, which is humanoid. Its statistics, other than its size and AC, are the same in each form. Any equipment it. is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Smell",
					"desc": "The werebear has advantage on WisGlom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "In bear form, the werebear makes two claw attacks. In humanoid form, it makes two greataxe attacks. In hybrid form, it can attack like a bear or a humanoid.",
					"attack_bonus": 0
				},
				{
					"name": "Bite (Bear or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage. If the target is a humanoid, it must succeed on a DC 14 Constitution saving throw or be cursed with were bear lycanthropy.",
					"attack_bonus": 7,
					"damage_dice": "2d10",
					"damage_bonus": 4
				},
				{
					"name": "Claw (Bear or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Greataxe (Humanoid or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "1d12",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Wereboar",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "human",
			"alignment": "neutral evil",
			"armor_class": 10,
			"hit_points": 78,
			"hit_dice": "12d8",
			"speed": "30 ft. (40 ft. in boar form)",
			"strength": 17,
			"dexterity": 10,
			"constitution": 15,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 8,
			"perception": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
			"condition_immunities": "",
			"senses": "passive Perception 12",
			"languages": "Common (can't speak in boar form)",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The wereboar can use its action to polymorph into a boar-humanoid hybrid or into a boar, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Charge (Boar or Hybrid Form Only)",
					"desc": "If the wereboar moves at least 15 feet straight toward a target and then hits it with its tusks on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
					"attack_bonus": 0,
					"damage_dice": "2d6"
				},
				{
					"name": "Relentless (Recharges after a Short or Long Rest)",
					"desc": "If the wereboar takes 14 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack (Humanoid or Hybrid Form Only)",
					"desc": "The wereboar makes two attacks, only one of which can be with its tusks.",
					"attack_bonus": 0
				},
				{
					"name": "Maul (Humanoid or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				},
				{
					"name": "Tusks (Boar or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with wereboar lycanthropy.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Wererat",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "human",
			"alignment": "lawful evil",
			"armor_class": 12,
			"hit_points": 33,
			"hit_dice": "6d8",
			"speed": "30 ft.",
			"strength": 10,
			"dexterity": 15,
			"constitution": 12,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 8,
			"perception": 2,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
			"condition_immunities": "",
			"senses": "darkvision 60 ft. (rat form only), passive Perception 12",
			"languages": "Common (can't speak in rat form)",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The wererat can use its action to polymorph into a rat-humanoid hybrid or into a giant rat, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Smell",
					"desc": "The wererat has advantage on Wisdom (Perception) checks that rely on smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack (Humanoid or Hybrid Form Only)",
					"desc": "The wererat makes two attacks, only one of which can be a bite.",
					"attack_bonus": 0
				},
				{
					"name": "Bite (Rat or Hybrid Form Only).",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 11 Constitution saving throw or be cursed with wererat lycanthropy.",
					"attack_bonus": 4,
					"damage_dice": "1d4",
					"damage_bonus": 2
				},
				{
					"name": "Shortsword (Humanoid or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Hand Crossbow (Humanoid or Hybrid Form Only)",
					"desc": "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Weretiger",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "human",
			"alignment": "neutral",
			"armor_class": 12,
			"hit_points": 120,
			"hit_dice": "16d8",
			"speed": "30 ft. (40 ft. in tiger form)",
			"strength": 17,
			"dexterity": 15,
			"constitution": 16,
			"intelligence": 10,
			"wisdom": 13,
			"charisma": 11,
			"perception": 5,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 15",
			"languages": "Common (can't speak in tiger form)",
			"challenge_rating": "4",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The weretiger can use its action to polymorph into a tiger-humanoid hybrid or into a tiger, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing and Smell",
					"desc": "The weretiger has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pounce (Tiger or Hybrid Form Only)",
					"desc": "If the weretiger moves at least 15 feet straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the weretiger can make one bite attack against it as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack (Humanoid or Hybrid Form Only)",
					"desc": "In humanoid form, the weretiger makes two scimitar attacks or two longbow attacks. In hybrid form, it can attack like a humanoid or make two claw attacks.",
					"attack_bonus": 0
				},
				{
					"name": "Bite (Tiger or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage. If the target is a humanoid, it must succeed on a DC 13 Constitution saving throw or be cursed with weretiger lycanthropy.",
					"attack_bonus": 5,
					"damage_dice": "1d10",
					"damage_bonus": 3
				},
				{
					"name": "Claw (Tiger or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d8",
					"damage_bonus": 3
				},
				{
					"name": "Scimitar (Humanoid or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
					"attack_bonus": 5,
					"damage_dice": "1d6",
					"damage_bonus": 3
				},
				{
					"name": "Longbow (Humanoid or Hybrid Form Only)",
					"desc": "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Werewolf",
			"size": "Medium",
			"type": "humanoid",
			"subtype": "human",
			"alignment": "chaotic evil",
			"armor_class": 11,
			"hit_points": 58,
			"hit_dice": "9d8",
			"speed": "30 ft. (40 ft. in wolf form)",
			"strength": 15,
			"dexterity": 13,
			"constitution": 14,
			"intelligence": 10,
			"wisdom": 11,
			"charisma": 10,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
			"condition_immunities": "",
			"senses": "passive Perception 14",
			"languages": "Common (can't speak in wolf form)",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Shapechanger",
					"desc": "The werewolf can use its action to polymorph into a wolf-humanoid hybrid or into a wolf, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
					"attack_bonus": 0
				},
				{
					"name": "Keen Hearing and Smell",
					"desc": "The werewolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack (Humanoid or Hybrid Form Only)",
					"desc": "The werewolf makes two attacks: one with its bite and one with its claws or spear.",
					"attack_bonus": 0
				},
				{
					"name": "Bite (Wolf or Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with werewolf lycanthropy.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Claws (Hybrid Form Only)",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (2d4 + 2) slashing damage.",
					"attack_bonus": 4,
					"damage_dice": "2d4",
					"damage_bonus": 2
				},
				{
					"name": "Spear (Humanoid Form Only)",
					"desc": "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": -2
				}
			]
		},
		{
			"name": "White Dragon Wyrmling",
			"size": "Medium",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 16,
			"hit_points": 32,
			"hit_dice": "5d8",
			"speed": "30 ft., burrow 15 ft., fly 60 ft., swim 30 ft.",
			"strength": 14,
			"dexterity": 10,
			"constitution": 14,
			"intelligence": 5,
			"wisdom": 10,
			"charisma": 11,
			"dexterity_save": 2,
			"constitution_save": 4,
			"wisdom_save": 2,
			"charisma_save": 2,
			"perception": 4,
			"stealth": 2,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
			"languages": "Draconic",
			"challenge_rating": "2",
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) cold damage.",
					"attack_bonus": 4,
					"damage_dice": "1d10 + 1d4",
					"damage_bonus": 2
				},
				{
					"name": "Cold Breath (Recharge 5-6)",
					"desc": "The dragon exhales an icy blast of hail in a 15-foot cone. Each creature in that area must make a DC 12 Constitution saving throw, taking 22 (5d8) cold damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "5d8"
				}
			]
		},
		{
			"name": "Wight",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 14,
			"hit_points": 45,
			"hit_dice": "6d8",
			"speed": "30 ft.",
			"strength": 15,
			"dexterity": 14,
			"constitution": 16,
			"intelligence": 10,
			"wisdom": 13,
			"charisma": 15,
			"perception": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 13",
			"languages": "the languages it knew in life",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the wight has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The wight makes two longsword attacks or two longbow attacks. It can use its Life Drain in place of one longsword attack.",
					"attack_bonus": 0
				},
				{
					"name": "Life Drain",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) necrotic damage. The target must succeed on a DC 13 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.\nA humanoid slain by this attack rises 24 hours later as a zombie under the wight's control, unless the humanoid is restored to life or its body is destroyed. The wight can have no more than twelve zombies under its control at one time.",
					"attack_bonus": 4,
					"damage_dice": "1d6",
					"damage_bonus": 2
				},
				{
					"name": "Longsword",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage, or 7 (1d10 + 2) slashing damage if used with two hands.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				},
				{
					"name": "Longbow",
					"desc": "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
					"attack_bonus": 4,
					"damage_dice": "1d8",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Will-o'-Wisp",
			"size": "Tiny",
			"type": "undead",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 19,
			"hit_points": 22,
			"hit_dice": "9d4",
			"speed": "0 ft., fly 50 ft. (hover)",
			"strength": 1,
			"dexterity": 28,
			"constitution": 10,
			"intelligence": 13,
			"wisdom": 14,
			"charisma": 11,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid, cold, fire, necrotic, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
			"damage_immunities": "lightning, poison",
			"condition_immunities": "exhaustion, grappled, paralyzed, poisoned, prone, restrained, unconscious",
			"senses": "darkvision 120 ft., passive Perception 12",
			"languages": "the languages it knew in life",
			"challenge_rating": "2",
			"special_abilities": [
				{
					"name": "Consume Life",
					"desc": "As a bonus action, the will-o'-wisp can target one creature it can see within 5 ft. of it that has 0 hit points and is still alive. The target must succeed on a DC 10 Constitution saving throw against this magic or die. If the target dies, the will-o'-wisp regains 10 (3d6) hit points.",
					"attack_bonus": 0
				},
				{
					"name": "Ephemeral",
					"desc": "The will-o'-wisp can't wear or carry anything.",
					"attack_bonus": 0
				},
				{
					"name": "Incorporeal Movement",
					"desc": "The will-o'-wisp can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
					"attack_bonus": 0
				},
				{
					"name": "Variable Illumination",
					"desc": "The will-o'-wisp sheds bright light in a 5- to 20-foot radius and dim light for an additional number of ft. equal to the chosen radius. The will-o'-wisp can alter the radius as a bonus action.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Shock",
					"desc": "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d8) lightning damage.",
					"attack_bonus": 4,
					"damage_dice": "2d8"
				},
				{
					"name": "Invisibility",
					"desc": "The will-o'-wisp and its light magically become invisible until it attacks or uses its Consume Life, or until its concentration ends (as if concentrating on a spell).",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Winter Wolf",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 13,
			"hit_points": 75,
			"hit_dice": "10d10",
			"speed": "50 ft.",
			"strength": 18,
			"dexterity": 13,
			"constitution": 14,
			"intelligence": 7,
			"wisdom": 12,
			"charisma": 8,
			"perception": 5,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "passive Perception 15",
			"languages": "Common, Giant, Winter Wolf",
			"challenge_rating": "3",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				},
				{
					"name": "Snow Camouflage",
					"desc": "The wolf has advantage on Dexterity (Stealth) checks made to hide in snowy terrain.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
					"attack_bonus": 6,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Cold Breath (Recharge 5-6)",
					"desc": "The wolf exhales a blast of freezing wind in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "4d8"
				}
			]
		},
		{
			"name": "Wolf",
			"size": "Medium",
			"type": "beast",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 11,
			"hit_dice": "2d8",
			"speed": "40 ft.",
			"strength": 12,
			"dexterity": 15,
			"constitution": 12,
			"intelligence": 3,
			"wisdom": 12,
			"charisma": 6,
			"perception": 3,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "passive Perception 13",
			"languages": "",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				},
				{
					"name": "Pack Tactics",
					"desc": "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
					"attack_bonus": 4,
					"damage_dice": "2d4",
					"damage_bonus": 2
				}
			]
		},
		{
			"name": "Worg",
			"size": "Large",
			"type": "monstrosity",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 13,
			"hit_points": 26,
			"hit_dice": "4d10",
			"speed": "50 ft.",
			"strength": 16,
			"dexterity": 13,
			"constitution": 13,
			"intelligence": 7,
			"wisdom": 11,
			"charisma": 8,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "Goblin, Worg",
			"challenge_rating": "1/2",
			"special_abilities": [
				{
					"name": "Keen Hearing and Smell",
					"desc": "The worg has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
					"attack_bonus": 5,
					"damage_dice": "2d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Wraith",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 13,
			"hit_points": 67,
			"hit_dice": "9d8",
			"speed": "0 ft., fly 60 ft. (hover)",
			"strength": 6,
			"dexterity": 16,
			"constitution": 16,
			"intelligence": 12,
			"wisdom": 14,
			"charisma": 15,
			"damage_vulnerabilities": "",
			"damage_resistances": "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
			"damage_immunities": "necrotic, poison",
			"condition_immunities": "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained",
			"senses": "darkvision 60 ft., passive Perception 12",
			"languages": "the languages it knew in life",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Incorporeal Movement",
					"desc": "The wraith can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
					"attack_bonus": 0
				},
				{
					"name": "Sunlight Sensitivity",
					"desc": "While in sunlight, the wraith has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Life Drain",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 21 (4d8 + 3) necrotic damage. The target must succeed on a DC 14 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
					"attack_bonus": 6,
					"damage_dice": "4d8",
					"damage_bonus": 3
				},
				{
					"name": "Create Specter",
					"desc": "The wraith targets a humanoid within 10 feet of it that has been dead for no longer than 1 minute and died violently. The target's spirit rises as a specter in the space of its corpse or in the nearest unoccupied space. The specter is under the wraith's control. The wraith can have no more than seven specters under its control at one time.",
					"attack_bonus": 0
				}
			]
		},
		{
			"name": "Wyvern",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "unaligned",
			"armor_class": 13,
			"hit_points": 110,
			"hit_dice": "13d10",
			"speed": "20 ft., fly 80 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 16,
			"intelligence": 5,
			"wisdom": 12,
			"charisma": 6,
			"perception": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., passive Perception 14",
			"languages": "",
			"challenge_rating": "6",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The wyvern makes two attacks: one with its bite and one with its stinger. While flying, it can use its claws in place of one other attack.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Claws",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d8",
					"damage_bonus": 4
				},
				{
					"name": "Stinger",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage. The target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				}
			]
		},
		{
			"name": "Xorn",
			"size": "Medium",
			"type": "elemental",
			"subtype": "",
			"alignment": "neutral",
			"armor_class": 19,
			"hit_points": 73,
			"hit_dice": "7d8",
			"speed": "20 ft., burrow 20 ft.",
			"strength": 17,
			"dexterity": 10,
			"constitution": 22,
			"intelligence": 11,
			"wisdom": 10,
			"charisma": 11,
			"perception": 6,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "piercing and slashing from nonmagical weapons that aren't adamantine",
			"damage_immunities": "",
			"condition_immunities": "",
			"senses": "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
			"languages": "Terran",
			"challenge_rating": "5",
			"special_abilities": [
				{
					"name": "Earth Glide",
					"desc": "The xorn can burrow through nonmagical, unworked earth and stone. While doing so, the xorn doesn't disturb the material it moves through.",
					"attack_bonus": 0
				},
				{
					"name": "Stone Camouflage",
					"desc": "The xorn has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
					"attack_bonus": 0
				},
				{
					"name": "Treasure Sense",
					"desc": "The xorn can pinpoint, by scent, the location of precious metals and stones, such as coins and gems, within 60 ft. of it.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The xorn makes three claw attacks and one bite attack.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (3d6 + 3) piercing damage.",
					"attack_bonus": 6,
					"damage_dice": "3d6",
					"damage_bonus": 3
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
					"attack_bonus": 6,
					"damage_dice": "1d6",
					"damage_bonus": 3
				}
			]
		},
		{
			"name": "Young Black Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 18,
			"hit_points": 127,
			"hit_dice": "15d10",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 19,
			"dexterity": 14,
			"constitution": 17,
			"intelligence": 12,
			"wisdom": 11,
			"charisma": 15,
			"dexterity_save": 5,
			"constitution_save": 6,
			"wisdom_save": 3,
			"charisma_save": 5,
			"perception": 6,
			"stealth": 5,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
			"languages": "Common, Draconic",
			"challenge_rating": "7",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) acid damage.",
					"attack_bonus": 7,
					"damage_dice": "2d10 + 1d8",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Acid Breath (Recharge 5-6)",
					"desc": "The dragon exhales acid in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 49 (11d8) acid damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "11d8"
				}
			]
		},
		{
			"name": "Young Blue Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 152,
			"hit_dice": "16d10",
			"speed": "40 ft., burrow 40 ft., fly 80 ft.",
			"strength": 21,
			"dexterity": 10,
			"constitution": 19,
			"intelligence": 14,
			"wisdom": 13,
			"charisma": 17,
			"dexterity_save": 4,
			"constitution_save": 8,
			"wisdom_save": 5,
			"charisma_save": 7,
			"perception": 9,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
			"languages": "Common, Draconic",
			"challenge_rating": "9",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage plus 5 (1d10) lightning damage.",
					"attack_bonus": 9,
					"damage_dice": "2d10 + 1d10",
					"damage_bonus": 5
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
					"attack_bonus": 9,
					"damage_dice": "2d6",
					"damage_bonus": 5
				},
				{
					"name": "Lightning Breath (Recharge 5-6)",
					"desc": "The dragon exhales lightning in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "10d10"
				}
			]
		},
		{
			"name": "Young Brass Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 17,
			"hit_points": 110,
			"hit_dice": "13d10",
			"speed": "40 ft., burrow 20 ft., fly 80 ft.",
			"strength": 19,
			"dexterity": 10,
			"constitution": 17,
			"intelligence": 12,
			"wisdom": 11,
			"charisma": 15,
			"dexterity_save": 3,
			"constitution_save": 6,
			"wisdom_save": 3,
			"charisma_save": 5,
			"perception": 6,
			"persuasion": 5,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
			"languages": "Common, Draconic",
			"challenge_rating": "6",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d10",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 42 (12d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw or fall unconscious for 5 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
					"attack_bonus": 0,
					"damage_dice": "12d6"
				}
			]
		},
		{
			"name": "Young Bronze Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 18,
			"hit_points": 142,
			"hit_dice": "15d10",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 21,
			"dexterity": 10,
			"constitution": 19,
			"intelligence": 14,
			"wisdom": 13,
			"charisma": 17,
			"dexterity_save": 3,
			"constitution_save": 7,
			"wisdom_save": 4,
			"charisma_save": 6,
			"insight": 4,
			"perception": 7,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "lightning",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
			"languages": "Common, Draconic",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage.",
					"attack_bonus": 8,
					"damage_dice": "2d10",
					"damage_bonus": 5
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
					"attack_bonus": 8,
					"damage_dice": "2d6",
					"damage_bonus": 5
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 15 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 15 Strength saving throw. On a failed save, the creature is pushed 40 feet away from the dragon.",
					"attack_bonus": 0,
					"damage_dice": "10d10"
				}
			]
		},
		{
			"name": "Young Copper Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic good",
			"armor_class": 17,
			"hit_points": 119,
			"hit_dice": "14d10",
			"speed": "40 ft., climb 40 ft., fly 80 ft.",
			"strength": 19,
			"dexterity": 12,
			"constitution": 17,
			"intelligence": 16,
			"wisdom": 13,
			"charisma": 15,
			"dexterity_save": 4,
			"constitution_save": 6,
			"wisdom_save": 4,
			"charisma_save": 5,
			"deception": 5,
			"perception": 7,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "acid",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
			"languages": "Common, Draconic",
			"challenge_rating": "7",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d10",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 40 (9d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
					"attack_bonus": 0,
					"damage_dice": "9d8"
				}
			]
		},
		{
			"name": "Young Gold Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 18,
			"hit_points": 178,
			"hit_dice": "17d10",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 23,
			"dexterity": 14,
			"constitution": 21,
			"intelligence": 16,
			"wisdom": 13,
			"charisma": 20,
			"dexterity_save": 6,
			"constitution_save": 9,
			"wisdom_save": 5,
			"charisma_save": 9,
			"insight": 5,
			"perception": 9,
			"persuasion": 9,
			"stealth": 6,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
			"languages": "Common, Draconic",
			"challenge_rating": "10",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
					"attack_bonus": 10,
					"damage_dice": "2d10",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 10,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 55 (10d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "10d10"
				}
			]
		},
		{
			"name": "Young Green Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful evil",
			"armor_class": 18,
			"hit_points": 136,
			"hit_dice": "16d10",
			"speed": "40 ft., fly 80 ft., swim 40 ft.",
			"strength": 19,
			"dexterity": 12,
			"constitution": 17,
			"intelligence": 16,
			"wisdom": 13,
			"charisma": 15,
			"dexterity_save": 4,
			"constitution_save": 6,
			"wisdom_save": 4,
			"charisma_save": 5,
			"deception": 5,
			"perception": 7,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "poison",
			"condition_immunities": "poisoned",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
			"languages": "Common, Draconic",
			"challenge_rating": "8",
			"special_abilities": [
				{
					"name": "Amphibious",
					"desc": "The dragon can breathe air and water.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 7 (2d6) poison damage.",
					"attack_bonus": 7,
					"damage_dice": "2d10 + 2d6",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Poison Breath (Recharge 5-6)",
					"desc": "The dragon exhales poisonous gas in a 30-foot cone. Each creature in that area must make a DC 14 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "12d6"
				}
			]
		},
		{
			"name": "Young Red Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 18,
			"hit_points": 178,
			"hit_dice": "17d10",
			"speed": "40 ft., climb 40 ft., fly 80 ft.",
			"strength": 23,
			"dexterity": 10,
			"constitution": 21,
			"intelligence": 14,
			"wisdom": 11,
			"charisma": 19,
			"dexterity_save": 4,
			"constitution_save": 9,
			"wisdom_save": 4,
			"charisma_save": 8,
			"perception": 8,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "fire",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
			"languages": "Common, Draconic",
			"challenge_rating": "10",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 3 (1d6) fire damage.",
					"attack_bonus": 10,
					"damage_dice": "2d10 + 1d6",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 10,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Fire Breath (Recharge 5-6)",
					"desc": "The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "16d6"
				}
			]
		},
		{
			"name": "Young Silver Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "lawful good",
			"armor_class": 18,
			"hit_points": 168,
			"hit_dice": "16d10",
			"speed": "40 ft., fly 80 ft.",
			"strength": 23,
			"dexterity": 10,
			"constitution": 21,
			"intelligence": 14,
			"wisdom": 11,
			"charisma": 19,
			"dexterity_save": 4,
			"constitution_save": 9,
			"wisdom_save": 4,
			"charisma_save": 8,
			"arcana": 6,
			"history": 6,
			"perception": 8,
			"stealth": 4,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
			"languages": "Common, Draconic",
			"challenge_rating": "9",
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
					"attack_bonus": 10,
					"damage_dice": "2d10",
					"damage_bonus": 6
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
					"attack_bonus": 10,
					"damage_dice": "2d6",
					"damage_bonus": 6
				},
				{
					"name": "Breath Weapons (Recharge 5-6)",
					"desc": "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 17 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
					"attack_bonus": 0,
					"damage_dice": "12d8"
				}
			]
		},
		{
			"name": "Young White Dragon",
			"size": "Large",
			"type": "dragon",
			"subtype": "",
			"alignment": "chaotic evil",
			"armor_class": 17,
			"hit_points": 133,
			"hit_dice": "14d10",
			"speed": "40 ft., burrow 20 ft., fly 80 ft., swim 40 ft.",
			"strength": 18,
			"dexterity": 10,
			"constitution": 18,
			"intelligence": 6,
			"wisdom": 11,
			"charisma": 12,
			"dexterity_save": 3,
			"constitution_save": 7,
			"wisdom_save": 3,
			"charisma_save": 4,
			"perception": 6,
			"stealth": 3,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "cold",
			"condition_immunities": "",
			"senses": "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
			"languages": "Common, Draconic",
			"challenge_rating": "6",
			"special_abilities": [
				{
					"name": "Ice Walk",
					"desc": "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Multiattack",
					"desc": "The dragon makes three attacks: one with its bite and two with its claws.",
					"attack_bonus": 0
				},
				{
					"name": "Bite",
					"desc": "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) cold damage.",
					"attack_bonus": 7,
					"damage_dice": "2d10 + 1d8",
					"damage_bonus": 4
				},
				{
					"name": "Claw",
					"desc": "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
					"attack_bonus": 7,
					"damage_dice": "2d6",
					"damage_bonus": 4
				},
				{
					"name": "Cold Breath (Recharge 5-6)",
					"desc": "The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 15 Constitution saving throw, taking 45 (10d8) cold damage on a failed save, or half as much damage on a successful one.",
					"attack_bonus": 0,
					"damage_dice": "10d8"
				}
			]
		},
		{
			"name": "Zombie",
			"size": "Medium",
			"type": "undead",
			"subtype": "",
			"alignment": "neutral evil",
			"armor_class": 8,
			"hit_points": 22,
			"hit_dice": "3d8",
			"speed": "20 ft.",
			"strength": 13,
			"dexterity": 6,
			"constitution": 16,
			"intelligence": 3,
			"wisdom": 6,
			"charisma": 5,
			"wisdom_save": 0,
			"damage_vulnerabilities": "",
			"damage_resistances": "",
			"damage_immunities": "",
			"condition_immunities": "poisoned",
			"senses": "darkvision 60 ft., passive Perception 8",
			"languages": "understands all languages it spoke in life but can't speak",
			"challenge_rating": "1/4",
			"special_abilities": [
				{
					"name": "Undead Fortitude",
					"desc": "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
					"attack_bonus": 0
				}
			],
			"actions": [
				{
					"name": "Slam",
					"desc": "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
					"attack_bonus": 3,
					"damage_dice": "1d6",
					"damage_bonus": 1
				}
			]
		}
	];

/***/ },
/* 299 */
/***/ function(module, exports) {

	module.exports = [
		{
			"name": "Acid Splash",
			"level": 0,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "or 2 adjacent targets",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "Acid",
			"damage-heal": "DAM: 1d6",
			"sourcebook": "PHB",
			"page": "211",
			"additional-detail": "DAM: Add extra 1d6 at 5th level, 11th level, and 17th level.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You hurl a bubble of acid. Choose one creature within range, or choose two creatures within range that are within 5 feet of each other. A target must succeed on a Dexterity saving throw or take 1d6 acid damage.\n\nThis spell's damage increases by 1d6 when you reach 5th level (2d6), 11th level (3d6), and 17th level (4d6)."
		},
		{
			"name": "Aid",
			"level": 2,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "allies",
				"size": 3
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "white cloth strip",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "HEAL: 5",
			"sourcebook": "PHB",
			"page": "211",
			"additional-detail": "Each target also increases maximum HP by 5.",
			"per-higher-spell-level": "HEAL extra 5 HP",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Your spell bolsters your allies with toughness and resolve. Choose up to three creatures within range. Each target’s hit point maximum and current hit points increase by 5 for the duration.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, a target’s hit points increase by an additional 5 for each slot level above 2nd."
		},
		{
			"name": "Alarm",
			"level": 1,
			"school": "Abjuration",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "door/window/area",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "tiny bell, silver wire",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "211",
			"additional-detail": "Audible or silent alarm triggered on entry by those you haven't said can enter",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You set an alarm against unwanted intrusion. Choose a door, a window, or an area within range that is no larger than a 20-foot cube. Until the spell ends, an alarm alerts you whenever a Tiny or larger creature touches or enters the warded area. When you cast the spell, you can designate creatures that won't set off the alarm. You also choose whether the alarm is mental or audible.\n\nA mental alarm alerts you with a ping in your mind if you are within 1 mile of the warded area. This ping awakens you if you are sleeping.\n\nAn audible alarm produces the sound of a hand bell for 10 seconds within 60 feet."
		},
		{
			"name": "Alter Self",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "211",
			"additional-detail": "Choose one: breathe/swim underwater, natural weapons, change appearance",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You assume a different form. When you cast the spell, choose one of the following options, the effects of which last for the duration of the spell. While the spell lasts, you can end one option as an action to gain the benefits of a different one.\n\n**Aquatic Adaptation.** You adapt your body to an aquatic environment, sprouting gills and growing webbing between your fingers. You can breathe underwater and gain a swimming speed equal to your walking speed. \n\n**Change Appearance.** You transform your appearance. You decide what you look like, including your height, weight, facial features, sound of your voice, hair length, coloration, and distinguishing characteristics, if any. You can make yourself appear as a member of another race, though none of your statistics change. You also can’t appear as a creature of a different size than you, and your basic shape stays the same; if you're bipedal, you can’t use this spell to become quadrupedal, for instance. At any time for the duration of the spell, you can use your action to change your appearance in this way again.\n\n**Natural Weapons.** You grow claws, fangs, spines, horns, or a different natural weapon of your choice. Your unarmed strikes deal 1d6 bludgeoning, piercing, or slashing damage, as appropriate to the natural weapon you chose, and you are proficient with your unarmed strikes. Finally, the natural weapon is magic and you have a +1 bonus to the attack and damage rolls you make using it."
		},
		{
			"name": "Animal Friendship",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "beast",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "morsel of food",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "212",
			"additional-detail": "Charm beasts with INT <= 3; spell fails if you hurt beast",
			"per-higher-spell-level": "One more beast",
			"bard": true,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell lets you convince a beast that you mean it no harm. Choose a beast that you can see within range. It must see and hear you. If the beast's Intelligence is 4 or higher, the spell fails. Otherwise, the beast must succeed on a Wisdom saving throw or be charmed by you for the spell's duration. If you or one of your companions harms the target, the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you can affect one additional beast for each slot level above 1st."
		},
		{
			"name": "Animal Messenger",
			"level": 2,
			"school": "Enchantment",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "Tiny beast",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "morsel of food",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "212",
			"additional-detail": "Beast will relay 25 word message to a target you describe",
			"per-higher-spell-level": "48 hours longer",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "By means of this spell, you use an animal to deliver a message. Choose a Tiny beast you can see within range, such as a squirrel, a blue jay, or a bat. You specify a location, which you must have visited, and a recipient who matches a general description, such as “a man or woman dressed in the uniform of the town guard” or “a red-haired dwarf wearing a pointed hat.” You also speak a message of up to twenty-five words. The target beast travels for the duration of the spell toward the specified location, covering about 50 miles per 24 hours for a flying messenger, or 25 miles for other animals.\n\nWhen the messenger arrives, it delivers your message to the creature that you described, replicating the sound of your voice. The messenger speaks only to a creature matching the description you gave. If the messenger doesn’t reach its destination before the spell ends, the message is lost, and the beast makes its way back to where you cast this spell.\n\n**At Higher Levels.** If you cast this spell using a spell slot of 3rd level or higher, the duration of the spell increases by 48 hours for each slot level above 2nd."
		},
		{
			"name": "Animal Shapes",
			"level": 8,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "Any willing targets"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "212",
			"additional-detail": "Transform targets into Large or smaller beasts with CR <= 4",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Your magic turns others into beasts. Choose any number of willing creatures that you can see within range. You transform each target into the form of a Large or smaller beast with a challenge rating of 4 or lower.  On subsequent turns, you can use your action to transform affected creatures into new forms.\n\nThe transformation lasts for the duration for each target, or until the target drops to 0 hit points or dies.  You can choose a different form for each target. A target's game statistics are replaced by the statistics of the chosen beast, thought the target retains its alignment and Intelligence, Wisdom, and Charisma scores. The target assumes the hit points of its new form, and when it reverts to its normal form, it returns to the number of hit points it had before it transformed. If it reverts as a result of dropping to 0 hit points, any excess damage carries over to its normal form. As long as the excess damage doesn't reduce the creature's normal form to 0 hit points, it isn't knocked unconscious. The creature is limited in the actions it can perform by the nature of its new form, and it can't speak or cast spells.\n\nThe target's gear melds into the new form. The target can't activate, wield, or otherwise benefit from any of its equipment."
		},
		{
			"name": "Animate Dead",
			"level": 3,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "unknown",
				"text": "<= Medium corpse"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "blood, flesh, bone",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "212",
			"additional-detail": "Creates skeleton or zombie servant that accepts simple directions",
			"per-higher-spell-level": "Two more undead",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell creates an undead servant. Choose a pile of bones or a corpse of a Medium or Small humanoid within range. Your spell imbues the target with a foul mimicry of life, raising it as an undead creature. The target becomes a skeleton if you chose bones or a zombie if you chose a corpse (the DM has the creature’s game statistics).\n\nOn each of your turns, you can use a bonus action to mentally command any creature you made with this spell if the creature is within 60 feet of you (if you control multiple creatures, you can command any or all of them at the same time, issuing the same command to each one). You decide what action the creature will take and where it will move during its next turn, or you can issue a general command, such as to guard a particular chamber or corridor. If you issue no commands, the creature only defends itself against hostile creatures. Once given an order, the creature continues to follow it until its task is complete.\n\nThe creature is under your control for 24 hours, after which it stops obeying any command you’ve given it. To maintain control of the creature for another 24 hours, you must cast this spell on the creature again before the current 24-hour period ends. This use of the spell reasserts your control over up to four creatures you have animated with this spell, rather than animating a new one.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, you animate or reassert control over two additional undead creatures for each slot level above 3rd. Each of the creatures must come from a different corpse or pile of bones."
		},
		{
			"name": "Animate Objects",
			"level": 5,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "objects-less-than",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "213",
			"additional-detail": "Animate objects to accept simple commands.",
			"per-higher-spell-level": "Two more objects",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Objects come to life at your command. Choose up to ten nonmagical objects within range that are not being worn or carried. Medium targets count as two objects, Large targets count as four objects, Huge targets count as eight objects. You can't animate any object larger than Huge. Each target animates and becomes a creature under your control until the spell ends or until reduced to 0 hit points.\n\nAs a bonus action, you can mentally command any creature you made with this spell if the creature is within 500 feet of you (if you control multiple creatures, you can command any or all of them at the same time, issuing the same command to each one). You decide what action the creature will take and where it will move during its next turn, or you can issue a general command, such as to guard a particular chamber or corridor. If you issue no commands, the creature only defends itself against hostile creatures. Once given an order, the creature continues to follow it until its task is complete.\n\n**ANIMATED OBJECTS STATISTICS**\n\n| Size   | HP | AC | Attack                   | Str | Dex |\n| ------ |:--:|:--:|:------------------------:|:---:|:---:|\n| Tiny   | 20 | 18 | +8 to hit, 1d4+4 damage  |   4 |  18 |\n| Small  | 25 | 16 | +6 to hit, 1d8+2 damage  |   6 |  14 |\n| Medium | 40 | 13 | +5 to hit, 2d6+1 damage  |  10 |  12 |\n| Large  | 50 | 10 | +6 to hit, 2d10+2 damage |  14 |  10 |\n| Huge   | 80 | 10 | +8 to hit, 2d12+2 damage |  18 |   6 |\n\nAn animated object is a construct with AC, hit points, attacks, Strength, and Dexterity determined by its size. Its Constitution is 10 and its Intelligence and Wisdom are 3, and its Charisma is 1. Its speed is 30 feet; if the object lacks legs or other appendages it can use for locomotion, it instead has a flying speed of 30 feet and can hover. If the object is securely attached to a surface or a larger object, such as a chain bolted to a wall, its speed is 0. It has blindsight with a radius of 30 feet and is blind beyond that distance. When the animated object drops to 0 hit points, it reverts to its original object form, and any remaining damage carries over to its original object form.\n\nIf you command an object to attack, it can make a single melee attack against a creature within 5 feet of it. It makes a slam attack with an attack bonus and bludgeoning damage determined by its size. The DM might rule that a specific object inflicts slashing or piercing damage based on its form.\n\n**At Higher Levels.** If you cast this spell using a spell slot of 6th level or higher, you can animate two additional objects for each slot level above 5th."
		},
		{
			"name": "Antilife Shell",
			"level": 5,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "213",
			"additional-detail": "Erects barrier around you that moves with you.  Living creatures cannot enter.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A shimmering barrier extends out from you in a 10-foot-radius and moves with you, remaining centered on you and hedging out creatures other than undead and constructs. The barrier lasts for the duration.\n\nThe barrier prevents an affected creature from passing or reaching through. An affected creature can cast spells or make attacks with ranged or reach weapons through the barrier.\n\nIf you move so an affected creature is forced to pass through the barrier, the spell ends."
		},
		{
			"name": "Antimagic Field",
			"level": 8,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "powdered iron or filings",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "213",
			"additional-detail": "Erects a sphere around you in which all magic no longer works.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A 10-foot-radius invisible sphere of antimagic surrounds you. This area is divorced from the magical energy that suffuses the multiverse. Within the sphere, spells can't be cast, summoned creatures disappear, and even magic items become mundane. Until the spell ends, the sphere moves with you, centered on you.\n\nSpells and other magical effects, except those created by an artifact or a deity, are suppressed in the sphere and can't protrude into it. A slot expended to cast a suppressed spell is consumed. While an effect is suppressed, it doesn't function, but the time is spends suppressed counts against its duration.\n\n**Targeted Effects.** Spells and other magical effects, such as _magic missile_ and _charm person_, that target a creature or an object in the sphere have no effect on that target.\n\n**Areas of Magic.** The area of another spell or magical effect, such as fireball, can't extend into the sphere. If the sphere overlaps an area of magic, the part of the area that is covered by the sphere is suppressed. For example, the flames created by a _wall of fire_ are suppressed within the sphere, creating a gap in the wall if the overlap is large enough.\n\n**Spells.** Any active spell or other magical effect on a creature or an object in the sphere is suppressed while the creature or object is in it.\n\n**Magic Items.** The properties and powers of magic items are suppressed in the sphere. For example, a _+1 longsword_ in the sphere functions as a nonmagical longsword.\n\nA magic weapon's properties and powers are suppressed if it is used against a target in the sphere or wielded by an attacker in the sphere. If a magic weapon or a piece of magic ammunition fully leaves the sphere (for example, if you fire a magic arrow or throw a magic spear at a target outside the sphere), the magic of the item ceases to be suppressed as soon as it exits.\n\n**Magical Travel.** Teleportation and planar travel fail to work in the sphere, whether the sphere is the destination or the departure point for such magical travel. A portal to another location, world, or plane of existence, as well as an opening to an extradimensional space such as that created by the _rope trick_ spell, temporarily closes while in the sphere.\n\n**Creatures and Objects.** A creature or object summoned or created by magic temporarily winks out of existence in the sphere. Such a creature instantly reappears once the space the creature occupied is no longer within the sphere.\n\n**Dispel Magic.** Spells and magical effects such as _dispel magic_ have no effect on the sphere. Likewise, the spheres created by different _antimagic_ field spells don't nullify each other."
		},
		{
			"name": "Antipathy/Sympathy",
			"level": 8,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "Huge or smaller target",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "lump of alum or honey",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "214",
			"additional-detail": "Target object/creature attracts or repels specifc creature types.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell attracts or repels creatures of your choice. You target something within range, either a Huge or smaller object or creature or an area that is no larger than a 200-foot cube. Then specify a kind of intelligent creature such as red dragons, goblins or vampires. You invest the target with an aura that either attracts or repels the specified creatures for the duration. Choose antipathy or sympathy as the aura's effect.\n\n**Antipathy.** The enchantment causes creatures of the kind you designated to feel an intense urge to leave the area and avoid the target. When such a creature can see the target or comes within 60 feet of it, the creature must succeed on a Wisdom saving throw or become frightened. The creature remains frightened while it can see the target or is within 60 feet of it. While frightened by the target, the creature must use its movement to move to the nearest safe spot from which it can't see the target. If the creature moves more than 60 feet from the target and can't see it, the creature is no longer frightened, but the creature becomes frightened again if it regains sight of the target or moves within 60 feet of it.\n\n**Sympathy.** The enchantment causes the specified creatures to feel an intense urge to approach the target while within 60 feet of it or able to see it.  When such a creature can see the target or comes within 60 feet of it, the creature must succeed on a Wisdom saving throw or use its movement on each of its turns to enter the area or move within reach of the target. When the creature has done so, it can't willingly move away from the target.\n\nIf the target damages or otherwise harms an affected creature, the affected creature can make a Wisdom saving throw to end the effect, as described below.\n\n**Ending the Effect.** If an affected creature ends its turn while not within 60 feet of the target or able to see it, the creature makes a Wisdom saving throw. On a successful save, the creature is no longer affected by the target and recognizes the feeling of repugnance or attraction as magical. In addition, a creature affected by the spell is allowed another Wisdom saving throw every 24 hours while the spell persists.\n\nA creature that successfully saves against this affect is immune to it for 1 minute, after which time it can be affected again."
		},
		{
			"name": "Arcane Eye",
			"level": 4,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "a bit of bat fur",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "214",
			"additional-detail": "Create invisible eye with darkvision(30ft) moves 30ft/rd you can see through.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"knowledge"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create an invisible, magical eye within range that hovers in the for the duration.\n\nYou mentally receive visual information from the eye, which has normal vision and darkvision out to 30 feet. The eye can look in every direction.\n\nAs an action, you can move the eye up to 30 feet in any direction. There is no limit to how far away from you the eye can move, but it can't enter another plane of existence. A solid barrier blocks the eye's movement, but the eye can pass through an opening as small as 1 inch in diameter."
		},
		{
			"name": "Arcane Gate",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 500
			},
			"target-area": {
				"type": "unknown",
				"text": "Point(10ft),Point(500ft.)"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "214",
			"additional-detail": "Create two linked portals 10ft. across anybody can travel between.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You create linked teleportation portals that remain open for the duration. Choose two points on the ground that you can see, one point within 10 feet of you and one point within 500 feet of you. A circular portal, 10 feet in diameter, opens over each point. If the portal would open in the space occupied by a creature, the spell fails, and the casting is lost.\n\nThe portals are two-dimensional glowing rings filled with mist, hovering inches from the ground and perpendicular to it at the points you choose. A ring is visible only from one side (your choice), which is the side that functions as a portal.\n\nAny creature or object entering the portal exits from the other portal as if the two were adjacent to each other; passing through a portal from the nonportal side has no effect. The mist that fills each portal is opaque and blocks vision through it. On your turn, you can rotate the rings as a bonus action so that the active side faces in a different direction."
		},
		{
			"name": "Arcane Lock",
			"level": 2,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "openable object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "GOLD DUST",
			"cost": "25 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "215",
			"additional-detail": "Locks object until password is spoken or dispel/knock. Object break DC +10.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a closed door, window, gate, chest, or other entryway, and it becomes locked for the duration. You and the creatures you designate when you cast this spell can open the object normally. You can also set a password that, when spoken within 5 feet of the object, suppresses this spell for 1 minute. Otherwise, it is impassable until it is broken or the spell is dispelled or suppressed. Casting knock on the object suppresses arcane lock for 10 minutes.\n\nWhile affected by this spell, the object is more difficult to break or force open; the DC to break it or pick any locks on it increases by 10."
		},
		{
			"name": "Armor of Agathys",
			"level": 1,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "cup of water",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Cold",
			"damage-heal": "DAM: 5",
			"sourcebook": "PHB",
			"page": "215",
			"additional-detail": "Gain 5 THP. Melee attackers take 5 DAM.",
			"per-higher-spell-level": "5 temp HP and 5 DAM",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "A protective magical force surrounds you, manifesting as a spectral frost that covers you and your gear. You gain 5 temporary hit points for the duration. If a creature hits you with a melee attack while you have these hit points, the creature takes 5 cold damage.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, both the temporary hit points and the cold damage increase by 5 for each slot level above 1st."
		},
		{
			"name": "Arms of Hadar",
			"level": 1,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "STR (Half DAM, no effect)"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 2d6",
			"sourcebook": "PHB",
			"page": "215",
			"additional-detail": "Targets can't take reactions until next turn",
			"per-higher-spell-level": "Extra 1d6 DAM",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "You invoke the power of Hadar, the Dark Hunger. Tendrils of dark energy erupt from you and batter all creatures within 10 feet of you. Each creature in that area must make a Strength saving throw. On a failed save, a target takes 2d6 necrotic damage and can't take reactions until its next turn. On a successful save, the creature takes half damage, but suffers no other effect.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
		},
		{
			"name": "Astral Projection",
			"level": 9,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "unknown",
				"text": "Self and 8 willing targets"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "for each creature you affect with this spell, you must provide one jacinth worth at least 1,000 gp and one ornately carved bar of silver worth at least 100 gp, all of which the spell consumes",
			"cost": "1100 gp",
			"concentration": false,
			"duration": {
				"type": "special"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "215",
			"additional-detail": "Project to Astral Plane.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You and up to eight willing creatures within range project your astral bodies into the Astral Plane (the spell fails and the casting is wasted if you are already on that plane). The material body you leave behind is unconscious and in a state of suspended animation; it doesn't need food or air and doesn't age.\n\nYour astral body resembles your mortal form in almost every way, replicating your game statistics and possessions. The principal difference is the addition of a silvery cord that extends from between your shoulder blades and trails behind you, fading to invisibility after 1 foot. This cord is your tether to your material body. As long as the tether remains intact, you can find your way home. If the cord is cut--something that can happen only when an effect specifically states that it does--your soul and body are separated, killing you instantly.\n\nYour astral form can freely travel through the Astral Plane and can pass through portals there leading to any other plane. If you enter a new plane or return to the plane you were on when casting this spell, your body and possessions are transported along the silver cord, allowing you to re-enter your body as you enter the new plane. Your astral form is a separate incarnation. Any damage or other effects that apply to it have no effect on your physical body, nor do they persist when you return to it.\n\nThe spell ends for you and your companions when you use your action to dismiss it. When the spell ends, the affected creature returns to its physical body, and it awakens.\n\nThe spell might also end early for you or one of your companions. A successful _dispel magic_ spell used against an astral or physical body ends the spell for that creature. If a creature's original body or its astral form drops to 0 hit points, the spell ends for that creature. If the spell ends and the silver cord is intact, the cord pulls the creature's astral form back to its body, ending its state of suspended animation.\n\nIf you are returned to your body prematurely, your companions remain in their astral forms and must find their own way back to their bodies, usually by dropping to 0 hit points."
		},
		{
			"name": "Augury",
			"level": 2,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "special tokens",
			"cost": "25 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "215",
			"additional-detail": "See omen predicting results of action taken within 30 minutes.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "By casting gem-inlaid sticks, rolling dragon bones, laying out ornate cards, or employing some other divining tool, you receive an omen from an otherworldly entity about the results of a specific course of action that you plan to take within the next 30 minutes. The DM chooses from the following possible omens:\n\n* *Weal*, for good results\n* *Woe*, for bad results\n* *Weal and woe*, for both good and bad results\n* *Nothing*, for results that aren’t especially good or bad\n\nThe spell doesn’t take into account any possible circumstances that might change the outcome, such as the casting of additional spells or the loss or gain of a companion.\n\nIf you cast the spell two or more times before completing your next long rest, there is a cumulative 25 percent chance for each casting after the first that you get a random reading. The DM makes this roll in secret."
		},
		{
			"name": "Aura of Life",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "216",
			"additional-detail": "Gain necrotic resistance, HEAL 1 HP if at 0 HP, HP max can't go down.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Life-preserving energy radiates from you in an aura with a 30-foot radius. Until the spell ends, the aura moves with you, centered on you. Each nonhostile creature in the aura (including you) has resistance to necrotic damage, and its hit point maximum can't be reduced. In addition, a nonhostile, living creature regains 1 hit point when it starts its turn in the aura with 0 hit points."
		},
		{
			"name": "Aura of Purity",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "216",
			"additional-detail": "Gain poison resist, disease immune, advantage on status saving throws.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Purifying energy radiates from you in an aura with a 30-foot radius. Until the spell ends, the aura moves with you, centered on you. Each nonhostile creature in the aura (including you) can't become diseased, has resistance to poison damage, and has advantage on saving throws against affects that cause any of the following conditions: blinded, charmed, deafened, frightened, paralyzed, poisoned and stunned."
		},
		{
			"name": "Aura of Vitality",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "HEAL: 2d6",
			"sourcebook": "PHB",
			"page": "216",
			"additional-detail": "Use bonus action to HEAL 1 target in aura.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Healing energy radiates from you in an aura with a 30-foot radius. Until the spell ends, the aura moves with you, centered on you. You can use a bonus action to cause one creature in the aura (including you) to regain 2d6 hit points."
		},
		{
			"name": "Awaken",
			"level": 5,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "hours",
				"size": 8
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "beast/plant <= Huge",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "AGATE",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "216",
			"additional-detail": "Target with INT <= 3 gaints INT 10 and can speak. Charmed for 30 days.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "After spending the casting time tracing magical pathways within a precious gemstone, you touch a Huge or smaller beast or plant. The target must have either no Intelligence score or an Intelligence of 3 or less. The target gains an Intelligence of 10. The target also gains the ability to speak one language you know. If the target is a plant, it gains the ability to move its limbs, roots, vines, creepers, and so forth, and it gains senses similar to a human's. Your DM chooses statistics appropriate for the awakened plant, such as the statistics for the awakened shrub or the awakened tree.\n\nThe awakened beast or plant is charmed by you for 30 days or until you or your companions do anything harmful to it. When the charmed condition ends, the awakened creature chooses whether to remain friendly to you, based on how you treated it while it was charmed."
		},
		{
			"name": "Bane",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creatures-less-than",
				"size": 3
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "drop of blood",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "216",
			"additional-detail": "Targets' attack rolls and saving throws are deducted 1d4.",
			"per-higher-spell-level": "One more creature",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": [
				"vengeance"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Up to three creatures of your choice that you can see within range must make Charisma saving throws. Whenever a target that fails this saving throw makes an attack roll or a saving throw before the spell ends, the target must roll a d4 and subtract the number rolled from the attack roll or saving throw.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st."
		},
		{
			"name": "Banishing Smite",
			"level": 5,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "Weapon Attack"
			},
			"damage-type": "Force",
			"damage-heal": "DAM: 5d10",
			"sourcebook": "PHB",
			"page": "216",
			"additional-detail": "Target banished if <= 50 HP.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a weapon attack before this spell ends, your weapon crackles with force, and the attack deals an extra 5d10 force damage to the target. Additionally, if this attack reduces the target to 50 hit points or fewer, you banish it. If the target is native to a different plane of existence than the one you're on, the target disappears, returning to its home plane. If the target is native to the plane you're on, the creature vanishes into a harmless demiplane. While there, the target is incapacitated. It remains there until the spell ends, at which point the target reappears in the space it left or in the nearest unoccupied space if that space is occupied."
		},
		{
			"name": "Banishment",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "target",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "item disliked by target",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "217",
			"additional-detail": "Banish target to another plane; native of other plane doesn't return after 1 min.",
			"per-higher-spell-level": "One more creature",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You attempt to send one creature that you can see within range to another plane of existence. The target must succeed on a Charisma saving throw or be banished.\n\nIf the target is native to the plane of existence you're on, you banish the target to a harmless demiplane. While there, the target is incapacitated. The target remains there until the spell ends, at which point the target reappears in the space it left or in the nearest unoccupied space if that space is occupied.\n\nIf the target is native to a different plane of existence than the one you're on, the target is banished with a faint popping noise, returning to its home plane. If the spell ends before 1 minute has passed, the target reappears in the space it left or in the nearest unoccupied space if that space is occupied. Otherwise, the target doesn't return.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level or higher, you can target one additional creature for each slot level above 4th."
		},
		{
			"name": "Barkskin",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "oak bark",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "217",
			"additional-detail": "Target AC is never less than 16 during spell.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a willing creature. Until the spell ends, the target’s skin has a rough, bark-like appearance, and the target’s AC can’t be less than 16, regardless of what kind of armor it is wearing."
		},
		{
			"name": "Beacon of Hope",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "Any targets in range"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "217",
			"additional-detail": "Targets get advantage on WIS and death saving throws; heal spells heal max.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"devotion"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell bestows hope and vitality. Choose any number of creatures within range. For the duration, each target has advantage on Wisdom saving throws and death saving throws, and regains the maximum number of hit points possible from any healing."
		},
		{
			"name": "Beast Sense",
			"level": 2,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing beast",
				"size": 1
			},
			"v": false,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "217",
			"additional-detail": "Use action to see/hear whatever beast does.  Use action to return.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a willing beast. For the duration of the spell, you can use your action to see through the beast’s eyes and hear what it hears, and continue to do so until you use your action to return to your normal senses.\n\nWhile perceiving through the beast’s senses, you gain the benefits of any special senses possessed by that creature, though you are blinded and deafened to your own surroundings."
		},
		{
			"name": "Bestow Curse",
			"level": 3,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "218",
			"additional-detail": "Curse target.  See Sourcebook.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a creature, and that creature must succeed on a Wisdom saving throw or become cursed for the duration of the spell. When you cast this spell, choose the nature of the curse from the following options:\n\n* Choose one ability score. While cursed, the target has disadvantage on ability checks and saving throws made with that ability score.\n* While cursed, the target has disadvantage on attack rolls against you.\n* While cursed, the target must make a Wisdom saving throw at the start of each of its turns. If it fails, it wastes its action that turn doing nothing.\n* While the target is cursed, your attacks and spells deal an extra 1d8 necrotic damage to the target.\n\nA *[remove curse](../remove-curse/ \"remove curse (lvl 3)\")* spell ends this effect. At the DM’s option, you may choose an alternative curse effect, but it should be no more powerful than those described above. The DM has final say on such a curse’s effect.\n\n**At Higher Levels.** If you cast this spell using a spell slot of 4th level or higher, the duration is concentration, up to 10 minutes. If you use a spell slot of 5th level or higher, the duration is 8 hours. If you use a spell slot of 7th level or higher, the duration is 24 hours. If you use a 9th level spell slot, the spell lasts until it is dispelled. Using a spell slot of 5th level or higher grants a duration that doesn’t require concentration."
		},
		{
			"name": "Bigby's Hand",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "eggshell, snakeskin glove",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Force",
			"damage-heal": "See Sourcebook.",
			"sourcebook": "PHB",
			"page": "218",
			"additional-detail": "Create giant hand to do various things.  See Sourcebook.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a Large hand of shimmering, translucent force in an unoccupied space that you can see within range. The hand lasts for the spell's duration, and it moves at your command, mimicking the movements of your own hand. \n\nThe hand is an object that has AC 20 and hit points equal to your hit point maximum. If it drops to 0 hit points, the spell ends. It has a Strength of 26 (+8)and a Dexterity of 10 (+0). The hand doesn't fill its space. \n\nWhen you cast the spell and as a bonus action on your subsequent turns, you can move the hand up to 60 feet and then cause one of the following effects with it. \n\n**Clenched Fist.** The hand strikes one creature or object within 5 feet of it. Make a melee spell attack for the hand using your game statistics. On a hit, the target takes 4d8 force damage.\n\n**Forceful Hand.** The hand attempts to push a creature within 5 feet of it in a direction you choose. Make a check with the hand's Strength contested by the Strength (Athletics) check of the target. If the target is Medium or smaller, you have advantage on the check. If you succeed, the hand pushes the target up to 5 feet plus a number of feet equal to five times your spellcasting ability modifier. The hand moves with the target to remain within 5 feet of it.\n\n**Grasping Hand.** The hand attempts to grapple a Huge or smaller creature within 5 feet of it. You use the hand's Strength score to resolve the grapple. If the target is Medium or smaller, you have advantage on the check. While the hand is grappling the target, you can use a bonus action to have the hand crush it. When you do so, the target takes bludgeoning damage equal to 2d6 + your spellcasting ability modifier.\n\n**Interposing Hand.** The hand interposes itself between you and a creature you choose until you give the hand a different  command. The hand moves to stay between you and the target, providing you with half cover against the target. The target can't move through the hand's space if its Strength score is less than or equal to the hand's Strength score. If its Strength score is higher than the hand's Strength score, the target can move toward you through the hand's space, but that space is difficult terrain for the target.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the damage from the clenched fist option increases by 2d8 and the damage from the grasping hand increases by 2d6 for each slot level above 5th."
		},
		{
			"name": "Blade Barrier",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "unknown",
				"text": "5x20x(100 line/60 dia. circle)ft."
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Slashing",
			"damage-heal": "DAM: 6d10",
			"sourcebook": "PHB",
			"page": "218",
			"additional-detail": "Creatures entering wall/circle area take DAM.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a vertical wall of whirling, razor-sharp blades made of magical energy. The wall appears within range and lasts for the duration. You can make a straight wall up to 100 feet long, 20 feet high, and 5 feet thick, or a ringed wall up to 60 feet in diameter, 20 feet high, and 5 feet thick. The wall provides three-quarters cover to creatures behind it, and its space is difficult terrain.\n\nWhen a creature enters the wall's area for the first time on a turn or starts its turn there, the creature must make a Dexterity saving throw. On a failed save, the creature takes 6d10 slashing damage. On a successful save, the creature takes half as much damage."
		},
		{
			"name": "Blade Ward",
			"level": 0,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "218",
			"additional-detail": "Gain resistance to bludgeoning/piercing/slashing DMG from weapons.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You extend your hand and trace a sigil of warding in the air. Until the end of your next turn, you have resistance against bludgeoning, piercing, and slashing damage dealt by weapon attacks."
		},
		{
			"name": "Bless",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creatures-less-than",
				"size": 3
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "sprinkling of holy water",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Targets add 1d4 to attack rolls and saving throws.",
			"per-higher-spell-level": "One more creature.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You bless up to three creatures of your choice within range. Whenever a target makes an attack roll or a saving throw before the spell ends, the target can roll a d4 and add the number rolled to the attack roll or saving throw."
		},
		{
			"name": "Blight",
			"level": 4,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 8d8",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Plants have disadvantage on save and take max DAM.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": true,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Necromantic energy washes over a creature of your choice that you can see within range, draining moisture and vitality from it. The target must make a Constitution saving throw. The target takes 8d8 necrotic damage on a failed save, or half as much damage on a successful one. The spell has no effect on undead or constructs.\n\nIf you target a plant creature or a magical plant, it makes the saving throw with disadvantage, and the spell deals maximum damage to it.\n\nIf you target a nonmagical plant that isn't a creature, such as a tree or shrub, it doesn't make a saving throw; it simply withers and dies.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level of higher, the damage increases by 1d8 for each slot level above 4th."
		},
		{
			"name": "Blinding Smite",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON per turn (Blindness ends)"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 3d8",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Next melee attack target takes DAM and is blinded until spell ends.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a melee weapon attack during this spell’s duration, your weapon flares with bright light, and the attack deals an extra 3d8 radiant damage to the target. Additionally, the target must succeed on a Constitution saving throw or be blinded until the spell ends.\n\nA creature blinded by this spell makes another Constitution saving throw at the end of each of its turns. On a successful save, it is no longer blinded."
		},
		{
			"name": "Blindness/Deafness",
			"level": 2,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON per turn (Fail)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Target becomes blind or deaf (your choice).",
			"per-higher-spell-level": "One more creature.",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You can blind or deafen a foe. Choose one creature that you can see within range to make a Constitution saving throw. If it fails, the target is either blinded or deafened (your choice) for the duration. At the end of each of its turns, the target can make a Constitution saving throw. On a success, the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd."
		},
		{
			"name": "Blink",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Roll 11 or higher to go to Ethereal plane between turns; reapper within 10ft.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"trickery"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Roll a d20 at the end of each of your turns for the duration of the spell. On a roll of 11 or higher, you vanish from your current plane of existence and appear in the Ethereal Plane (the spell fails and the casting is wasted if you were already on that plane). At the start of your next turn, and when the spell ends if you are on the Ethereal Plane, you return to an unoccupied space of your choice that you can see within 10 feet of the space you vanished from. If no unoccupied space is available within that range, you appear in the nearest unoccupied space (chosen at random if more than one space is equally near). You can dismiss this spell as an action.\n\nWhile on the Ethereal Plane, you can see and hear the plane you originated from, which is cast in shades of gray, and you can’t see anything there more than 60 feet away. You can only affect and be affected by other creatures on the Ethereal Plane. Creatures that aren’t there can’t perceive you or interact with you, unless they have the ability to do so."
		},
		{
			"name": "Blur",
			"level": 2,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Creatures relying on sight have disadvantage to attack.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"desert"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Your body becomes blurred, shifting and wavering to all who can see you. For the duration, any creature has disadvantage on attack rolls against you. An attacker is immune to this effect if it doesn’t rely on sight, as with blindsight, or can see through illusions, as with truesight."
		},
		{
			"name": "Branding Smite",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "Weapon Attack"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 2d6",
			"sourcebook": "PHB",
			"page": "219",
			"additional-detail": "Target becomes visible, sheds dim light.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a weapon attack before this spell ends, the weapon gleams with astral radiance as you strike. The attack deals an extra 2d6 radiant damage to the target, which becomes visible if it’s invisible, and the target sheds dim light in a 5-foot radius and can’t become invisible until the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the extra damage increases by 1d6 for each slot level above 2nd."
		},
		{
			"name": "Burning Hands",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cone",
				"size": 15
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 3d6",
			"sourcebook": "PHB",
			"page": "220",
			"additional-detail": "Flammable objects ignite.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": [
				"light"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "As you hold your hands with thumbs touching and fingers spread, a thin sheet of flames shoots forth from your outstretched fingertips. Each creature in a 15-foot cone must make a Dexterity saving throw. A creature takes 3d6 fire damage on a failed save, or half as much damage on a successful one.\n\nThe fire ignites any flammable objects in the area that aren’t being worn or carried.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
		},
		{
			"name": "Call Lightning",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "cylinder",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Lightning",
			"damage-heal": "DAM: 3d10",
			"sourcebook": "PHB",
			"page": "220",
			"additional-detail": "Targets take DAM each round.  Can change targets each round.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": [
				"tempest"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A storm cloud appears in the shape of a cylinder that is 10 feet tall with a 60-foot radius, centered on a point you can see 100 feet directly above you. The spell fails if you can’t see a point in the air where the storm cloud could appear (for example, if you are in a room that can’t accommodate the cloud).\n\nWhen you cast the spell, choose a point you can see within range. A bolt of lightning flashes down from the cloud to that point. Each creature within 5 feet of that point must make a Dexterity saving throw. A creature takes 3d10 lightning damage on a failed save, or half as much damage on a successful one. On each of your turns until the spell ends, you can use your action to call down lightning in this way again, targeting the same point or a different one.\n\nIf you are outdoors in stormy conditions when you cast this spell, the spell gives you control over the existing storm instead of creating a new one. Under such conditions, the spell’s damage increases by 1d10.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th or higher level, the damage increases by 1d10 for each slot level above 3rd."
		},
		{
			"name": "Calm Emotions",
			"level": 2,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "Suppress charm effects or hostility on target.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You attempt to suppress strong emotions in a group of people. Each humanoid in a 20-foot-radius sphere centered on a point you choose within range must make a Charisma saving throw; a creature can choose to fail this saving throw if it wishes. If a creature fails its saving throw, choose one of the following two effects. You can suppress any effect causing a target to be charmed or frightened. When this spell ends, any suppressed effect resumes, provided that its duration has not expired in the meantime.\n\nAlternatively, you can make a target indifferent about creatures o f your choice that it is hostile toward. This indifference ends if the target is attacked or harmed by a spell or if it witnesses any of its friends being harmed. When the spell ends, the creature becomes hostile again, unless the DM rules otherwise."
		},
		{
			"name": "Chain Lightning",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "target, then 3 within 30ft.",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of fur,glass,3 silver pins",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Lightning",
			"damage-heal": "DAM: 10d8",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "Bolt hits one target then forks to up to 3 others.",
			"per-higher-spell-level": "One more bolt in fork.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a bolt of lightning that arcs toward a target of your choice that you can see within range. Three bolts then leap from that target to as many as three other targets, each of which must be within 30 feet of the first target. A target can be a creature or an object and can be targeted by only one of the bolts.\n\nA target must make a Dexterity saving throw. The target takes 10d8 lightning damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, one additional bolt leaps from the first target to another target for each slot level above 6th."
		},
		{
			"name": "Charm Person",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "humanoid",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "Wisdom (Fail)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "Charm target so it treats you as friendly. Gets advantage to save if fighting you.",
			"per-higher-spell-level": "One more target <= 30ft.",
			"bard": true,
			"cleric": [
				"trickery"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You attempt to charm a humanoid you can see within range. It must make a Wisdom saving throw, and does so with advantage if you or your companions are fighting it. If it fails the saving throw, it is charmed by you until the spell ends or until you or your companions do anything harmful to it. The charmed creature regards you as a friendly acquaintance. When the spell ends, the creature knows it was charmed by you.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st. The creatures must be within 30 feet of each other when you target them."
		},
		{
			"name": "Chill Touch",
			"level": 0,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 1d6",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "Extra 1d6 DAM at 5th level, 11th level, and 17th level. Can't regain HP.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You create a ghostly, skeletal hand in the space of a creature within range. Make a ranged spell attack against the creature to assail it with the chill of the grave. On a hit, the target takes 1d8 necrotic damage, and it can't regain hit points until the start of your next turn. Until then, the hand clings to the target.\n\nIf you hit an undead target, it also has disadvantage on attack rolls against you until the end of your next turn.\n\nThis spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
		},
		{
			"name": "Chromatic Orb",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "diamond",
			"cost": "50 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "See Details",
			"damage-heal": "DAM: 3d8",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "Choose type: acid, cold, fire, lightning, poison, or thunder.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You hurl a 4-inch-diameter sphere of energy at a creature that you can see within range. You choose acid, cold, fire, lightning, poison, or thunder for the type of orb you create, and then make a ranged spell attack against the target. If the attack hits, the creature takes 3d8 of the type you chose.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st."
		},
		{
			"name": "Circle of Death",
			"level": 6,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "sphere",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "crushed black pearl",
			"cost": "500 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 8d6",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "",
			"per-higher-spell-level": "Extra 2d6 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "A sphere of negative energy ripples out in a 60-foot- radius sphere from a point within range. Each creature in that area must make a Constitution saving throw. A target takes 8d6 necrotic damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, the damage increases by 2d6 for each slot level above 6th."
		},
		{
			"name": "Circle of Power",
			"level": 5,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "sphere",
				"size": 30
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "221",
			"additional-detail": "Friendlies: advantage on saving throws against magic/effects. No half DAM. ",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Divine energy radiates from you, distorting and diffusing magical energy within 30 feet of you. Until the spell ends, the sphere moves with you, centered on you. For the duration, each friendly creature in the area (including you) has advantage on saving throws against spells and other magical effects. Additionally, when an affected creature succeeds on a saving throw made against a spell or magical effect that allows it to make a saving throw to take only half damage, it instead takes no damage if it succeeds on the saving throw."
		},
		{
			"name": "Clairvoyance",
			"level": 3,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "1 mile"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "jeweled horn or glass eye",
			"cost": "100 gp",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "222",
			"additional-detail": "Create sensor in area you can see or hear through.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create an invisible sensor within range in a location familiar to you (a place you have visited or seen before) or in an obvious location that is unfamiliar to you (such as behind a door, around a corner, or in a grove of trees). The sensor remains in place for the duration, and it can’t be attacked or otherwise interacted with.\n\nWhen you cast the spell, you choose seeing or hearing. You can use the chosen sense through the sensor as if you were in its space. As your action, you can switch between seeing and hearing.\n\nA creature that can see the sensor (such as a creature benefiting from *[see invisibility](../see-invisibility/ \"see invisibility (lvl 2)\")* or truesight) sees a luminous, intangible orb about the size of your fist."
		},
		{
			"name": "Clone",
			"level": 8,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "See Sourcebook.",
			"cost": "3000 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "222",
			"additional-detail": "Create clone of living person; soul transfers to clone if original dies.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell grows an inert duplicate of a living creature as a safeguard against death. This clone forms inside a sealed vessel and grows to full size and maturity after 120 days; you can also choose to have the clone be a younger version of the same creature. It remains inert and endures indefinitely, as long as its vessel remains undisturbed.\n\nAt any time after the clone matures, if the original creature dies, its soul transfers to the clone, provided that the soul is free and willing to return. The clone is physically identical to the original and has the same personality, memories, and abilities, but none of the original's equipment. The original creature's physical remains, if they still exist, become inert and can't thereafter be restored to life, since the creature's soul is elsewhere."
		},
		{
			"name": "Cloud of Daggers",
			"level": 2,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. cube",
				"size": 5
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "sliver of glass",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Slashing",
			"damage-heal": "DAM: 4d4",
			"sourcebook": "PHB",
			"page": "222",
			"additional-detail": "DAM taken on entering or starting turn in area.",
			"per-higher-spell-level": "Extra 2d4 DAM.",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You fill the air with spinning daggers in a cube 5 feet on each side, centered on a point you choose within range. A creature takes 4d4 slashing damage when it enters the spell’s area for the first time on a turn or starts its turn there. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 2d4 for each slot level above 2nd."
		},
		{
			"name": "Cloudkill",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Poison",
			"damage-heal": "DAM: 5d8",
			"sourcebook": "PHB",
			"page": "222",
			"additional-detail": "DAM taken on entering or starting turn in area. Fog moves away 10 ft. per turn.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": [
				"underdark"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a 20-foot-radius sphere of poisonous, yellow-green fog centered on a point you choose within range. The fog spreads around corners. It lasts for the duration or until strong wind disperses the fog, ending the spell. Its area is heavily obscured.\n\nWhen a creature enters the spell's area for the first time on a turn or starts its turn there, that creature must make a Constitution saving throw. The creature takes 5d8 poison damage on a failed save, or half as much damage on a successful one. Creatures are affected even if they hold their breath or don't need to breathe.\n\nThe fog moves 10 feet away from you at the start of each of your turns, rolling along the surface of the ground. The vapors, being heavier than air, sink to the lowest level of the land, even pouring down openings.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the damage increases by 1d8 for each slot level above 5th."
		},
		{
			"name": "Color Spray",
			"level": 1,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cone",
				"size": 15
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of colored powder",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "222",
			"additional-detail": "Blinds 6d10 HP worth of creatures, starting with lowest HP.",
			"per-higher-spell-level": "Extra 2d10 HP.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A dazzling array of flashing, colored light springs from your hand. Roll 6d10; the total is how many hit points of creatures this spell can effect. Creatures in a 15-foot cone originating from you are affected in ascending order of their current hit points (ignoring unconscious creatures and creatures that can't see).\n\nStarting with the creature that has the lowest current hit points, each creature affected by this spell is blinded until the spell ends. Subtract each creature's hit points from the total before moving on to the creature with the next lowest hit points. A creature's hit points must be equal to or less than the remaining total for that creature to be affected.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d10 for each slot level above 1st."
		},
		{
			"name": "Command",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "223",
			"additional-detail": "Speak 1 word command to target. Can't cause harm. Doesn't affect undead.",
			"per-higher-spell-level": "One more creature.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You speak a one-word command to a creature you can see within range. The target must succeed on a Wisdom saving throw or follow the command on its next turn. The spell has no effect if the target is undead, if it doesn’t understand your language, or if your command is directly harmful to it. \nSome typical commands and their effects follow. You might issue a command other than one described here. If you do so, the DM determines how the target behaves. If the target can’t follow your command, the spell ends. \n\n**Approach.** The target moves toward you by the shortest and most direct route, ending its turn if it moves within 5 feet of you. \n\n**Drop.** The target drops whatever it is holding and then\nends its turn. \n\n**Flee.** The target spends its turn moving away from you by the fastest available means. \n\n**Grovel.** The target falls prone and then ends its turn. \n\n**Halt.** The target doesn’t move and takes no actions. A flying creature stays aloft, provided that it is able to do so. If it must move to stay aloft, it flies the minimum distance needed to remain in the air.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you can affect one additional creature for each slot level above 1st. The creatures must be within 30 feet of each other when you target them."
		},
		{
			"name": "Commune",
			"level": 5,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "incense, vial of holy water",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "223",
			"additional-detail": "Ask 3 yes/no questions that are answered by deity.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"devotion"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You contact your deity or a divine proxy and ask up to three questions that can be answered with a yes or no. You must ask your questions before the spell ends. You receive a correct answer for each question.\n\nDivine beings aren't necessarily omniscient, so you might receive \"unclear\" as an answer if a question pertains to information that lies beyond the deity's knowledge. In a case where a one-word answer could be misleading or contrary to the deity's interests, the DM might offer a short phrase as an answer instead.\n\nIf you cast the spell two or more times before finishing your next long rest, there is a cumulative 25 percent chance for each casting after the first that you get no answer. The DM makes this roll in secret."
		},
		{
			"name": "Commune with Nature",
			"level": 5,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "224",
			"additional-detail": "Gain knowledge of the land around you.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You briefly become one with nature and gain knowledge of the surrounding territory. In the outdoors, the spell gives you knowledge of the land within 3 miles of you. In caves and other natural underground settings, the radius is limited to 300 feet. The spell doesn't function where nature has been replaced by construction, such as in dungeons and towns.\n\nYou instantly gain knowledge of up to three facts of your choice about any of the following subjects as they relate to the area:\n\n* terrain and bodies of water\n* prevalent plants, minerals, animals, or peoples\n* powerful celestials, fey, fiends, elementals, or undead\n* influence from other planes of existence\n* buildings\n\nFor example, you could determine the location of powerful undead in the area, the location of major sources of safe drinking water, and the location of any nearby towns."
		},
		{
			"name": "Compelled Duel",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "224",
			"additional-detail": "Compel target to attack you one-on-one.  See Sourcebook. ",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You attempt to compel a creature into a duel. One creature that you can see within range must make a Wisdom saving throw. On a failed save, the creature is drawn to you, compelled by your divine demand. For the duration, it has disadvantage on attack rolls against creatures other than you, and must make a Wisdom saving throw each time it attempts to move into a space that is more than 30 feet away from you; if it succeeds on this saving throw, the spell doesn't restrict the target's movement for that turn.\n\nThe spell ends if you attack any other creature, if you cast a spell that targets a hostile creature other than the target, if a creature friendly to you damages the target or casts a harmful spell on it, or if you end your turn more than 30 feet away from the target."
		},
		{
			"name": "Comprehend Languages",
			"level": 1,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of soot and salt",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "224",
			"additional-detail": "Know literal meaning of any speech. Understand written words while touching.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "For the duration, you understand the literal meaning of any spoken language that you hear. You also understand any written language that you see, but you must be touching the surface on which the words are written. It takes about 1 minute to read one page of text. \n\nThis spell doesn’t decode secret messages in a text or a glyph, such as an arcane sigil, that isn’t part of a written language."
		},
		{
			"name": "Compulsion",
			"level": 4,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "Creatures in range"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "224",
			"additional-detail": "Compel targets to move in specified non-hazardous direction.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Creatures of your choice that you can see within range and that can hear you must make a Wisdom saving throw. A target automatically succeeds on this saving throw if it can't be charmed. On a failed save, a target is affected by this spell. Until the spell ends, you can use a bonus action on each of your turns to designate a direction that is horizontal to you. Each affected target must use as much of its movement as possible to move in that direction on its next turn. It can take any action before it moves. After moving in this way, it can make another Wisdom save to try to end the effect.\n\nA target isn't compelled to move into an obviously deadly hazard, such as a fire or a pit, but it will provoke opportunity attacks to move in the designated direction."
		},
		{
			"name": "Cone of Cold",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cone",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "crystal or glass cone",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Cold",
			"damage-heal": "DAM: 8d8",
			"sourcebook": "PHB",
			"page": "224",
			"additional-detail": "Creatures killed become frozen statues.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": false,
			"druid": [
				"arctic"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A blast of cold air erupts from your hands. Each creature in a 60-foot cone must make a Constitution saving throw. A creature takes 8d8 cold damage on a failed save, or half as much damage on a successful one.\n\nA creature killed by this spell becomes a frozen statue until it thaws.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the damage increases by 1d8 for each slot level above 5th."
		},
		{
			"name": "Confusion",
			"level": 4,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "sphere",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "3 nut shells",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "224",
			"additional-detail": "Targets can't take reactions and do random actions.  See Sourcebook.",
			"per-higher-spell-level": "Increase radius by 5ft.",
			"bard": true,
			"cleric": [
				"knowledge"
			],
			"druid": true,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell assaults and twists creatures' minds, spawning delusions and provoking uncontrolled action. Each creature in a 10-foot radius sphere centered on a point you choose within range must succeed on a Wisdom saving throw when you cast this spell or by affected by it.\n\nAn affected target can't take reactions and must roll a d10 at the start of each of its turns to determine its behavior for that turn.\n\n**1**: The creature uses up all its movement to move in a random direction. To determine the direction, roll a d8 and assign a direction to each die face. The creature doesn't take an action this turn.\n\n**2-6**: The creature doesn't move or take actions this turn.\n\n**7-8**: The creature uses its action to make a melee attack against a randomly determined creature within its reach. If there is no creature within its reach, the creature does nothing this turn.\n\n**9-10**: The creature can act and move normally.\n\nAt the end of each of its turns, an affected target can make a Wisdom saving throw. If it succeeds, this effect ends for that target\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level or higher, the radius of the sphere increases by 5 feet for each spell slot above 4th."
		},
		{
			"name": "Conjure Animals",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "225",
			"additional-detail": "Summon fey spirits as creatures (total CR <= 2) that act as a group.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You summon fey spirits that take the form of beasts and appear in unoccupied spaces that you can see within range. Choose one of the following options for what appears:\n\n* One beast of challenge rating 2 or lower\n* Two beasts of challenge rating 1 or lower\n* Four beasts of challenge rating 1/2 or lower\n* Eight beasts of challenge rating 1/4 or lower\n\nEach beast is also considered fey, and it disappears when it drops to 0 hit points or when the spell ends.\n\nThe summoned creatures are friendly to you and your companions. Roll initiative for the summoned creatures as a group, which has its own turns. They obey any verbal commands that you issue to them (no action required by you). If you don’t issue any commands to them, they defend themselves from hostile creatures, but otherwise take no actions.\n\nThe DM has the creatures’ statistics.\n\n**At Higher Levels.** When you cast this spell using certain higher-level spell slots, you choose one of the summoning options above, and more creatures appear: twice as many with a 5th-level slot, three times as many with a 7th-level"
		},
		{
			"name": "Conjure Barrage",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cone",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "ammo or thrown weapon",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "See Details",
			"damage-heal": "DAM: 3d8",
			"sourcebook": "PHB",
			"page": "225",
			"additional-detail": "Damage type is same as ammo/weapon used as component.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You throw a nonmagical weapon or fire a piece of nonmagical ammunition into the air to create a cone of identical weapons that shoot forward and then disappear. Each creature in a 60-foot cone must succeed on a Dexterity saving throw. A creature takes 3d8 damage on a failed save, or half as much damage on a successful one. The damage type is the same as that of the weapon or ammunition used as a component."
		},
		{
			"name": "Conjure Celestial",
			"level": 7,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "225",
			"additional-detail": "Summon celestial CR <= 4.  Obeys commands that don't violate alignment.",
			"per-higher-spell-level": "9th level: CR <= 5",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You summon a celestial of challenge rating 4 or lower, which appears in an unoccupied space that you can see within range. The celestial disappears when it drops to 0 hit points or when the spell ends.\n\nThe celestial is friendly to you and your companions for the duration. Roll initiative for the celestial, which has its own turns. It obeys any verbal commands that you issue to it (no action required by you), as long as they don't violate its alignment. If you don't issue any commands to the celestial, it defends itself from hostile creatures but otherwise takes no actions.\n\nThe DM has the celestial's statistics.\n\n**At Higher Levels.** When you cast this spell using a 9th-level spell slot, you summon a celestial of challenge rating 5 or lower."
		},
		{
			"name": "Conjure Elemental",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "See Sourcebook",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "225",
			"additional-detail": "Summon elemental CR <= 5.  Obeys commands. Hostile if control is lost.",
			"per-higher-spell-level": "Increase max CR by 1.",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You call forth an elemental servant. Choose an area of air, earth, fire, or water that fills a 10-foot cube within range. An elemental of challenge rating 5 or lower appropriate to the area you chose appears in an unoccupied space within 10 feet of it. For example, a fire elemental emerges from a bonfire, and an earth elemental rises up from the ground. The elemental disappears when it drops to 0 hit points or when the spell ends.\n\nThe elemental is friendly to you and your companions for the duration. Roll initiative for the elemental, which has its own turns. It obeys any verbal commands that you issue to it (no action required by you). If you don't issue any commands to the elemental, it defends itself from hostile creatures but otherwise takes no actions.\n\nIf your concentration is broken, the elemental doesn't disappear. Instead, you lose control of the elemental, it becomes hostile toward you and your companions, and it might attack. An uncontrolled elemental can't be dismissed by you, and it disappears 1 hour after you summoned it.\n\nThe DM has the elemental's statistics.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the challenge rating increases by 1 for each slot level above 5th."
		},
		{
			"name": "Conjure Fey",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "226",
			"additional-detail": "Summon fey CR <= 6. Obeys commands. Hostile if control is lost.",
			"per-higher-spell-level": "Increase max CR by 1.",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "You summon a fey creature of challenge rating 6 or lower, or a fey spirit that takes the form of a beast of challenge rating 6 or lower. It appears in an unoccupied space that you can see within range. The fey creature disappears when it drops to 0 hit points or when the spell ends.\n\nThe fey creature is friendly to you and your companions for the duration. Roll initiative for the creature, which has its own turns. It obeys any verbal commands that you issue to it (no action required by you), as long as they don't violate its alignment. If you don't issue any commands to the fey creature, it defends itself from hostile creatures but otherwise takes no actions.\n\nIf your concentration is broken, the fey creature doesn't disappear. Instead, you lose control of the fey creature, it becomes hostile toward you and your companions, and it might attack. An uncontrolled fey creature can't be dismissed by you, and it disappears 1 hour after you summoned it.\n\nThe DM has the fey creature's statistics.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, the challenge rating increases by 1 for each slot level above 6th."
		},
		{
			"name": "Conjure Minor Elementals",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "226",
			"additional-detail": "Summon elementals (total CR <= 2) that obey commands.",
			"per-higher-spell-level": "6th: CR <= 4; 8th: CR <= 6",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You summon elementals that appear in unoccupied spaces that you can see within range. You choose one of the following options for what appears:\n\n* One elemental of challenge rating 2 or lower\n* Two elementals of challenge rating 1 or lower\n* Four elementals of challenge rating 1/2 or lower\n* Eight elementals of challenge rating 1/4 or lower.\n\nAn elemental summoned by this spell disappears when it drops to 0 hit points or when the spell ends.\n\nThe summoned creatures are friendly to you and your companions. Roll initiative for the summoned creatures as a group, which has its own turns. They obey any verbal commands that you issue to them (no action required by you). If you don't issue any commands to them, they defend themselves from hostile creatures, but otherwise take no actions.\n\nThe DM has the creatures' statistics.\n\n**At Higher Levels.** When you cast this spell using certain higher-level slots, you choose one of the summoning options above, and more creatures appear: twice as many with a 6th-level slot and three times as many with an 8th-level slot."
		},
		{
			"name": "Conjure Volley",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "ft. radius, 20 ft. high cylinder",
				"size": 40
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "ammo or thrown weapon",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "See Details",
			"damage-heal": "DAM: 8d8",
			"sourcebook": "PHB",
			"page": "226",
			"additional-detail": "Damage type is same as ammo/weapon used as component.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You fire a piece of nonmagical ammunition from a ranged weapon or throw a nonmagical weapon into the air and choose a point within range. Hundreds of duplicates of the ammunition or weapon fall in a volley from above and then disappear. Each creature in a 40-foot-radius, 20-foot-high cylinder centered on that point must make a Dexterity saving throw. A creature takes 8d8 damage on a failed save, or half as much damage on a successful one. The damage type is the same as that of the ammunition or weapon."
		},
		{
			"name": "Conjure Woodland Beings",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "1 holly berry per creature",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "226",
			"additional-detail": "Summon fey creatures (CR <= 2) that obey commands.",
			"per-higher-spell-level": "6th: CR <= 4; 8th: CR <= 6",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You summon fey creatures that appear in unoccupied spaces that you can see within range. Choose one of the following options for what appears:\n\n* One fey creature of challenge rating 2 or lower\n* Two fey creatures of challenge rating 1 or lower\n* Four fey creatures of challenge rating 1/2 or lower\n* Eight fey creatures of challenge rating 1/4 or lower\n\nA summoned creature disappears when it drops to 0 hit points or when the spell ends.\n\nThe summoned creatures are friendly to you and your companions. Roll initiative for the summoned creatures as a group, which have their own turns. They obey any verbal commands that you issue to them (no action required by you). If you don't issue any commands to them, they defend themselves from hostile creatures, but otherwise take no actions.\n\nThe DM has the creatures' statistics.\n\n**At Higher Levels.** When you cast this spell using certain higher-level spell slots, you choose one of the summoning options above, and more creatures appear: twice as many with a 6th-level slot and three times as many with an 8th-level slot."
		},
		{
			"name": "Contact Other Plane",
			"level": 5,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "INT DC:15(DAM, insane for day)"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 6d6",
			"sourcebook": "PHB",
			"page": "226",
			"additional-detail": "Contact extraplanar being. YOU make save. 1-word answers to 5 questions.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You mentally contact a demigod, the spirit of a long-dead sage, or some other mysterious entity from another plane. Contacting this extraplanar intelligence can strain or even break your mind. When you cast this spell, make a DC 15 Intelligence saving throw. On a failure, you take 6d6 psychic damage and are insane until you finish a long rest. While insane, you can't take actions, can't understand what other creatures say, can't read, and speak only in gibberish. A *[greater restoration](../greater-restoration \"greater restoration (lvl 5)\")* spell cast on you ends this effect.\n\nOn a successful save, you can ask the entity up to five questions. You must ask your questions before the spell ends. The DM answers each question with one word, such as \"yes,\" \"no,\" \"maybe,\" \"never,\" \"irrelevant,\" or \"unclear\" (if the entity doesn't know the answer to the question). If a one-word answer would be misleading, the DM might instead offer a short phrase as an answer."
		},
		{
			"name": "Contagion",
			"level": 5,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 7
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON (See Sourcebook)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "227",
			"additional-detail": "Give creature a disease.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Your touch inflicts disease. Make a melee spell attack against a creature within your reach. On a hit, you afflict the creature with a disease of your choice from any of the ones described below.\n\nAt the end of each of the target's turns, it must make a Constitution saving throw. After failing three of these saving throws, the disease's effects last for the duration, and the creature stops making these saves. After succeeding on three of these saving throws, the creature recovers from the disease, and the spell ends.\n\nSince this spell induces a natural disease in its target, any effect that removes a disease or otherwise ameliorates a disease's effects apply to it.\n\n**Blinding Sickness.** Pain grips the creature's mind, and its eyes turn milky white. The creature has disadvantage on Wisdom checks and Wisdom saving throws and is blinded.\n\n**Filth Fever.** A raging fever sweeps through the creature's body. The creature has disadvantage on Strength checks, Strength saving throws, and attack rolls that use Strength.\n\n**Flesh Rot.** The creature's flesh decays. The creature has disadvantage on Charisma checks and vulnerability to all damage.\n\n**Mindfire.** The creature's mind becomes feverish. The creature has disadvantage on Intelligence checks and Intelligence saving throws, and the creature behaves as if under the effects of the *[confusion](../confusion/ \"confusion (lvl 4)\")* spell during combat.\n\n**Seizure.** The creature is overcome with shaking. The creature has disadvantage on Dexterity checks, Dexterity saving throws, and attack rolls that use Dexterity.\n\n**Slimy Doom.** The creature begins to bleed uncontrollably. The creature has disadvantage on Constitution checks and Constitution saving throws. In addition, whenever the creature takes damage, it is stunned until the end of its next turn."
		},
		{
			"name": "Contingency",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "ivory statue of self",
			"cost": "1500 gp",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "227",
			"additional-detail": "Spell <= 5th level activates when condition occurs. That spell's slot used too.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Choose a spell of 5th level or lower that you can cast, that has a casting time of 1 action, and that can target you. You cast that spell--called the contingent spell--as part of casting *contingency*, expending spell slots for both, but the contingent spell doesn't come into effect. Instead, it takes effect when a certain circumstance occurs. You describe that circumstance when you cast the two spells. For example, a *contingency* cast with *[water breathing](../water-breathing/ \"water breathing (lvl 3)\")* might stipulate that *water breathing* comes into effect when you are engulfed in water or a similar liquid.\n\nThe contingent spell takes effect immediately after the circumstance is met for the first time, whether or not you want it to. and then contingency ends.\n\nThe contingent spell takes effect only on you, even if it can normally target others. You can use only one *contingency* spell at a time. If you cast this spell again, the effect of another *contingency* spell on you ends. Also, *contingency* ends on you if its material component is ever not on your person."
		},
		{
			"name": "Continual Flame",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "RUBY DUST",
			"cost": "50 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "227",
			"additional-detail": "Heatless flame comes from object. Can be covered but not snuffed out.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A flame, equivalent in brightness to a torch, springs forth from an object that you touch. The effect looks like a regular flame, but it creates no heat and doesn't use oxygen. A *continual flame* can be covered or hidden but not smothered or quenched."
		},
		{
			"name": "Control Water",
			"level": 4,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 300
			},
			"target-area": {
				"type": "ft. cube",
				"size": 100
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "water drop, pinch of dust",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "227",
			"additional-detail": "Control water.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Until the spell ends, you control any freestanding water inside an area you choose that is a cube up to 100 feet on a side. You can choose from any of the following effects when you cast this spell. As an action on your turn, you can repeat the same effect or choose a different one.\n\n**Flood.** You cause the water level of all standing water in the area to rise by as much as 20 feet. If the area includes a shore, the flooding water spills over onto dry land.\n\nIf you choose an area in a large body of water, you can instead create a 20-foot tall wave that travels from one side of the area to the other and then crashes down. Any Huge or smaller vehicles in the wave's path are carried with it to the other side. Any Huge or smaller vehicles struck by the wave have a 25 percent chance of capsizing.\n\nThe water level remains elevated until the spell ends or you choose a different effect. If this effect produced a wave, the wave repeats on the start of your next turn while the flood effect lasts.\n\n**Part Water.** You cause water in the area to move apart and create a trench. The trench extends across the spell's area, and the separated water forms a wall to either side. The trench remains until the spell ends or you choose a different effect. The water then slowly fills in the trench over the course of the next round until the normal water level is restored.\n\n**Redirect Flow.** You cause flowing water in the area to move in a direction you choose, even if the water has to flow over obstacles, up walls, or in other unlikely directions. The water in the area moves as you direct it, but once it moves beyond the spell's area, it resumes its flow based on the terrain conditions. The water continues to move in the direction you choose until the spell ends or you choose a different effect.\n\n**Whirlpool.** This effect requires a deep body of water at least 50 feet square and 25 feet deep. You cause a whirlpool to form in the center of the area. The whirlpool form a vortex that is 5 feet wide at the base, up to 50 feet wide at the top, and 25 feet tall. Any creature or object in the water and within 25 feet of the vortex is pulled 10 feet toward it. A creature can swim away from the vortex by making a Strength (Athletics) check against your spell save DC.\n\nWhen a creature enters the vortex for the first time on a turn, or starts its turn there, it must make a Strength saving throw. On a failed save, the creature takes 2d8 bludgeoning damage and is caught in the vortex until the spell ends. On a successful save, the creature takes half damage, and isn't caught in the vortex. A creature caught in the vortex can use its action to try and swim away from the vortex as described above, but has disadvantage on the Strength (Athletics) check to do so.\n\nThe first time each turn that an object enters the vortex, the object takes 2d8 bludgeoning damage; this damage occurs each round it remains in the vortex."
		},
		{
			"name": "Control Weather",
			"level": 8,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "mile radius",
				"size": 5
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "incense, earth&wood in water",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "228",
			"additional-detail": "Control the weather.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You take control of the weather within 5 miles of you for the duration. You must be outdoors to cast this spell. Moving to a place where you don't have a clear path to the sky ends the spell early.\n\nWhen you cast the spell, you change the current weather conditions, which are determined by the DM based on the climate and season. You can change precipitation, temperature, and wind. It takes 1d4 x 10 minutes for the new conditions to take effect. Once they do so, you can change the conditions again. When the spell ends, the weather gradually returns to normal.\n\nWhen you change the weather conditions, find a current condition on the following tables and change its stage by one, up or down. When changing the wind, you can change its direction.\n\n**Precipitation**\n\n|Stage|Condition|\n|-|-|\n| 1 | Clear |\n| 2 | Light clouds |\n| 3 | Overcast or ground fog |\n| 4 | Rain, hail, or snow |\n| 5 | Torrential rain, driving hail, or blizzard |\n\n**Temperature**\n\n|Stage|Condition|\n|-|-|\n| 1 | Unbearable heat |\n| 2 | Hot |\n| 3 | Warm |\n| 4 | Cool |\n| 5 | Cold |\n| 6 | Arctic cold |\n\n**Wind**\n\n|Stage|Condition|\n|-|-|\n| 1 | Calm |\n| 2 | Moderate wind |\n| 3 | Strong wind |\n| 4 | Gale |\n| 5 | Storm |"
		},
		{
			"name": "Cordon of Arrows",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 5
			},
			"target-area": {
				"type": "unknown",
				"text": "Spell components"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "4 pieces of ammo",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "Piercing",
			"damage-heal": "DAM: 1d6",
			"sourcebook": "PHB",
			"page": "228",
			"additional-detail": "Ammo fired at creatures within 30 ft. Spell ends when ammo gone.",
			"per-higher-spell-level": "Two extra ammo.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You plant four pieces of nonmagical ammunition—arrows or crossbow bolts—in the ground within range and lay magic upon them to protect an area. Until the spell ends, whenever a creature other than you comes within 30 feet of the ammunition for the first time on a turn or ends its turn there, one piece of ammunition flies up to strike it. The creature must succeed on a Dexterity saving throw or take 1d6 piercing damage. The piece of ammunition is then destroyed. The spell ends when no ammunition remains.\n\nWhen you cast this spell, you can designate any creatures you choose, and the spell ignores them.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the amount of ammunition that can be affected increases by two for each slot level above 2nd."
		},
		{
			"name": "Counterspell",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "reaction",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "Spellcaster",
				"size": 1
			},
			"v": false,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Details."
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "228",
			"additional-detail": "Interrupt spell <= 4th. You make casting ability check (DC 10 + spell level).",
			"per-higher-spell-level": "Interrupt spell <= new level.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You attempt to interrupt a creature in the process of casting a spell. If the creature is casting a spell of 3rd level or lower, its spell fails and has no effect. If it is casting a spell of 4th level or higher, make an ability check using your spellcasting ability. The DC equals 10 + the spell’s level. On a success, the creature’s spell fails and has no effect.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the interrupted spell has no effect if its level is less than or equal to the level of the spell slot you used."
		},
		{
			"name": "Create Food and Water",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "229",
			"additional-detail": "Create 45 lbs. of bland, nourishing food for 24 hours and 30 gallons of water.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": [
				"desert"
			],
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create 45 pounds of food and 30 gallons of water on the ground or in containers within range, enough to sustain up to fifteen humanoids or five steeds for 24 hours. The food is bland but nourishing, and spoils if uneaten after 24 hours. The water is clean and doesn’t go bad."
		},
		{
			"name": "Create or Destroy Water",
			"level": 1,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "gal. water/30 ft. cube of fog",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "drop of water/sand",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "229",
			"additional-detail": "Create/destroy 10 gal. of water or 30 ft. cube of rain/fog.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You either create or destroy water.\n\n**Create Water.** You create up to 10 gallons of clean water within range in an open container. Alternatively, the water falls as rain in a 30-foot cube within range.\n\n**Destroy Water.** You destroy up to 10 gallons of water in an open container within range. Alternatively, you destroy fog in a 30-foot cube within range.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you create or destroy 10 additional gallons of water, or the size of the cube increases by 5 feet, for each slot level above 1st."
		},
		{
			"name": "Create Undead",
			"level": 6,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "See Sourcebook.",
			"cost": "Source",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "229",
			"additional-detail": "Create undead to serve you for 24 hours.  See Sourcebook.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You can cast this spell only at night. Choose up to three corpses of Medium or Small humanoids within range. Each corpse becomes a ghoul under your control. (The DM has game statistics for these creatures.)\n\nAs a bonus action on each of your turns, you can mentally command any creature you animated with this spell if the creature is within 120 feet of you (if you control multiple creatures, you can command any or all of them at the same time, issuing the same command to each one). You decide what action the creature will take and where it will move during its next turn, or you can issue a general command, such as to guard a particular chamber or corridor. If you issue no commands, the creature only defends itself against hostile creatures. Once given an order, the creature continues to follow it until its task is complete.\n\nThe creature is under your control for 24 hours, after which it stops obeying any command you have given it. To maintain control of the creature for another 24 hours, you must cast this spell on the creature before the current 24-hour period ends. This use of the spell reasserts your control over up to three creatures you have animated with this spell, rather than animating new ones.\n\n**At Higher Levels.** When you cast this spell using a 7th-level spell slot, you can animate or reassert control over four ghouls. When you cast this spell using an 8th-level spell slot, you can animate or reassert control over five ghouls or two ghasts or wights. When you cast this spell using a 9th-level spell slot, you can animate or reassert control over six ghouls, three ghasts or wights, or two mummies."
		},
		{
			"name": "Creation",
			"level": 5,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of matter you want to make",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "special"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "229",
			"additional-detail": "Make nonliving object no larger than 5 ft. cube.  See Sourcebook.",
			"per-higher-spell-level": "Cube size increases by 5 ft.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You pull wisps of shadow material from the Shadowfell to create a nonliving object of vegetable matter within range: soft goods, rope, wood, or something similar. You can also use this spell to create mineral objects such as stone, crystal, or metal. The object created must be no larger than a 5-foot cube, and the object must be of a form and material that you have seen before.\n\nThe duration depends on the object's material. If the object is composed of multiple materials, use the shortest duration.\n\n| Material              | Duration   |\n| --------------------- |:----------:|\n| Vegetable matter      | 1 day      |\n| Stone or crystal      | 12 hours   |\n| Precious metals       | 1 hour     |\n| Gems                  | 10 minutes |\n| Adamantine or mithral | 1 minute   |\n\nUsing any material created by this spell as another spell's material component causes that spell to fail.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the cube increases by 5 feet for each slot level above 5th."
		},
		{
			"name": "Crown of Madness",
			"level": 2,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "humanoid",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "WIS every turn (Fail)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "229",
			"additional-detail": "Charm humanoid to attack your target of choice.  Use action to keep control.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "One humanoid of your choice that you can see within range must succeed on a Wisdom saving throw or become charmed by you for the duration. While the target is charmed in this way, a twisted crown of jagged iron appears on its head, and a madness glows in its eyes. The charmed target must use its action before moving on each of its turns to make a melee attack against a creature other than itself that you mentally choose."
		},
		{
			"name": "Crusader's Mantle",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "Nonhostiles in aura deal an extra 1d4 radiant DAM.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"war"
			],
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Holy power radiates from you in an aura with a 30-foot radius, awakening boldness in friendly creatures. Until the spell ends, the aura moves with you, centered on you. While in the aura, each nonhostile creature in the aura (including you) deals an extra 1d4 radiant damage when it hits with a weapon attack."
		},
		{
			"name": "Cure Wounds",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "See Details",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "HEAL: 1d8 + spellcasting ability modifier. No effect on undead or constructs.",
			"per-higher-spell-level": "Extra 1d8 HEAL.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A creature you touch regains a number of hit points equal to 1d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the healing increases by 1d8 for each slot level above 1st."
		},
		{
			"name": "Dancing Lights",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "phosphorous or glowworm",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "Create 4 glowing, hovering objects that shed light out 10 ft. Can move 60 ft. ",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create up to four torch-sized lights within range, making them appear as torches, lanterns, or glowing orbs that hover in the air for the duration. You can also combine the four lights into one glowing vaguely humanoid form of Medium size. Whichever form you choose, each light sheds dim light in a 10-foot radius. As a bonus action on your turn, you can move the lights up to 60 feet to a new spot within range. A light must be within 20 feet of another light created by this spell, and a light winks out if it exceeds the spell’s range."
		},
		{
			"name": "Darkness",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "sphere",
				"size": 15
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "bat fur and pitch or coal",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "Creates darkness normal light can't dispel. Dispels light spells <= 2nd level.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"swamp"
			],
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Magical darkness spreads from a point you choose within range to fill a 15-foot-radius sphere for the duration. The darkness spreads around corners. A creature with darkvision can’t see through this darkness, and nonmagical light can’t illuminate it. If the point you choose is on an object you are holding or one that isn’t being worn or carried, the darkness emanates from the object and moves with it. Completely covering the source of the darkness with an opaque object, such as a bowl or a helm, blocks the darkness. If any of this spell’s area overlaps with an area of light created by a spell of 2nd level or lower, the spell that created the light is dispelled."
		},
		{
			"name": "Darkvision",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "dried carrot or agate",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "Grants creature darkvision (60 ft.) but can't see in Darkness aura.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a willing creature to grant it the ability to see in the dark. For the duration, that creature has darkvision out to a range of 60 feet."
		},
		{
			"name": "Daylight",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "sphere",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "Creates bright light. Dispels darkness spells <= 3rd level it overlaps with.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "A 60-foot-radius sphere of light spreads out from a point you choose within range. The sphere is bright light and sheds dim light for an additional 60 feet.\n\nIf you chose a point on an object you are holding or one that isn’t being worn or carried, the light shines from the object and moves with it. Completely covering the affected object with an opaque object, such as a bowl or a helm, blocks the light.\n\nIf any of this spell’s area overlaps with an area of darkness created by a spell of 3rd level or lower, the spell that created the darkness is dispelled."
		},
		{
			"name": "Death Ward",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "1 use: Target drops to 1 HP instead of 0 HP or negates instant kill effect.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature and grant it a measure of protection from death.\n\nThe first time the target would drop to 0 hit points as a result of taking damage, the target instead drops to 1 hit point, and the spell ends.\n\nIf the spell is still in effect when the target is subjected to an effect that would kill it instantaneously without dealing damage, that effect is instead negated against the target, and the spell ends."
		},
		{
			"name": "Delayed Blast Fireball",
			"level": 7,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "tiny ball of guano and sulfur",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 12d6",
			"sourcebook": "PHB",
			"page": "230",
			"additional-detail": "Creates spot where fireball will erupt.  See Sourcebook.",
			"per-higher-spell-level": "Extra 1d6 base DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A beam of yellow light flashes from your pointing finger, then condenses to linger at a chosen point within range as a glowing bead for the duration. When the spell ends, either because your concentration is broken or because you decide to end it, the bead blossoms with a low roar into an explosion of flame that spreads around corners. Each creature in a 20-foot-radius sphere centered on that point must make a Dexterity saving throw. A creature takes fire damage equal to the total accumulated damage on a failed save, or half as much damage on a successful one.\n\nThe spell's base damage is 12d6. If at the end of your turn the bead has not yet detonated, the damage increases by 1d6.\n\nIf the glowing bead is touched before the interval has expired, the creature touching it must make a Dexterity saving throw. On a failed save, the spell ends immediately, causing the bead to erupt in flame. On a successful save, the creature can throw the bead up to 40 feet. When it strikes a creature or a solid object, the spell ends, and the bead explodes.\n\nThe fire damages objects in the area and ignites flammable objects that aren't being worn or carried.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 8th level or higher, the base damage increases by 1d6 for each slot level above 7th."
		},
		{
			"name": "Demiplane",
			"level": 8,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": false,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "231",
			"additional-detail": "Create door to 30 ft. cubic room in demiplane. Trapped if there when spell ends.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You create a shadowy door on a flat solid surface that you can see within range. The door is large enough to allow Medium creatures to pass through unhindered. When opened, the door leads to a demiplane that appears to be an empty room 30 feet in each dimension, made of wood or stone. When the spell ends, the door disappears, and any creatures or objects inside the demiplane remain trapped there, as the door also disappears from the other side.\n\nEach time you cast this spell, you can create a new demiplane, or have the shadowy door connect to a demiplane you created with a previous casting of this spell.  Additionally, if you know the nature and contents of a demiplane created by a casting of this spell by another creature, you can have the shadowy door connect to its demiplane instead."
		},
		{
			"name": "Destructive Wave",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON (Half DAM, not prone)"
			},
			"damage-type": "See Details",
			"damage-heal": "DAM: 5d6+5d6",
			"sourcebook": "PHB",
			"page": "231",
			"additional-detail": "Targets in circle take thunder DAM, then radiant or necrotic DAM; go prone.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"tempest"
			],
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You strike the ground, creating a burst of divine energy that ripples outward from you. Each creature you choose within 30 feet of you must succeed on a Constitution saving throw or take 5d6 thunder damage, as well as 5d6 radiant or necrotic damage (your choice), and be knocked prone. A creature that succeeds on its saving throw takes half as much damage and isn't knocked prone."
		},
		{
			"name": "Detect Evil and Good",
			"level": 1,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "231",
			"additional-detail": "Know location of aberration,celestial,elemental,fey,fiend,undead,(un)holy ground.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "For the duration, you know if there is an aberration, celestial, elemental, fey, fiend, or undead within 30 feet of you, as well as where the creature is located. Similarly, you know if there is a place or object within 30 feet of you that has been magically consecrated or desecrated.\n\nThe spell can penetrate most barriers, but it is blocked by 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood or dirt."
		},
		{
			"name": "Detect Magic",
			"level": 1,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "231",
			"additional-detail": "Sense presence of magic. Use action to see auras around creatures/objects.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "For the duration, you sense the presence of magic within 30 feet of you. If you sense magic in this way, you can use your action to see a faint aura around any visible creature or object in the area that bears magic, and you learn its school of magic, if any.\n\nThe spell can penetrate most barriers, but it is blocked by 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood or dirt."
		},
		{
			"name": "Detect Poison and Disease",
			"level": 1,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "yew leaf",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "231",
			"additional-detail": "Sense location and type of disease, poison, or poisonous creature.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "For the duration, you can sense the presence and location of poisons, poisonous creatures, and diseases within 30 feet of you. You also identify the kind of poison, poisonous creature, or disease in each case.\n\nThe spell can penetrate most barriers, but it is blocked by 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood or dirt."
		},
		{
			"name": "Detect Thoughts",
			"level": 2,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "a copper piece",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "231",
			"additional-detail": "Read thoughts of those around you.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "For the duration, you can read the thoughts of certain creatures. When you cast the spell and as your action on each turn until the spell ends, you can focus your mind on any one creature that you can see within 30 feet of you. If the creature you choose has an Intelligence of 3 or lower or doesn’t speak any language, the creature is unaffected.\n\nYou initially learn the surface thoughts of the creature—what is most on its mind in that moment. As an action, you can either shift your attention to another creature’s thoughts or attempt to probe deeper into the same creature’s mind. If you probe deeper, the target must make a Wisdom saving throw. If it fails, you gain insight into its reasoning (if any), its emotional state, and something that looms large in its mind (such as something it worries over, loves, or hates). If it succeeds, the spell ends. Either way, the target knows that you are probing into its mind, and unless you shift your attention to another creature’s thoughts, the creature can use its action on its turn to make an Intelligence check contested by your Intelligence check; if it succeeds, the spell ends.\n\nQuestions verbally directed at the target creature naturally shape the course of its thoughts, so this spell is particularly effective as part of an interrogation. You can also use this spell to detect the presence of thinking creatures you can’t see. When you cast the spell or as your action during the duration, you can search for thoughts within 30 feet of you. The spell can penetrate barriers, but 2 feet of rock, 2 inches of any metal other than lead, or a thin sheet of lead blocks you. You can’t detect a creature with an Intelligence of 3 or lower or one that doesn’t speak any language. \n\nOnce you detect the presence of a creature in this way, you can read its thoughts for the rest of the duration as described above, even if you can’t see it, but it must still be within range."
		},
		{
			"name": "Dimension Door",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 500
			},
			"target-area": {
				"type": "unknown",
				"text": "Self (and ally within 5 ft.)"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "233",
			"additional-detail": "Teleport yourself and ally to location. If occupied, 4d6 force DAM and spell fails.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"trickery"
			],
			"druid": false,
			"paladin": [
				"vengeance"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You teleport yourself from your current location to any other spot within range. You arrive at exactly the spot desired. It can be a place you can see, one you can visualize, or one you can describe by stating distance and direction, such as \"200 feet straight downward\" or \"upward to the northwest at a 45-degree angle, 300 feet.\"\n\nYou can bring along objects as long as their weight doesn't exceed what you can carry. You can also bring one willing creature of your size or smaller who is carrying gear up to its carrying capacity. The creature must be within 5 feet of you when you cast this spell.\n\nIf you would arrive in a place already occupied by an object or a creature, you and any creature traveling with you each take 4d6 force damage, and the spell fails to teleport you."
		},
		{
			"name": "Disguise Self",
			"level": 1,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "233",
			"additional-detail": "Create illusion to appear as someone else.  Foiled by Investigation vs. spell DC.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"trickery"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You make yourself -- including your clothing, armor, weapons, and other belongings on your person -- look different until the spell ends or until you use your action to dismiss it. You can seem 1 foot shorter or taller and can appear thin, fat, or in between. You can't change your body type, so you must adopt a form that has the same basic arrangement of limbs. Otherwise, the extent of the illusion is up to you.\n\nThe changes wrought by this spell fail to hold up to physical inspection. For example, if you use this spell to add a hat to your outfit, objects pass through the hat, and anyone who touches it would feel nothing or would feel your head and hair. If you use this spell to appear thinner than you are, the hand of someone who reaches out to touch you would bump into you while it was seemingly still in midair.\n\nTo discern that you are disguised, a creature can use its action to inspect your appearance and must succeed on an Intelligence (Investigation) check against your spell save DC."
		},
		{
			"name": "Disintegrate",
			"level": 6,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "lodestone and pinch of dust",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "Force",
			"damage-heal": "DAM: 10d6+40",
			"sourcebook": "PHB",
			"page": "233",
			"additional-detail": "If target drops to 0 HP, is disintegrated. Only revived by True Resurrection.",
			"per-higher-spell-level": "Extra 3d6 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A thin green ray springs from your pointing finger to a target that you can see within range. The target can be a creature, an object, or a creation of magical force, such as the wall created by *[wall of force](../wall-of-force/ \"wall of force (lvl 5)\")*.\n\nA creature targeted by this spell must make a Dexterity saving throw. On a failed save, the target takes 10d6 + 40 force damage. If this damage reduces the target to 0 hit points, it is disintegrated.\n\nA disintegrated creature and everything it is wearing and carrying, except magic items, are reduced to a pile of fine gray dust. The creature can be restored to life only by means of a *[true resurrection](../true-resurrection/ \"true resurrection (lvl 9)\")* or a *[wish](../wish/ \"wish (lvl 9)\")* spell.\n\nThis spell automatically disintegrates a Large or smaller nonmagical object or a creation of magical force. If the target is a Huge or larger object or creation of force, this spell disintegrates a 10-foot-cube portion of it. A magic item is unaffected by this spell.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, the damage increases by 3d6 for each slot level above 6th."
		},
		{
			"name": "Dispel Evil and Good",
			"level": 5,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "holy water or silver/iron powder",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "233",
			"additional-detail": "Fey,undead,extraplanar creatures have disadvantaged attacks. See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Shimmering energy surrounds and protects you from fey, undead, and creatures originating from beyond the Material Plane. For the duration, celestials, elementals, fey, fiends, and undead have disadvantage on attack rolls against you.\n\nYou can end the spell early by using either of the following special functions.\n\n**Break Enchantment.** As your action, you touch a creature you can reach that is charmed, frightened, or possessed by a celestial, an elemental, a fey, a fiend, or an undead. The creature you touch is no longer charmed, frightened, or possessed by such creatures.\n\n**Dismissal.** As your action, make a melee spell attack against a celestial, an elemental, a fey, a fiend, or an undead you can reach. On a hit, you attempt to drive the creature back to its home plane. The creature must succeed on a Charisma saving throw or be sent back to its home plane (if it isn't there already). If they aren't on their home plane, undead are sent to the Shadowfell, and fey are sent to the Feywild."
		},
		{
			"name": "Dispel Magic",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creature/object/magical effect",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "234",
			"additional-detail": "End spell <= 3rd level. For >= 4th level, casting ability check DC=10+spell level.",
			"per-higher-spell-level": "End spell <= new level.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Choose one creature, object, or magical effect within range. Any spell of 3rd level or lower on the target ends. For each spell of 4th level or higher on the target, make an ability check using your spellcasting ability. The DC equals 10 + the spell’s level. On a successful check, the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, you automatically end the effects of a spell on the target if the spell’s level is equal to or less than the level of the spell slot you used."
		},
		{
			"name": "Dissonant Whispers",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 3d6",
			"sourcebook": "PHB",
			"page": "234",
			"additional-detail": "Target immediately uses reaction to move as far away as possible.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You whisper a discordant melody that only one creature of your choice within range can hear, wracking it with terrible pain. The target must make a Wisdom saving throw. On a failed save, it takes 3d6 psychic damage and must immediately use its reaction, if available, to move as far as its speed allows away from you. The creature doesn't move into obviously dangerous ground, such as a fire or a pit. On a successful save, the target takes half as much damage and doesn't have to move away. A deafened creature automatically succeeds on the save.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
		},
		{
			"name": "Divination",
			"level": 4,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "INCENSE, SAC. OFFERING",
			"cost": "25 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "234",
			"additional-detail": "Question about one event in next 7 days answered by phrase or omen.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": [
				"forest",
				"grassland"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Your magic and an offering put you in contact with a god or a god's servants. You ask a single question concerning a specific goal, event, or activity to occur within 7 days. The DM offers a truthful reply. The reply might be a short phrase, a cryptic rhyme, or an omen.\n\nThe spell doesn't take into account any possible circumstances that might change the outcome, such as the casting of additional spells or the loss or gain of a companion.\n\nIf you cast this spell two or more times before finishing your next long rest, there is a cumulative 25 percent chance for each casting after the first that you get a random reading. The DM makes this roll in secret."
		},
		{
			"name": "Divine Favor",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "234",
			"additional-detail": "Your weapon attacks deal extra 1d4 radiant DAM on a hit.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"war"
			],
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Your prayer empowers you with divine radiance. Until the spell ends, your weapon attacks deal an extra 1d4 radiant damage on a hit."
		},
		{
			"name": "Divine Word",
			"level": 7,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "Any targets in range"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "234",
			"additional-detail": "Targets suffer effects based on their current HP.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You utter a divine word, imbued with the power that shaped the world at the dawn of creation. Choose any number of creatures you can see within range. Each creature that can hear you must make a Charisma saving throw. On a failed save, a creature suffers an effect based on its current hit points:\n\n* 50 hit points or fewer: deafened for 1 minute\n* 40 hit points or fewer: deafened and blinded for 10 minutes\n* 30 hit points or fewer: blinded, deafened, and stunned for 1 hour\n* 20 hit points or fewer: killed instantly\n\nRegardless of its current hit points, a celestial, an element, a fey or a fiend that fails its save is forced back to its plane of origin (if it isn't there already) and can't return to your current plane for 24 hours by any means short of a _wish_ spell."
		},
		{
			"name": "Dominate Beast",
			"level": 4,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "beast",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "234",
			"additional-detail": "Charm beast to give it commands. Has advantage to save if attacking it.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "You attempt to beguile a beast that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw.\n\nWhile the beast is charmed, you have a telepathic link with it as long as the two of you are on the same plane of existence. You can use this telepathic link to issue commands to the creature while you are conscious (no action required), which it does its best to obey. You can specify a simple and general course of action, such as \"Attack that creature\", \"Run over there\", or \"Fetch that object\". If the creature completes the order and doesn't receive further direction from you, it defends and preserves itself to the best of its ability.\n\nYou can use your action to take total and precise control of the target. Until the end of your next turn, the creature takes only the actions you choose, and doesn't do anything that you don't allow it to do. During this time, you can also cause the creature to use a reaction, but this requires you to use your own reaction as well. Each time the target takes damage, it makes a new Wisdom saving throw against the spell. If the saving throw succeeds, the spell ends.\n\n**At Higher Levels.** When you cast this spell with a 5th-level spell slot, the duration is concentration, up to 10 minutes. When you use a 6th-level spell slot, the duration is concentration, up to 1 hour. When you use a spell slot of 7th level or higher, the duration is concentration, up to 8 hours."
		},
		{
			"name": "Dominate Monster",
			"level": 8,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "235",
			"additional-detail": "Charm monster to give it commands. Has advantage to save if attacking it.",
			"per-higher-spell-level": "9th: Duration is 8 hours.",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You attempt to beguile a creature that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw.\n\nWhile the creature is charmed, you have a telepathic link with it as long as the two of you are on the same plane of existence. You can use this telepathic link to issue commands to the creature while you are conscious (no action required), which it does its best to obey. You can specify a simple and general course of action, such as \"Attack that creature,\" \"Run over there,\" or \"Fetch that object.\" If the creature completes the order and doesn't receive further direction from you, it defends and preserves itself to the best of its ability.\n\nYou can use your action to take total and precise control of the target. Until the end of your next turn, the creature takes only the actions you choose, and doesn't do anything that you don't allow it to do. During this time, you can also cause the creature to use a reaction, but this requires you to use your own reaction as well.\n\nEach time the target takes damage, it makes a new Wisdom saving throw against the spell. If the saving throw succeeds, the spell ends.\n\n**At Higher Levels.** When you cast this spell with a 9th-level spell slot, the duration is concentration, up to 8 hours."
		},
		{
			"name": "Dominate Person",
			"level": 5,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "person",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "235",
			"additional-detail": "Charm humanoid to give it commands. Has advantage to save if attacking it.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": true,
			"cleric": [
				"trickery"
			],
			"druid": false,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You attempt to beguile a humanoid that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw.\n\nWhile the target is charmed, you have a telepathic link with it as long as the two of you are on the same plane of existence. You can use this telepathic link to issue commands to the creature while you are conscious (no action required), which it does its best to obey. You can specify a simple and general course of action, such as \"Attack that creature\", \"Run over there\", or \"Fetch that object\". If the creature completes the order and doesn't receive further direction from you, it defends and preserves itself to the best of its ability.\n\nYou can use your action to take total and precise control of the target. Until the end of your next turn, the creature takes only the actions you choose, and doesn't do anything that you don't allow it to do. During this time you can also cause the creature to use a reaction, but this requires you to use your own reaction as well. Each time the target takes damage, it makes a new Wisdom saving throw against the spell. If the saving throw succeeds, the spell ends.\n\n**At Higher Levels.** When you cast this spell using a 6th-level spell slot, the duration is concentration, up to 10 minutes. When you use a 7th-level spell slot, the duration is concentration, up to 1 hour. When you use a spell slot of 8th level or higher, the duration is concentration, up to 8 hours."
		},
		{
			"name": "Drawmij's Instant Summons",
			"level": 6,
			"school": "Conjuration",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "object <= 10 lb.",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "sapphire",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "235",
			"additional-detail": "Speak item name and crush gem to summon object unless it's held by other.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch an object weighing 10 pounds or less w hose longest dimension is 6 feet or less. The spell leaves an invisible mark on its surface and invisibly inscribes the name of the item on the sapphire you use as the material component. Each time you cast this spell, you must use a different sapphire.\n\nAt any time thereafter, you can use your action to speak the item's name and crush the sapphire. The item instantly appears in your hand regardless of physical or planar distances, and the spell ends.\n\nIf another creature is holding or carrying the item, crushing the sapphire doesn't transport the item to you, but instead you learn who the creature possessing the object is and roughly where that creature is located at that moment.\n\n*Dispel magic* or a similar effect successfully applied to the sapphire ends this spell's effect."
		},
		{
			"name": "Dream",
			"level": 5,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "see sourcebook."
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "sand,ink,quill from asleep bird",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "See Sourcebook.",
			"damage-heal": "See Sourcebook.",
			"sourcebook": "PHB",
			"page": "236",
			"additional-detail": "Shape creature's dreams.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": [
				"grassland"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "This spell shapes a creature's dreams. Choose a creature known to you as the target of this spell. The target must be on the same plane of existence as you. Creatures that don't sleep, such as elves, can't be contacted by this spell. You, or a willing creature you touch, enters a trance state, acting as a messenger. While in the trance, the messenger is aware of his or her surroundings, but can't take actions or move.\n\nIf the target is asleep, the messenger appears in the target's dreams and can converse with the target as long as it remains asleep, through the duration of the spell. The messenger can also shape the environment of the dream, creating landscapes, objects, and other images. The messenger can emerge from the trance at any time, ending the effect of the spell early. The target recalls the dream perfectly upon waking. If the target is awake when you cast the spell, the messenger knows it, and can either end the trance (and the spell) or wait for the target to fall asleep, at which point the messenger appears in the target's dreams.\n\nYou can make the messenger appear monstrous and terrifying to the target. If you do, the messenger can deliver a message of no more than ten words and then the target must make a Wisdom saving throw. On a failed save, echoes of the phantasmal monstrosity spawn a nightmare that lasts the duration of the target's sleep and prevents the target from gaining any benefit from that rest. In addition, when the target wakes up, it takes 3d6 psychic damage.\n\nIf you have a body part, lock of hair, clipping from a nail, or similar portion of the target's body, the target makes its saving throw with disadvantage."
		},
		{
			"name": "Druidcraft",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "236",
			"additional-detail": "Create minor druidic effect.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Whispering to the spirits of nature, you create one of the following effects within range:\n\n* You create a tiny, harmless sensory effect that predicts what the weather will be at your location for the next 24 hours. The effect might manifest as a golden orb for clear skies, a cloud for rain, falling snowflakes for snow, and so on. This effect persists for 1 round.\n* You instantly make a flower bloom, a seed pod open, or a leaf bud bloom.\n* You create an instantaneous, harmless sensory effect, such as falling leaves, a puff of wind, the sound of a small animal, or the faint order of skunk. The effect must fit in a 5-foot cube.\n* You instantly light or snuff out a candle, a torch, or a small campfire."
		},
		{
			"name": "Earthquake",
			"level": 8,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 500
			},
			"target-area": {
				"type": "ft. radius",
				"size": 100
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of dirt, rock, and clay",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "236",
			"additional-detail": "Create a seismic disturbance with various effects.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a seismic disturbance at a point on the ground that you can see within range. For the duration, an intense tremor rips through the ground in a 100-foot-radius circle centered on that point and shakes creatures and structures in contact with the ground in that area.\n\nThe ground in the area becomes difficult terrain. Each creature on the ground that is concentrating must make a Constitution saving throw. On a failed save, the creature's concentration is broken.\n\nWhen you cast this spell and at the end of each turn you spend concentrating on it, each creature on the ground in the area must make a Dexterity saving throw. On a failed save, the creature is knocked prone.\n\nThis spell can have additional effects depending on the terrain in the area, as determined by the DM.\n\n**Fissures.** Fissures open throughout the spell's area at the start of your next turn after you cast the spell. A total of 1d6 such fissures open in locations chosen by the DM. Each is 1d10 x 10 feet deep, 10 feet wide, and extends from one edge of the spell's area to the opposite side. A creature standing on a spot where a fissure opens must succeed on a Dexterity saving throw or fall in. A creature that successfully saves moves with the fissure's edge as it opens.\n\nA fissure that opens beneath a structure causes it to automatically collapse (see below).\n\n**Structures.** The tremor deals 50 bludgeoning damage to any structure in contact with the ground in the area when you cast the spell and at the start of each of your turns until the spell ends. If a structure drops to 0 hit points, it collapses and potentially damages nearby creatures. A creature within half the distance of a structure's height must make a Dexterity saving throw. On a failed save, the creature takes 5d6 bludgeoning damage, is knocked prone, and is buried in the rubble, requiring a DC 20 Strength (Athletics) check as an action to escape. The DM can adjust the DC higher or lower, depending on the nature of the rubble. On a successful save, the creature takes half as much damage and doesn't fall prone or become buried."
		},
		{
			"name": "Eldritch Blast",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "target",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Force",
			"damage-heal": "DAM: 1d10",
			"sourcebook": "PHB",
			"page": "237",
			"additional-detail": "Beam. 2 beams at 5th level, 3 at 11th, 4 at 17th. Can choose different targets.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "A beam of crackling energy streaks toward a creature within range. Make a ranged spell attack against the target. On a hit, the target takes 1d10 force damage.\n\nThe spell creates more than one beam when you reach higher levels: two beams at 5th level, three beams at 11th level, and four beams at 17th level. You can direct the beams at the same target or at different ones. Make a separate attack roll for each beam."
		},
		{
			"name": "Elemental Weapon",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "nonmagical weapon",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "237",
			"additional-detail": "Weapon is +1 to hit and +1d4 acid, cold, fire, lightning, or thunder DAM.",
			"per-higher-spell-level": "5th:+2,2d4 DAM;7th +3,3D4",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A nonmagical weapon you touch becomes a magic weapon. Choose one of the following damage types: acid, cold, fire, lightning, or thunder. For the duration, the weapon has a +1 bonus to attack rolls and deals an extra 1d4 damage of the chosen type when it hits.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th or 6th level, the bonus to attack rolls increases to +2 and the extra damage increases to 2d4. When you use a spell slot of 7th level or higher, the bonus increases to +3 and the extra damage increases to 3d4."
		},
		{
			"name": "Enhance Ability",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "fur or feather from a beast",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "237",
			"additional-detail": "Target creature gains a beneficial effect.  See Sourcebook.",
			"per-higher-spell-level": "One additional creature.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature and bestow upon it a magical enhancement. Choose one of the following effects: the target gains the effect until the spell ends.\n\n**Bear's Endurance.** The target has advantage on Constitution checks. It also gains 2d6 temporary hit points, which are lost when the spell ends.\n\n**Bull's Strength.** The target has advantage on Strength checks, and his or her carrying capacity doubles.\n\n**Cat's Grace.** The target has advantage on Dexterity checks. It also doesn't take damage from falling 20 feet or less if it isn't incapacitated.\n\n**Eagle's Splendor.** The target has advantage on Charisma checks.\n\n**Fox's Cunning.** The target has advantage on Intelligence checks.\n\n**Owl's Wisdom.** The target has advantage on Wisdom checks.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd."
		},
		{
			"name": "Enlarge/Reduce",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "powdered iron",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CON"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "237",
			"additional-detail": "Enlarge or reduce target.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You cause a creature or an object you can see within range to grow larger or smaller for the duration. Choose either a creature or an object that is neither worn nor carried. If the target is unwilling, it can make a Constitution saving throw. On a success, the spell has no effect. If the target is a creature, everything it is wearing and carrying changes size with it. Any item dropped by an affected creature returns to normal size at once.\n\n**Enlarge.** The target's size doubles in all dimensions, and its weight is multiplied by eight. This growth increases its size by one category -- from Medium to Large, for example. If there isn't enough room for the target to double its size, the creature or object attains the maximum possible size in the space available. Until the spell ends, the target also has advantage on Strength checks and Strength saving throws. The target's weapons also grow to match its new size. While these weapons are enlarged, the target's attack with them deal 1d4 extra damage.\n\n**Reduce.** The target's size is halved in all dimensions, and its weight is reduced to one-eighth of normal. This reduction decreases its size by one category -- from Medium to Small, for example. Until the spell ends, the target also has disadvantage on Strength checks and Strength saving throws. The target's weapons also shrink to match its new size. While these weapons are reduced, the target's attacks with them deal 1d4 less damage (this can't reduce the damage below 1)."
		},
		{
			"name": "Ensnaring Strike",
			"level": 1,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "unknown",
				"text": "Attack target"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "STR"
			},
			"damage-type": "Piercing",
			"damage-heal": "DAM: 1d6 a turn",
			"sourcebook": "PHB",
			"page": "237",
			"additional-detail": "Restrain target. Large and bigger creatures have advantage to save.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": [
				"ancients"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a weapon attack before this spell ends, a writhing mass of thorny vines appears at the point of impact, and the target must succeed on a Strength saving throw or be restrained by the magical vines until the spell ends. A Large or larger creature has advantage on this saving throw. If the target succeeds on the save, the vines shrivel away.\n\nWhile restrained by this spell, the target takes 1d6 piercing damage at the start of each of its turns. A creature restrained by the vines or one that can touch a creature can use its action to make a Strength check against your spell save DC. On a success, the target is freed.\n\n**At Higher Levels.** If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
		},
		{
			"name": "Entangle",
			"level": 1,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "ft. square",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "STR"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "238",
			"additional-detail": "Creatures become restrained.Use action to use STR against spell DC to escape.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Grasping weeds and vines sprout from the ground in a 20-foot square starting form a point within range. For the duration, these plants turn the ground in the area into difficult terrain.\n\nA creature in the area when you cast the spell must succeed on a Strength saving throw or be restrained by the entangling plants until the spell ends. A creature restrained by the plants can use its action to make a Strength check against your spell save DC. On a success, it frees itself.\n\nWhen the spell ends, the conjured plants wilt away."
		},
		{
			"name": "Enthrall",
			"level": 2,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "unknown",
				"text": "Any targets in range"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "238",
			"additional-detail": "Disadvantage to see anybody but you; attacked ones have advantage to save.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "You weave a distracting string of words, causing creatures of your choice that you can see within range and that can hear you to make a Wisdom saving throw. Any creature that can't be charmed succeeds on this saving throw automatically, and if you or your companions are fighting a creature, it has advantage on the save. On a failed save, the target has disadvantage on Wisdom (Perception) checks made to perceive any creature other than you until the spell ends or until the target can no longer hear you. The spell ends if you are incapacitated or can no longer speak."
		},
		{
			"name": "Etherealness",
			"level": 7,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "238",
			"additional-detail": "Become ethereal.  Move up/down at half speed.  Can't see past 60 ft.",
			"per-higher-spell-level": "8th:3 targets;9th: 6 targets",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You step into the border regions of the Ethereal Plane, in the area where it overlaps with your current plane. You remain in the Border Ethereal for the duration or until you use your action to dismiss the spell. During this time, you can move in any direction. If you move up or down, every foot of movement costs an extra foot. You can see and hear the plane you originated from, but everything there looks gray, and you can't see anything more than 60 feet away.\n\nWhile on the Ethereal Plane, you can only affect and be affected by other creatures on that plane. Creatures that aren't on the Ethereal Plane can't perceive you and can't interact with you, unless a special ability or magic has given them the ability to do so.\n\nYou ignore all objects and effects that aren't on the Ethereal Plane, allowing you to move through objects you perceive on the plane you originated from.\n\nWhen the spell ends, you immediately return to the plan you originated from in the spot you currently occupy.  If you occupy the same spot as a solid object or creature when this happens, you are immediately shunted to the nearest unoccupied space that you can occupy and take force damage equal to twice the number of feet you are moved.\n\nThis spell has no effect if you cast it while you are on the Ethereal Plane or a plane that doesn't border it, such as one of the Outer Planes.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 8th level or higher, you can target up to three willing creatures (including you) for each slot level above 7th. The creatures must be within 10 feet of you when you cast the spell."
		},
		{
			"name": "Evard's Black Tentacles",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "ft. square",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of octopus temtacle",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "DEX while in area (Fail)"
			},
			"damage-type": "Bludgeoning",
			"damage-heal": "DAM: 3d6",
			"sourcebook": "PHB",
			"page": "238",
			"additional-detail": "Also restrained. Restrained take DAM every turn. STR/DEX check to get free.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Squirming, ebony tentacles fill a 20-foot square on ground that you can see within range. For the duration, these tentacles turn the ground in the area into difficult terrain.\n\nWhen a creature enters the affected area for the first time on a turn or starts its turn there, the creature must succeed on a Dexterity saving throw or take 3d6 bludgeoning damage and be restrained by the tentacles until the spell ends. A creature that starts its turn in the area and is already restrained by the tentacles takes 3d6 bludgeoning damage.\n\nA creature restrained by the tentacles can use its action to make a Strength or Dexterity check (its choice) against your spell save DC. On a success, it frees itself."
		},
		{
			"name": "Expeditious Retreat",
			"level": 1,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "238",
			"additional-detail": "You can take Dash as a bonus action until spell ends.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "This spell allows you to move at an incredible pace. When you cast this spell, and then as a bonus action on each of your turns until the spell ends, you can take the Dash action."
		},
		{
			"name": "Eyebite",
			"level": 6,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "creature within 60 ft.",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "238",
			"additional-detail": "Affect targets negatively.  New target each turn.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "For the spell's duration, your eyes become an inky void imbued with dread power. One creature of your choice within 60 feet of you that you can see must succeed on a Wisdom saving throw or be affected by one of the following effects of your choice for the duration. On each of your turns until the spell ends, you can use your action to target another creature but can't target a creature again if it has succeeded on a saving throw against this casting of *eyebite*.\n\n**Asleep.** The target falls unconscious. It wakes up if it takes any damage or if another creature uses its action to shake the sleeper awake.\n\n**Panicked.** The target is frightened of you. On each of its turns, the frightened creature must take the Dash action and move away from you by the safest and shortest available route, unless there is nowhere to move. If the target moves to a place at least 60 feet away from you where it can no longer see you, this effect ends.\n\n**Sickened.** The target has disadvantage on attack rolls and ability checks. At the end of each of its turns, it can make another Wisdom saving throw. If it succeeds, the effect ends."
		},
		{
			"name": "Fabricate",
			"level": 4,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. cube",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "239",
			"additional-detail": "Convert raw materials into object no bigger than 5 ft. cube.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You convert raw materials into products of the same material. For example, you can fabricate a wooden bridge from a clump of trees, a rope from a patch of hemp, and clothes from flax or wool.\n\nChoose raw materials that you can see within range. You can fabricate a Large or smaller object (contained within a 10-foot cube, or eight connected 5-foot cubes), given a sufficient quantity of raw material. If you are working with metal, stone, or another mineral substance, however, the fabricated object can be no larger than Medium (contained within a single 5-foot cube). The quality of objects made by the spell is commensurate with the quality of the raw materials.\n\nCreatures or magic items can't be created or transmuted by this spell. You also can't use it to create items that ordinarily require a high degree of craftsmanship, such as jewelry, weapons, glass, or armor, unless you have proficiency with the type of artisan's tools used to craft such objects."
		},
		{
			"name": "Faerie Fire",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. cube",
				"size": 20
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "DEX (No Light)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "239",
			"additional-detail": "Objects/creatures in cube are outlined in light and are attacked with advantage.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"light"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Each object in a 20-foot cube within range is outlined in blue, green, or violet light (your choice). Any creature in the area when the spell is cast is also outlined in light if it fails a Dexterity saving throw. For the duration, objects and affected creatures shed dim light in a 10-foot radius.\n\nAny attack roll against an affected creature or object has advantage if the attacker can see it, and the affected creature or object can't benefit from being invisible."
		},
		{
			"name": "False Life",
			"level": 1,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "alcohol or distilled spirits",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "239",
			"additional-detail": "You gain 1d4+4 temp HP.",
			"per-higher-spell-level": "Extra 5 temp HP.",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Bolstering yourself with a necromantic facsimile of life, you gain 1d4 + 4 temporary hit points for the duration.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you gain 5 additional temporary hit points for each slot level above 1st."
		},
		{
			"name": "Fear",
			"level": 3,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cone",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "white feather or hen heart",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "239",
			"additional-detail": "Targets drop everything and use Dash to run away. WIS save once out of sight.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You project a phantasmal image of a creature’s worst fears. Each creature in a 30-foot cone must succeed on a Wisdom saving throw or drop whatever it is holding and become frightened for the duration.\n\nWhile frightened by this spell, a creature must take the Dash action and move away from you by the safest available route on each of its turns, unless there is nowhere to move. If the creature ends its turn in a location where it doesn’t have line of sight to you, the creature can make a Wisdom saving throw. On a successful save, the spell ends for that creature."
		},
		{
			"name": "Feather Fall",
			"level": 1,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "reaction",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "falling creatures-less-than",
				"size": 5
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "small feather or piece of down",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "239",
			"additional-detail": "Targets' descent slows to 60 ft. per round, takes no DAM, and can land on feet.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Choose up to five falling creatures within range. A falling creature's rate of descent slows to 60 feet per round until the spell ends. If the creature lands before the spell ends, it takes no falling damage and can land on its feet, and the spell ends for that creature."
		},
		{
			"name": "Feeblemind",
			"level": 8,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "clay,crystal,or mineral spheres",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "INT (DMG, but no INT effect)"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 4d6",
			"sourcebook": "PHB",
			"page": "239",
			"additional-detail": "Creature INT and CHA scores become 1.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You blast the mind of a creature that you can see within range, attempting to shatter its intellect and personality. The target takes 4d6 psychic damage and must make an Intelligence saving throw.\n\nOn a failed save, the creature's Intelligence and Charisma scores become 1. The creature can't cast spells, activate magic items, understand language, or communicate in any intelligible way. The creature can, however, identify its friends, follow them, and even protect them.\n\nAt the end of every 30 days, the creature can repeat its saving throw against this spell. If it succeeds on its saving throw, the spell ends.\n\nThe spell can also be ended by _[greater restoration](../greater-restoration/ \"greater restoration (lvl 5)\")_, _[heal](../heal/ \"heal (lvl 6)\")_, or _[wish](../wish/ \"wish (lvl 9)\")_."
		},
		{
			"name": "Feign Death",
			"level": 3,
			"school": "Necromancy",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of graveyard dirt",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "240",
			"additional-detail": "Creature appears dead.  Resists all non-psychic DMG. Disease/poison delayed.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a willing creature and put it into a cataleptic state that is indistinguishable from death.\n\nFor the spell’s duration, or until you use an action to touch the target and dismiss the spell, the target appears dead to all outward inspection and to spells used to determine the target’s status. The target is blinded and incapacitated, and its speed drops to 0. The target has resistance to all damage except psychic damage. If the target is diseased or poisoned when you cast the spell, or becomes diseased or poisoned while under the spell’s effect, the disease and poison have no effect until the spell ends."
		},
		{
			"name": "Find Familiar",
			"level": 1,
			"school": "Conjuration",
			"ritual": "Ritual",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "CHARCOAL,INCENSE,HERBS",
			"cost": "10 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "240",
			"additional-detail": "Gain the service of a familiar.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You gain the service of a familiar, a spirit that takes an animal form you choose: bat, cat, crab, frog (toad), hawk, lizard, octopus, owl, poisonous snake, fish (quipper), rat, raven, sea horse, spider, or weasel. Appearing in an unoccupied space within range, the familiar has the statistics of the chosen form, though it is a celestial, fey, or fiend (your choice) instead of a beast.\n\nYour familiar acts independently of you, but it always obeys your commands. In combat, it rolls its own initiative and acts on its own turn. A familiar can't attack, but it can take other actions as normal.\n\nWhen the familiar drops to 0 hit points, it disappears, leaving behind no physical form. It reappears after you cast this spell again.\n\nWhile your familiar is within 100 feet of you, you can communicate with it telepathically. Additionally, as an action, you can see through your familiar's eyes and hear what it hears until the start of your next turn, gaining the benefits of any special senses that the familiar has. During this time, you are deaf and blind with regard to your own senses.\n\nAs an action, you can temporarily dismiss your familiar. It disappears into a pocket dimension where it awaits your summons. Alternatively, you can dismiss it forever. As an action while it is temporarily dismissed, you can cause it to reappear in any unoccupied space within 30 feet of you.\n\nYou can't have more than one familiar at a time. If you cast this spell while you already have a familiar, you instead cause it to adopt a new form. Choose one of the forms from the above list. Your familiar transforms into the chosen creature.\n\nFinally, when you cast a spell with a range of touch, your familiar can deliver the spell as if it had cast the spell. Your familiar must be within 100 feet of you, and it must use its reaction to deliver the spell when you cast it. If the spell requires an attack roll, you use your action modifier for the roll."
		},
		{
			"name": "Find Steed",
			"level": 2,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "240",
			"additional-detail": "Summons a spirit in the form of a steed.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You summon a spirit that assumes the form of an unusually intelligent, strong, and loyal steed, creating a long-lasting bond with it. Appearing in an unoccupied space within range, the steed takes on a form that you choose, such as a warhorse, a pony, a camel, an elk, or a mastiff. (Your DM might allow other animals to be summoned as steeds.) The steed has the statistics of the chosen form, though it is a celestial, fey, or fiend (your choice) instead of its normal type. Additionally, if your steed has an Intelligence of 5 or less, its Intelligence becomes 6, and it gains the ability to understand one language of your choice that you speak.\n\nYour steed serves you as a mount, both in combat and out, and you have an instinctive bond with it that allows you to fight as a seamless unit. While mounted on your steed, you can make any spell you cast that targets only you also target your steed.\n\nWhen the steed drops to 0 hit points, it disappears, leaving behind no physical form. You can also dismiss your steed at any time as an action, causing it to disappear. In either case, casting this spell again summons the same steed, restored to its hit point maximum.\n\nWhile your steed is within 1 mile of you, you can communicate with it telepathically.\n\nYou can't have more than one steed bonded by this spell at a time. As an action, you can release the steed from its bond at any time, causing it to disappear."
		},
		{
			"name": "Find the Path",
			"level": 6,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "diviner tools,object from target",
			"cost": "100 gp",
			"concentration": true,
			"duration": {
				"type": "day",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "240",
			"additional-detail": "Find the shortest, most direct route to a place you are familiar with.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell allows you to find the shortest, most direct physical route to a specific fixed location that you are familiar with on the same plane of existence. If you name a destination on another plan of existence, a destination that moves (such as a mobile fortress), or a destination that isn't specific (such as \"a green dragon's lair\"), the spell fails.\n\nFor the duration, as long as you are on the same plane of existence as the destination, you know how far it is and in what direction it lies. While you are traveling there, whenever you are presented with a choice of paths along the way, you automatically determine which path is the shortest and most direct route (but not necessarily the safest route) to the destination."
		},
		{
			"name": "Find Traps",
			"level": 2,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "Any trap in range"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "241",
			"additional-detail": "Sense the presence (not location) of any magical or mundane trap nearby.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You sense the presence of any trap within range that is within line of sight. A trap, for the purpose of this spell, includes anything that would inflict a sudden or unexpected effect you consider harmful or undesirable, which was specifically intended as such by its creator. Thus, the spell would sense an area affected by the *[alarm](../alarm/ \"alarm (lvl 1)\")* spell, a *[glyph of warding](../glyph-of-warding/ \"glyph of warding (lvl 3)\")*, or a mechanical pit trap, but it would not reveal a natural weakness in the floor, an unstable ceiling, or a hidden sinkhole.\n\nThis spell merely reveals that a trap is present. You don't learn the location of each trap, but you do learn the general nature of the danger posed by a trap you sense."
		},
		{
			"name": "Finger of Death",
			"level": 7,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 7d8+30",
			"sourcebook": "PHB",
			"page": "241",
			"additional-detail": "Humanoids killed rise as a zombie next turn permanently under your control.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You send negative energy coursing through a creature that you can see within range, causing it searing pain. The target must make a Constitution saving throw. It takes 7d8 + 30 necrotic damage on a failed save, or half as much damage on a successful one.\n\nA humanoid killed by this spell rises at the start of your next turn as a zombie that is permanently under your command, following your verbal orders to the best of its ability."
		},
		{
			"name": "Fire Bolt",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creature/object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 1d10",
			"sourcebook": "PHB",
			"page": "242",
			"additional-detail": "DAM at 5th level: 2d10, at 11th level: 3d10, at 17th level: 4d10.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You hurl a mote of fire at a creature or object within range. Make a ranged spell attack against the target. On a hit, the target takes 1d10 fire damage. A flammable object hit by this spell ignites if it isn't being worn or carried. This spell’s damage increases by 1d10 when you reach 5th level (2d10), 11th level (3d10), and 17th level (4d10)."
		},
		{
			"name": "Fire Shield",
			"level": 4,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of phosphorous or a firefly",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Fire/Cold",
			"damage-heal": "DAM: 2d8",
			"sourcebook": "PHB",
			"page": "242",
			"additional-detail": "Choose warm or chill shield. Melee attackers take DMG. Light out 10 ft./20 ft.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Thin and wispy flames wreathe your body for the duration, shedding bright light in a 10-foot radius and dim light for an additional 10 feet, You can end the spell early by using an action to dismiss it.\n\nThe flames provide you with a warm shield or a chill shield, as you choose. The warm shield grants you resistance to cold damage, and the chill shield grants you resistance to fire damage.\n\nIn addition, whenever a creature within 5 feet of you hits you with a melee attack, the shield erupts with flame. The attacker takes 2d8 fire damage from a warm shield, or 2d8 cold damage from a cold shield."
		},
		{
			"name": "Fire Storm",
			"level": 7,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "unknown",
				"text": "<= ten 10 ft. cubes"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 7d10",
			"sourcebook": "PHB",
			"page": "242",
			"additional-detail": "Each cube must face at least one other cube. Can choose not to affect plants.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A storm made up of sheets of roaring flame appears in a location you choose within range. The area of the storm consists of up to ten 10-foot-cubes, which you can arrange as you wish. Each cube must have at least one face adjacent to the face of another cube. Each creature in the area must make a Dexterity saving throw. It takes 7d10 fire damage on a failed save, or half as much damage on a successful one.\n\nThe fire damages objects in the area and ignites flammable objects that aren't being worn or carried. If you choose, plant life in the area is unaffected by this spell."
		},
		{
			"name": "Fireball",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "tiny ball of guano and sulfur",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 8d6",
			"sourcebook": "PHB",
			"page": "241",
			"additional-detail": "Fire spreads around corners and ignites flammable objects.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": [
				"light"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A bright streak flashes from your pointing finger to a point you choose within range and then blossoms with a low roar into an explosion of flame. Each creature in a 20-foot-radius sphere centered on that point must make a Dexterity saving throw. A target takes 8d6 fire damage on a failed save, or half as much damage on a successful one.\n\nThe fire spreads around corners. It ignites flammable objects in the area that aren't being worn or carried.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot level above 3rd."
		},
		{
			"name": "Flame Blade",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "sumac leaf",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 3d6",
			"sourcebook": "PHB",
			"page": "242",
			"additional-detail": "Create fiery scimitar that sheds bright light 10ft. and dim light for another 10ft.",
			"per-higher-spell-level": "Extra 1d6 DAM per 2 levels.",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You evoke a fiery blade in your free hand. The blade is similar in size and shape to a scimitar, and it lasts for the duration. If you let go of the blade, it disappears, but you can evoke the blade again as a bonus action.\n\nYou can use your action to make a melee spell attack with the fiery blade. On a hit, the target takes 3d6 fire damage.\n\nThe flaming blade sheds bright light in a 10-foot radius and dim light for an additional 10 feet.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for every two slot levels above 2nd."
		},
		{
			"name": "Flame Strike",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. high 10 ft. rad. cylinder",
				"size": 40
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of sulfur",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire + Radiant",
			"damage-heal": "DAM: 4d6+4d6",
			"sourcebook": "PHB",
			"page": "242",
			"additional-detail": "Creatures take fire and radiant damage.",
			"per-higher-spell-level": "1d6 DAM fire OR radiant",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"devotion"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A vertical column of divine fire roars down from the heavens in a location you specify. Each creature in a 10-foot radius, 40-foot-high cylinder centered on a point within range must make a Dexterity saving throw. A creature takes 4d6 fire damage and 4d6 radiant damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the fire damage or the radiant damage (your choice) increases by 1d6 for each slot level above 5th."
		},
		{
			"name": "Flaming Sphere",
			"level": 2,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. diameter sphere",
				"size": 5
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "tallow, brimstone, iron powder",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 2d6",
			"sourcebook": "PHB",
			"page": "242",
			"additional-detail": "Creatures next to spheres at end of turn take DAM. Move spheres 30 ft.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": [
				"light"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A 5-foot-diameter sphere of fire appears in an unoccupied space of your choice within range and lasts for the duration. Any creature that ends its turn within 5 feet of the sphere must make a Dexterity saving throw. The creature takes 2d6 fire damage on a failed save, or half as much damage on a successful one.\n\nAs a bonus action, you can move the sphere up to 30 feet. If you ram the sphere into a creature, that creature must make the saving throw against the sphere's damage, and the sphere stops moving this turn.\n\nWhen you move the sphere, you can direct it over barriers up to 5 feet tall and jump it across pits up to 10 feet wide. The sphere ignites flammable objects not being worn or carried, and it sheds bright light in a 20-foot radius and dim light for an additional 20 feet.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d6 for each slot level above 2nd."
		},
		{
			"name": "Flesh to Stone",
			"level": 6,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of lime, water, and earth",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CON"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "243",
			"additional-detail": "Restrained on first fail. Petrified after 3 fails.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You attempt to turn one creature that you can see within range into stone. If the target's body is made of flesh, the creature must make a Constitution saving throw. On a failed save, it is restrained as its flesh begins to harden. On a successful save, the creature isn't affected.\n\nA creature restrained by this spell must make another Constitution saving throw at the end of each of its turns. If it successfully saves against this spell three times, the spell ends. If it fails saves three times, it is turned to stone and subjected to the petrified condition for the duration. The successes and failures don't need to be consecutive; keep track of both until the target collects three of a kind.\n\nIf the creature is physically broken while petrified, it suffers from similar deformities if it reverts to its original state.\n\nIf you maintain your concentration on this spell for the entire possible duration, the creature is turned to stone until the effect is removed."
		},
		{
			"name": "Fly",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bird's wing feather",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "243",
			"additional-detail": "Target gains fly (60 ft.).  Fall if spell ends while in air.",
			"per-higher-spell-level": "One additional creature.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You touch a willing creature. The target gains a flying speed of 60 feet for the duration. When the spell ends, the target falls if it is still aloft, unless it can stop the fall.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, you can target one additional creature for each slot level above 3rd."
		},
		{
			"name": "Fog Cloud",
			"level": 1,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "243",
			"additional-detail": "Creates a foggy sphere.  Can be banished by moderate wind.",
			"per-higher-spell-level": "Increase radius by 20 ft.",
			"bard": false,
			"cleric": [
				"tempest"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a 20-foot-radius sphere of fog centered on a point within range. The sphere spreads around corners, and its area is heavily obscured. It lasts for the duration or until a wind of moderate or greater speed (at least 10 miles per hour) disperses it.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the radius of the fog increases by 20 feet for each slot level above 1st."
		},
		{
			"name": "Forbiddance",
			"level": 6,
			"school": "Abjuration",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "40,000 sq. ft, 30 ft. high"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "holy water,incense,ruby powder",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "day",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Radiant or Necrotic",
			"damage-heal": "DAM: 5d10",
			"sourcebook": "PHB",
			"page": "243",
			"additional-detail": "Can't teleport/gate into area. A creature type you choose takes DMG in area.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a ward against magical travel that protects up to 40,000 square feet of floor space to a height of 30 feet above the floor. For the duration, creatures can't teleport into the area or use portals, such as those created by the *[gate](../gate/ \"gate (lvl 9)\")* spell, to enter the area. The spell proofs the area against planar travel, and therefore prevents creatures from accessing the area by way of the Astral Plane, Ethereal Plane, Feywild, Shadowfell, or the *[plane shift](../plane-shift/ \"plane shift (lvl 7)\")* spell.\n\nIn addition, the spell damages types of creatures that you choose when you cast it. Choose one or more of the following: celestials, elementals, fey, fiends, and undead. When a chosen creature enters the spell's area for the first time on a turn or starts its turn there, the creature takes 5d10 radiant or necrotic damage (your choice when you cast this spell).\n\nWhen you cast this spell, you can designate a password. A creature that speaks the password as it enters the area takes no damage from the spell.\n\nThe spell's area can't overlap with the area of another *forbiddance* spell. If you cast *forbiddance* every day for 30 days in the same location, the spell lasts until it is dispelled, and the material components are consumed on the last casting."
		},
		{
			"name": "Forcecage",
			"level": 7,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 100
			},
			"target-area": {
				"type": "ft. square or 10 ft. cube",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "ruby dust",
			"cost": "1500 gp",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Details."
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "243",
			"additional-detail": "Creatures stuck in cage can only leave using magic after CHA save.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "An immobile, invisible, cube-shaped prison composed of magical force springs into existence around an area you choose within range. The prison can be a cage or a solid box, as you choose.\n\nA prison in the shape of a cage can be up to 20 feet on a side and is made from 1/2-inch diameter bars spaced 1/2-inch apart.\n\nA prison in the shape of a box can be up to 10 feet on a size, creating a solid barrier that prevents any matter from passing through it and blocking any spells cast into or out from the area.\n\nWhen you cast the spell, any creature that is completely inside the cage's area is trapped. Creatures only partially within the area, or those too large to fit inside the area, are pushed away from the center of the area until they are completely outside the area.\n\nA creature inside the cage can't leave it by nonmagical means. If the creature tries to use teleportation or interplanar travel to leave the cage, it must first make a Charisma saving throw. On a success, the creature can use that magic to exit the cage. On a failure, the creature can't exit the cage and wastes the use of the spell or effect. The cage also extends into the Ethereal Plane, blocking ethereal travel.\n\nThis spell can't be dispelled by _[dispel magic](../dispel-magic/ \"dispel magic (lvl 3)\")_."
		},
		{
			"name": "Foresight",
			"level": 9,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "hummingbird feather",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "244",
			"additional-detail": "Not surprised. Advantage:attacks,checks,saves. Disadvantage getting attacked.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You touch a willing creature and bestow a limited ability to see into the immediate future. For the duration the target can't be surprised and has advantage on attack rolls, ability checks, and saving throws. Additionally, other creatures have disadvantage on attack rolls against the target for the duration.\n\nThis spell immediately ends if you cast it again before its duration ends."
		},
		{
			"name": "Freedom of Movement",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "leather strap around arm",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "244",
			"additional-detail": "Immune to difficult terrain,slow,paralyze,restrain. Spend 5ft to escape restrain.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": [
				"devotion"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a willing creature. For the duration, the target's movement is unaffected by difficult terrain, and spells and other magical effects can neither reduce the target's speed nor cause the target to be paralyzed or restrained.\n\nThe target can also spend 5 feet of movement to automatically escape from nonmagical restraints, such as manacles or a creature that has it grappled. Finally, being underwater imposes no penalties on the target's movement or attacks."
		},
		{
			"name": "Friends",
			"level": 0,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "non-hostile creature",
				"size": 1
			},
			"v": false,
			"s": true,
			"m": true,
			"components": "makeup applied to face",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "244",
			"additional-detail": "Advantage on CHA checks to target, who knows magic used once spell ends.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "For the duration, you have advantage on all Charisma checks directed at one creature of your choice that isn't hostile toward you. When the spell ends, the creature realizes that you have used magic to influence its mood and becomes hostile toward you. A creature prone to violence might attack you. Another creature might seek retribution in other ways (at the DM's discretion), depending on the nature of your interaction with it."
		},
		{
			"name": "Gaseous Form",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of gauze and wisp of smoke",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "244",
			"additional-detail": "Cloud form. Fly(10ft.). Resist nonmagical DMG. STR/DEX/CON save advantage.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"underdark"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You transform a willing creature you touch, along with everything it’s wearing and carrying, into a misty cloud for the duration. The spell ends if the creature drops to 0 hit points. An incorporeal creature isn’t affected.\n\nWhile in this form, the target’s only method of movement is a flying speed of 10 feet. The target can enter and occupy the space of another creature. The target has resistance to nonmagical damage, and it has advantage on Strength, Dexterity, and Constitution saving throws. The target can pass through small holes, narrow openings, and even mere cracks, though it treats liquids as though they were solid surfaces. The target can't fall and remains hovering in the air even when stunned or otherwise incapacitated.\n\nWhile in the form of a misty cloud, the target can’t talk or manipulate objects, and any objects it w as carrying or holding can’t be dropped, used, or otherwise interacted with. The target can’t attack or cast spells."
		},
		{
			"name": "Gate",
			"level": 9,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "unknown",
				"text": "5-20 ft. diameter gate"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "diamond",
			"cost": "5000 gp",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "244",
			"additional-detail": "Create portal to precise location on another plane or near a specific person.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You conjure a portal linking an unoccupied space you can see within range to a precise location on a different plane of existence. The portal is a circular opening, which you can make 5 to 20 feet in diameter. You can orient the portal in any direction you choose. The portal lasts for the duration.\n\nThe portal has a front and a back on each plane where it appears. Travel through the portal is possible only by moving through its front. Anything that does so is instantly transported to the other plane, appearing in the unoccupied space nearest to the portal.\n\nDeities and other planar rulers can prevent portals created by this spell from opening in their presence or anywhere within their domains.\n\nWhen you cast this spell, you can speak the name of a specific creature (a pseudonym, title or nickname doesn't work). If that creature is on a plane other than the one you are on, the portal opens in the named creature's immediate vicinity and draws the creature through it to the nearest unoccupied space on your side of the portal. You gain no special power over the creature, and it is free to act as the DM deems appropriate. It might leave, attack you or help you."
		},
		{
			"name": "Geas",
			"level": 5,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 30
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "See Details.",
			"damage-heal": "See Details.",
			"sourcebook": "PHB",
			"page": "244",
			"additional-detail": "Target must perform task you set. 5d10 psychic DAM whenever it disobeys.",
			"per-higher-spell-level": "7th: lasts 1 year;9th: forever",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You place a magical command on a creature that you can see within range, forcing it to carry out some service or refrain from some action or course of activity as you decide. If the creature can understand you, it must succeed on a Wisdom saving throw or become charmed by you for the duration. While the creature is charmed by you, it takes 5d10 psychic damage each time it acts in a manner directly counter to your instructions, but no more than once each day. A creature that can't understand you is unaffected by the spell.\n\nYou can issue any command you choose, short of an activity that would result in certain death. Should you issue a suicidal command, the spell ends. \n\nYou can end the spell early by using an action to dismiss it. A *[remove curse](../remove-curse/ \"remove curse (lvl 3)\")*, *[greater restoration](../greater-restoration/ \"greater restoration (lvl 5)\")*, or *[wish](../wish/ \"wish (lvl 9)\")* spell also ends it.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th or 8th level, the duration is 1 year. When you cast this spell using a spell slot of 9th level, the spell lasts until it is ended by one of the spells mentioned above."
		},
		{
			"name": "Gentle Repose",
			"level": 2,
			"school": "Necromancy",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "corpse",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "salt and 1 cp on each eye",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "245",
			"additional-detail": "Preserves corpse.  Extends time limit of Raise Dead spell.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a corpse or other remains. For the duration, the target is protected from decay and can’t become undead.\n\nThe spell also effectively extends the time limit on raising the target from the dead, since days spent under the influence of this spell don’t count against the time limit of spells such as *[raise dead](../raise-dead/ \"raise dead (lvl 5)\")*."
		},
		{
			"name": "Giant Insect",
			"level": 4,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "245",
			"additional-detail": "Turn insects into giant insects that obey your commands.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You transform up to ten centipedes, three spiders, five wasps, or one scorpion within range into versions of their natural forms for the duration. A centipede becomes a giant centipede, a spider becomes a giant spider, a wasp becomes a giant wasp, a wasp becomes a giant wasp, and a scorpion becomes a giant scorpion. \n\nEach creature obeys your verbal commands, and in combat they act on your turn each round. The DM has the statistics for these creatures and resolves their actions and moment.\n\nA creature remains in its giant size for the duration until it drops to 0 hit points, or until you use an action to dismiss the effect on it.\n\nThe DM might allow you to choose different targets. for example, if you transform a bee, its giant version might have the same stats as a giant wasp."
		},
		{
			"name": "Glibness",
			"level": 8,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "245",
			"additional-detail": "Can replace CHA check rolls with a 15. Spells always detect you telling truth.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "Until the spell ends, when you make a Charisma check, you can replace the number you roll with a 15. Additionally, no matter what you say, magic that would determine if you are telling the truth indicates that you are being truthful."
		},
		{
			"name": "Globe of Invulnerability",
			"level": 6,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "sphere",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "glass or crystal bead",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "245",
			"additional-detail": "Spells <= 5th level cannot affect those within the globe.",
			"per-higher-spell-level": "1 higher spell level blocked.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "An immobile, faintly shimmering barrier springs into existence in a 10-foot radius around you and remains for the duration.\n\nAny spell of 5th level or lower cast from outside the barrier can’t affect creatures or objects within it, even if the spell is cast using a higher level spell slot. Such a spell can target creatures and objects within the barrier, but the spell has no effect on them. Similarly, the area within the barrier is excluded from the areas affected by such spells.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, the barrier blocks spells of one level higher for each slot level above 6th."
		},
		{
			"name": "Glyph of Warding",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "incense, DIAMOND POWDER",
			"cost": "200 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled_or_triggered"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "245",
			"additional-detail": "Create a magical trap.  See Sourcebook.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "When you cast this spell, you inscribe a glyph that harms other creatures, either upon a surface (such as a table or a section of floor or wall) or within an object that can be closed (such as a book, a scroll, or a treasure chest) to conceal the glyph. If you choose a surface, the glyph can cover an area of the surface no larger than 10 feet in diameter. If you choose an object, that object must remain in its place; if the object is moved more than 10 feet from where you cast this spell, the glyph is broken, and the spell ends without being triggered. \n\nThe glyph is nearly invisible and requires a successful Intelligence (Investigation) check against your spell save DC to be found. \n\nYou decide what triggers the glyph when you cast the spell. For glyphs inscribed on a surface, the most typical triggers include touching or standing on the glyph, removing another object covering the glyph, approaching within a certain distance of the glyph, or manipulating the object on which the glyph is inscribed. For glyphs inscribed within an object, the most common triggers include opening that object, approaching within a certain distance of the object, or seeing or reading the glyph. Once a glyph is triggered, this spell ends. \n\nYou can further refine the trigger so the spell activates only under certain circumstances or according to physical characteristics (such as height or weight), creature kind (for example, the ward could be set to affect aberrations or drow), or alignment. You can also set conditions for creatures that don’t trigger the glyph, such as those who say a certain password. \n\nWhen you inscribe the glyph, choose *explosive runes* or a *spell glyph*.\n \n**Explosive Runes.** When triggered, the glyph erupts with magical energy in a 20-foot-radius sphere centered on the glyph. The sphere spreads around corners. Each creature in the area must make a Dexterity saving throw. A creature takes 5d8 acid, cold, fire, lightning, or thunder damage on a failed saving throw (your choice when you create the glyph), or half as much damage on a successful one. \n\n**Spell Glyph.** You can store a prepared spell of 3rd level or lower in the glyph by casting it as part of creating the glyph. The spell must target a single creature or an area. The spell being stored has no immediate effect when cast in this way. When the glyph is triggered, the stored spell is cast. If the spell has a target, it targets the creature that triggered the glyph. If the spell affects an area, the area is centered on that creature. If the spell summons hostile creatures or creates harmful objects or traps, they appear as close as possible to the intruder and attack it. If the spell requires concentration, it lasts until the end of its full duration.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage of an *explosive runes* glyph increases by 1d8 for each slot level above 3rd. If you create a *spell glyph*, you can store any spell of up to the same level as the slot you use for the *glyph of warding*."
		},
		{
			"name": "Goodberry",
			"level": 1,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "sprig of mistletoe",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "246",
			"additional-detail": "Create <= 10 berries that HEAL 1 HP each. Expire after 24 hours.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Up to ten berries appear in your hand and are infused with magic for the duration. A creature can use its action to eat one berry. Eating a berry restores 1 hit point, and the berry provides enough nourishment to sustain a creature for a day.\n\nThe berries lose their potency if they have not been consumed within 24 hours of the casting of this spell."
		},
		{
			"name": "Grasping Vine",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "246",
			"additional-detail": "Create vine that lashes out 30 ft. away. Targets failing save pulled 20 ft. to vine.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You conjure a vine that sprouts from the ground in an unoccupied space of your choice that you can see within range. When you cast this spell, you can direct the vine to lash out at a creature within 30 feet of it that you can see. That creature must succeed on a Dexterity saving throw or be pulled 20 feet directly toward the vine.\n\nUntil the spell ends, you can direct the vine to lash out at the same creature or another one as a bonus action on each of your turns."
		},
		{
			"name": "Grease",
			"level": 1,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. square",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pork rind or butter",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "246",
			"additional-detail": "Creatures in area or entering area fall prone if they fail DEX save.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Slick grease covers the ground in a 10-foot square centered on a point within range and turns it into difficult terrain for the duration.\n\nWhen the grease appears, each creature standing in its area must succeed on a Dexterity saving throw or fall prone. A creature that enters the area or ends its turn there must also succeed on a Dexterity saving throw or fall prone."
		},
		{
			"name": "Greater Invisibility",
			"level": 4,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "Self or willing creature"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "246",
			"additional-detail": "Become invisible until spell ends.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": [
				"underdark"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You or a creature you touch becomes invisible until the spell ends. Anything the target is wearing or carrying is invisible as long as it is on the target’s person."
		},
		{
			"name": "Greater Restoration",
			"level": 5,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "DIAMOND DUST",
			"cost": "100 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "246",
			"additional-detail": "End a debilitating effect on target.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You imbue a creature you touch with positive energy to undo a debilitating effect. You can reduce the target’s exhaustion level by one, or end one of the following effects on the target:\n\n* One effect that charmed or petrified the target\n* One curse, including the target’s attunement to a cursed magic item\n* Any reduction to one of the target’s ability scores\n* One effect reducing the target’s hit point maximum"
		},
		{
			"name": "Guardian of Faith",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "DEX (No DAM)"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 20",
			"sourcebook": "PHB",
			"page": "246",
			"additional-detail": "Create spectral guardian that attacks hostiles. Leaves after dealing 60 DAM.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"devotion"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A Large spectral guardian appears and hovers for the duration in an unoccupied space of your choice that you can see within range. The guardian occupies that space and is indistinct except for a gleaming sword and shield emblazoned with the symbol of your deity.\n\nAny creature hostile to you that moves to a space within 10 feet of the guardian for the first time on a turn must succeed on a Dexterity saving throw. The creature takes 20 radiant damage on a failed save, or half as much damage on a successful one. The guardian vanishes when it has dealt a total of 60 damage."
		},
		{
			"name": "Guards and Wards",
			"level": 6,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "See sourcebook.",
			"cost": "10 gp",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "248",
			"additional-detail": "Protect an area of space.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a ward that protects up to 2,500 square feet of floor space (an area 50 feet square, or one hundred 5-foot squares or twenty-five 10-foot squares). The warded area can be up to 20 feet tall, and shaped as you desire. You can ward several stories of a stronghold by dividing the area among them, as long as you can walk into each contiguous area while you are casting the spell.\n\nWhen you cast this spell, you can specify individuals that are unaffected by any or all of the effects that you choose. You can also specify a password that, when spoken aloud, makes the speaker immune to these effects.\n\n*Guards and wards* creates the following effects within the warded area.\n\n**Corridors.** Fog fills all the warded corridors, making them heavily obscured. In addition, at each intersection or branching passage offering a choice of direction, there is a 50 percent chance that a creature other than you will believe it is going in the opposite direction from the one it chooses.\n\n**Doors.** All doors in the warded area are magically locked, as if sealed by an *[arcane lock](../arcane-lock/ \"arcane lock (lvl 2)\")* spell. In addition, you can cover up to ten doors with an illusion (equivalent to the illusory object function of the *[minor illusion](../minor-illusion/ \"minor illusion (cantrip)\")* spell) to make them appear as plain sections of wall.\n\n**Stairs.** Webs fill all stairs in the warded area from top to bottom, as the *[web](../web/ \"web (lvl 2)\")* spell. These strands regrow in 10 minutes if they are burned or torn away while guards and wars lasts.\n\n**Other Spell Effect.** You can place your choice of one of the following magical effects within the warded area of the stronghold.\n\n* Place *[dancing lights](../dancing-lights/ \"dancing lights (cantrip)\")* in four corridors. You can designate a simple program that the lights repeat as long as guards and wards lasts.\n* Place *[magic mouth](../magic-mouth/ \"magic mouth (lvl 2)\")* in two locations.\n* Place *[stinking cloud](../stinking-cloud/ \"stinking cloud (lvl 3)\")* in two locations. The vapors appear in the places you designate; They return within 10 minutes if dispersed by wind while *guards and wards* lasts.\n* Place a constant *[gust of wind](../gust-of-wind/ \"gust of wind (lvl 2)\")* in one corridor or room.\n* Place a *[suggestion](../suggestion/ \"suggestion (lvl 2)\")* in one location. You select an area of up to 5 feet square, and any creature that enters or passes through the area receives the suggestion mentally.\n\nThe whole warded area radiates magic. A *[dispel magic](../dispel-magic/ \"dispel magic (lvl 3)\")* cast on a specific effect, if successful, removes only that effect.\n\nYou can create a permanently guarded and warded structure by casting this spell there every day for one year."
		},
		{
			"name": "Guidance",
			"level": 0,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "248",
			"additional-detail": "Once, add 1d4 to an ability check.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch one willing creature. Once before the spell ends, the target can roll a d4 and add the number rolled to one ability check of its choice. It can roll the die before or after making the ability check. The spell then ends."
		},
		{
			"name": "Guiding Bolt",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 4d6",
			"sourcebook": "PHB",
			"page": "248",
			"additional-detail": "Next attack roll against target before end of your next turn has advantage.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A flash of light streaks toward a creature of your choice within range. Make a ranged spell attack against the target. On a hit, the target takes 4d6 radiant damage, and the next attack roll made against this target before the end of your next turn has advantage, thanks to the mystical dim light glittering on the target until then. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
		},
		{
			"name": "Gust of Wind",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. line 10 ft. wide",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "a legume seed",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "STR"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "248",
			"additional-detail": "Push targets 15 ft. in directon of wind. Creatures move half speed against wind.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"tempest"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A line of strong wind 60 feet long and 10 feet wide blasts from you in a direction you choose for the spell's duration. Each creature that starts its turn in the line must succeed on a Strength saving throw or be pushed 15 feet away from you in a direction following the line.\n\nAny creature in the line must spend 2 feet of movement for every 1 foot it moves when moving closer to you.\n\nThe gust disperses gas or vapor, and it extinguishes candles, torches, and similar unprotected flames in the area. It causes protected flames, such as those of lanterns, to dance wildly and has a 50 percent chance to extinguish them.\n\nAs a bonus action on each of your turns before the spell ends, you can change the direction in which the line blasts from you."
		},
		{
			"name": "Hail of Thorns",
			"level": 1,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Piercing",
			"damage-heal": "DAM: 1d10",
			"sourcebook": "PHB",
			"page": "249",
			"additional-detail": "Target hit by ranged attack and those adjacent who fail save hit by thorns.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a ranged weapon attack before this spell ends, this spell creates a rain of thorns that sprouts from your ranged weapon or ammunition. In addition to the normal effects of the attack, the target of the attack and each creature within 5 feet of it must make a Dexterity saving throw. A creature takes 1d10 piercing damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels.** If you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d10 for each slot level above 1st (to a maximum of 6d10)."
		},
		{
			"name": "Hallow",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "hours",
				"size": 24
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "HERBS, OIL, INCENSE",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "249",
			"additional-detail": "Infuse area with holy or unholy power.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a point and infuse an area around it with holy (or unholy) power. The area can have a radius up to 60 feet, and the spell fails if the radius includes an area already under the effect a *hallow* spell. The affected area is subject to the following effects. \n\nFirst, celestials, elementals, fey, fiends, and undead can’t enter the area, nor can such creatures charm, frighten, or possess creatures within it. Any creature charmed, frightened, or possessed by such a creature is no longer charmed, frightened, or possessed upon entering the area. You can exclude one or more of those types of creatures from this effect. \n\nSecond, you can bind an extra effect to the area. Choose the effect from the following list, or choose an effect offered by the DM. Some of these effects apply to creatures in the area; you can designate whether the effect applies to all creatures, creatures that follow a specific deity or leader, or creatures of a specific sort, such as orcs or trolls. When a creature that would be affected enters the spell’s area for the first time on a turn or starts its turn there, it can make a Charisma saving throw. On a success, the creature ignores the extra effect until it leaves the area.\n\n**Courage.** Affected creatures can’t be frightened while in the area. \n\n**Darkness.** Darkness fills the area. Normal light, as well as magical light created by spells of a lower level than the slot you used to cast this spell, can’t illuminate the area. \n\n**Daylight.** Bright light fills the area. Magical darkness created by spells of a lower level than the slot you used to cast this spell can’t extinguish the light. \n\n**Energy Protection.** Affected creatures in the area have resistance to one damage type of your choice, except for bludgeoning, piercing, or slashing. \n\n**Energy Vulnerability** Affected creatures in the area have vulnerability to one damage type of your choice, except for bludgeoning, piercing, or slashing. \n\n**Everlasting Rest** Dead bodies interred in the area can’t be turned into undead. \n\n**Extradimensional Interference.** Affected creatures can’t move or travel using teleportation or by extradimensional or interplanar means. \n\n**Fear.** Affected creatures are frightened while in the area. \n\n**Silence.** No sound can emanate from within the area, and no sound can reach into it. \n\n**Tongues.** Affected creatures can communicate with any other creature in the area, even if they don’t share a common language."
		},
		{
			"name": "Hallucinatory Terrain",
			"level": 4,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 300
			},
			"target-area": {
				"type": "ft. cube",
				"size": 150
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "stone, twig, bit of green plant",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "249",
			"additional-detail": "Make natural terrain seem like other terrain. Investigation check to disbelieve.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You make natural terrain in a 150-foot cube in range look, sound, and smell like some other sort of natural terrain. Thus, open fields or a road can be made to resemble a swamp, hill, crevasse, or some other difficult or impassable terrain. A pond can be made to seem like a grassy meadow, a precipice like a gentle slope, or a rock-strewn gully like a wide and smooth road. Manufactured structures, equipment, and creatures within the area aren’t changed in appearance.\n\nThe tactile characteristics of the terrain are unchanged, so creatures entering the area are likely to see through the illusion. If the difference isn’t obvious by touch, a creature carefully examining the illusion can attempt an Intelligence (Investigation) check against your spell save DC to disbelieve it. A creature who discerns the illusion for what it is, sees it as a vague image superimposed on the terrain."
		},
		{
			"name": "Harm",
			"level": 6,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 14d6",
			"sourcebook": "PHB",
			"page": "249",
			"additional-detail": "Max HP reduced by same amount as DAM. Target cannot fall below 1 HP.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You unleash a virulent disease on a creature that you can see within range. The target must make a Constitution saving throw. On a failed save, it takes 14d6 necrotic damage, or half as much damage on a successful save. The damage can’t reduce the target’s hit points below 1. If the target fails the saving throw, its hit point maximum is reduced for 1 hour by an amount equal to the necrotic damage it took. Any effect that removes a disease allows a creature’s hit point maximum to return to normal before that time passes."
		},
		{
			"name": "Haste",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "shaving of licorice root",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Doubles speed. +2 AC. Advantage on DEX saves. Additional action to Dash.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"grassland"
			],
			"paladin": [
				"vengeance"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Choose a willing creature that you can see within range. Until the spell ends, the target’s speed is doubled, it gains a +2 bonus to AC, it has advantage on Dexterity saving throws, and it gains an additional action on each of its turns. That action can be used only to take the Attack (one weapon attack only), Dash, Disengage, Hide, or Use an Object action.\n\nWhen the spell ends, the target can’t move or take actions until after its next turn, as a wave of lethargy sweeps over it."
		},
		{
			"name": "Heal",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "HEAL: 70",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Ends blindness, deafness, any diseases. No effect on constructs/undead.",
			"per-higher-spell-level": "Extra 10 HEAL.",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Choose a creature that you can see within range. A surge of positive energy washes through the creature, causing it to regain 70 hit points. This spell also ends blindness, deafness, and any diseases affecting the target. This spell has no effect on constructs or undead.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, the amount of healing increases by 10 for each slot level above 6th."
		},
		{
			"name": "Healing Word",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Target HEAL 1d4 + spellcasting ability. No effect on constructs/undead.",
			"per-higher-spell-level": "Extra 1d4 HEAL.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A creature of your choice that you can see within range regains hit points equal to 1d4 + your spellcasting ability modifier. This spell has no effect on undead or constructs.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the healing increases by 1d4 for each slot level above 1st."
		},
		{
			"name": "Heat Metal",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "metal object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of iron and a flame",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 2d8",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Heat metallic objects including weapons and armor.  See Sourcebook.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Choose a manufactured metal object, such as a metal weapon or a suit of heavy or medium metal armor, that you can see within range. You cause the object to glow red-hot. Any creature in physical contact with the object takes 2d8 fire damage when you cast the spell. Until the spell ends, you can use a bonus action on each of your subsequent turns to cause this damage again. \n\nIf a creature is holding or wearing the object and takes the damage from it, the creature must succeed on a Constitution saving throw or drop the object if it can. If it doesn’t drop the object, it has disadvantage on attack rolls and ability checks until the start of your next turn. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d8 for each slot level above 2nd."
		},
		{
			"name": "Hellish Rebuke",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "reaction",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature that damaged you",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 2d10",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Magical counterattack to taking damage.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "You point your finger, and the creature that damaged you is momentarily surrounded by hellish flames. The creature must make a Dexterity saving throw. It takes 2d10 fire damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d10 for each slot level above 1st."
		},
		{
			"name": "Heroes' Feast",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "feast goers-less-than",
				"size": 12
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "GEM--ENCRUSTED BOWL",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Cure:disease,poison.Immune:poison,fright.HP max +2d10,WIS save advantage.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You bring forth a great feast, including magnificent food and drink. The feast takes 1 hour to consume and disappears at the end of that time, and the beneficial effects don’t set in until this hour is over. Up to twelve other creatures can partake of the feast.\n\nA creature that partakes of the feast gains several benefits. The creature is cured of all diseases and poison, becomes immune to poison and being frightened, and makes all Wisdom saving throws with advantage. Its hit point maximum also increases by 2d10, and it gains the same number of hit points. These benefits last for 24 hours"
		},
		{
			"name": "Heroism",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "250",
			"additional-detail": "Immune to being frightened. Temp HP equal to casting ability modifier each turn.",
			"per-higher-spell-level": "1 additional creature.",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A willing creature you touch is imbued with bravery. Until the spell ends, the creature is immune to being frightened and gains temporary hit points equal to your spellcasting ability modifier at the start of each of its turns. When the spell ends, the target loses any remaining temporary hit points from this spell."
		},
		{
			"name": "Hex",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "petrified eye of a newt",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "251",
			"additional-detail": "Target takes 1d6 necrotic DAM when you hit it;disadvantage on ability of choice.",
			"per-higher-spell-level": "3rd: duration 8 hrs;5th 24 hrs",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "You place a curse on a creature that you can see within range. Until the spell ends, you deal an extra 1d6 necrotic damage to the target whenever you hit it with an attack. Also choose one ability when you cast the spell. The target has disadvantage on ability checks made with the chosen ability.\n\nIf the target drops to 0 hit points before this spell ends, you can use a bonus action on a subsequent turn of yours to curse a new creature.\n\nA *[remove curse](../remove-curse/)* cast on the target ends this spell early.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd or 4th level, you can maintain your concentration on the spell for up to 8 hours. When you use a spell slot of 5th level or higher, you can maintain your concentration on the spell for up to 24 hours."
		},
		{
			"name": "Hold Monster",
			"level": 5,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small straight piece of iron",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "251",
			"additional-detail": "Target is paralyzed. New saving throw at end of turn. Doesn't work on undead.",
			"per-higher-spell-level": "1 additional creature.",
			"bard": true,
			"cleric": [
				"war"
			],
			"druid": false,
			"paladin": [
				"vengeance"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Choose a creature that you can see within range. The target must succeed on a Wisdom saving throw or be paralyzed for the duration. This spell has no effect on undead. At the end of each of its turns, the target can make another Wisdom saving throw. On a success, the spell ends on the target.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, you can target one additional creature for each slot level above 5th. The creatures must be within 30 feet of each other when you target them."
		},
		{
			"name": "Hold Person",
			"level": 2,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "humanoid",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small straight piece of iron",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "251",
			"additional-detail": "Target is paralyzed. New saving throw at end of turn.",
			"per-higher-spell-level": "1 additional creature.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": [
				"vengeance"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Choose a humanoid that you can see within range. The target must succeed on a Wisdom saving throw or be paralyzed for the duration. At the end of each of its turns, the target can make another Wisdom saving throw. On a success, the spell ends on the target. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, you can target one additional humanoid for each slot level above 2nd. The humanoids must be within 30 feet of each other when you target them."
		},
		{
			"name": "Holy Aura",
			"level": 8,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "sphere",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "reliquary containing sacred relic",
			"cost": "1000 gp",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "251",
			"additional-detail": "Aura helps allies and hurts enemies.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Divine light washes out from you and coalesces in a soft radiance in a 30-foot radius around you. Creatures of your choice in that radius when you cast this spell shed dim light in a 5-foot radius and have advantage on all saving throws, and other creatures have disadvantage on attack rolls against them until the spell ends. In addition, when a fiend or an undead hits an affected creature with a melee attack, the aura flashes with brilliant light. The attacker must succeed on a Constitution saving throw or be blinded until the spell ends."
		},
		{
			"name": "Hunger of Hadar",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pickled octopus tentacle",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "251",
			"additional-detail": "Start turn in area: 2d6 cold DAM.End turn in area: DEX save or 2d6 acid DAM.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": false,
			"original-description": "You open a gateway to the dark between the stars, a region infested with unknown horrors. A 20-foot-radius sphere of blackness and bitter cold appears, centered on a point with range and lasting for the duration. This void is filled with a cacophony of soft whispers and slurping noises that can be heard up to 30 feet away. No light, magical or otherwise, can illuminate the area, and creatures fully within the area are blinded.\n\nThe void creates a warp in the fabric of space, and the area is difficult terrain. Any creature that starts its turn in the area takes 2d6 cold damage. Any creature that ends its turn in the area must succeed on a Dexterity saving throw or take 2d6 acid damage as milky, otherworldly tentacles rub against it."
		},
		{
			"name": "Hunter's Mark",
			"level": 1,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "251",
			"additional-detail": "Mark quarry. Extra 1d6 DAM on weapon hit. Advantage on rolls to find it.",
			"per-higher-spell-level": "3rd: duration 8hrs;5th: 24hrs",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": [
				"vengeance"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You choose a creature you can see within range and mystically mark it as your quarry. Until the spell ends, you deal an extra 1d6 damage to the target whenever you hit it with a weapon attack, and you have advantage on any Wisdom (Perception) or Wisdom (Survival) check you make to find it. If the target drops to 0 hit points before this spell ends, you can use a bonus action on a subsequent turn of yours to mark a new creature.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd or 4th level, you can maintain your concentration on the spell for up to 8 hours. When you use a spell slot of 5th level or higher, you can maintain your concentration on the spell for up to 24 hours."
		},
		{
			"name": "Hypnotic Pattern",
			"level": 3,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. cube",
				"size": 30
			},
			"v": false,
			"s": true,
			"m": true,
			"components": "glowing stick of incense",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "252",
			"additional-detail": "Creatures charmed, incapacitated, speed = 0. Spell ends on DAM or shaking.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You create a twisting pattern of colors that weaves through the air inside a 30-foot cube within range. The pattern appears for a moment and vanishes. Each creature in the area who sees the pattern must make a Wisdom saving throw. On a failed save, the creature becomes charmed for the duration. While charmed by this spell, the creature is incapacitated and has a speed of 0.\n\nThe spell ends for an affected creature if it takes any damage or if someone else uses an action to shake the creature out of its stupor."
		},
		{
			"name": "Ice Storm",
			"level": 4,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 300
			},
			"target-area": {
				"type": "ft. rad, 40ft. high cylinder",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of dust, drop of water",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Bludgeoning+Cold",
			"damage-heal": "DAM: 2d8+4d6",
			"sourcebook": "PHB",
			"page": "252",
			"additional-detail": "Storm's area of effect becomes difficult terrain until end of next turn.",
			"per-higher-spell-level": "Extra 1d8 bludgeoning DAM.",
			"bard": false,
			"cleric": [
				"tempest"
			],
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A hail of rock-hard ice pounds to the ground in a 20-foot-radius, 40-foot-high cylinder centered on a point within range. Each creature in the cylinder must make a Dexterity saving throw. A creature takes 2d8 bludgeoning damage and 4d6 cold damage on a failed save, or half as much damage on a successful one.\n\nHailstones turn the storm’s area of effect into difficult terrain until the end of your next turn.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level or higher, the bludgeoning damage increases by 1d8 for each slot level above 4th."
		},
		{
			"name": "Identify",
			"level": 1,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pearl, owl feather",
			"cost": "100 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "252",
			"additional-detail": "Learn what an item is and what spells affect it.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"knowledge"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You choose one object that you must touch throughout the casting of the spell. If it is a magic item or some other magic-imbued object, you learn its properties and how to use them, whether it requires attunement to use, and how many charges it has, if any. You learn whether any spells are affecting the item and what they are. If the item was created by a spell, you learn which spell created it.\n\nIf you instead touch a creature throughout the casting, you learn what spells, if any, are currently affecting it."
		},
		{
			"name": "Illusory Script",
			"level": 1,
			"school": "Illusion",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "writing surface"
			},
			"v": false,
			"s": true,
			"m": true,
			"components": "LEAD-BASED INK",
			"cost": "10 gp",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "252",
			"additional-detail": "Write magical script on surface that only designated people can read.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You write on parchment, paper, or some other suitable writing material and imbue it with a potent illusion that lasts for the duration.\n\nTo you and any creatures you designate when you cast the spell, the writing appears normal, written in your hand, and conveys whatever meaning you intended when you wrote the text. To all others, the writing appears as if it were written in an unknown or magical script that is unintelligible. Alternatively, you can cause the writing to appear to be an entirely different message, written in a different hand and language, though the language must be one you know.\n\nShould the spell be dispelled, the original script and the illusion both disappear.\n\nA creature with truesight can read the hidden message."
		},
		{
			"name": "Imprisonment",
			"level": 9,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "See Sourcebook.",
			"cost": "Source.",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "252",
			"additional-detail": "Magically restrain a creature.  See sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You create a magical restraint to hold a creature that you can see within range. The target must succeed on a Wisdom saving throw or be bound by the spell; if it succeeds, it is immune to this spell if you cast it again. While affected by this spell, the creature doesn't need to breathe, eat, or drink, and it doesn't age. Divination spells can't locate or perceive the target.\n\nWhen you cast the spell, you choose one of the following forms of imprisonment.\n\n**Burial.** The target is entombed far beneath the earth in a sphere of magical force that is just large enough to contain the target. Nothing can pass through the sphere, nor can any creature teleport or use planar travel to get into or out of it.\n\nThe special component for this version of the spell is a small mithral orb.\n\n**Chaining.** Heavy chains, firmly rooted in the ground, hold the target in place. The target is restrained until the spell ends, and it can't move or be moved by any means until then.\n\nThe special component for this version of the spell is a fine chain of precious metal.\n\n**Hedged Prison.** The spell transports the target into a tiny demiplane that is warded against teleportation and planar travel. The demiplane can be a labyrinth, a cage, a tower, or any similar confined structure or area of your choice.\n\nThe special component for this version of the spell is a miniature representation of the prison made from jade.\n\n**Minimus Containment.** The target shrinks to a height of 1 inch and is imprisoned inside a gemstone or similar object. Light can pass through the gemstone normally (allowing the target to see out and other creatures to see in), but nothing else can pass through, even by means of teleportation or planar travel. The gemstone can't be cut or broken while the spell remains in effect.\n\nThe special component for this version of the spell is a large, transparent gemstone, such as a corundum, diamond, or ruby.\n\n**Slumber.** The target falls asleep and can't be awoken. The special component for this version of the spell consists of rare soporific herbs.\n\n**Ending the Spell.** During the casting of the spell, in any of its versions, you can specify a condition that will cause the spell to end and release the target. The condition can be as specific or as elaborate as you choose, but the DM must agree that the condition is reasonable and has a likelihood of coming to pass. The conditions can be based on a creature's name, identity, or deity but otherwise must be based on observable actions or qualities and not based on intangibles such as level, class, or hit points.\n\nA _dispel magic_ spell can end the spell only if it is cast as a 9th-level spell, targeting either the prison or the special component used to create it.\n\nYou can use a particular special component to create only one prison at a time. If you cast the spell again using the same component, the target of the first casting is immediately freed from its binding."
		},
		{
			"name": "Incendiary Cloud",
			"level": 8,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "DEX every turn (Half DMG)"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 10d8",
			"sourcebook": "PHB",
			"page": "253",
			"additional-detail": "Targets make save when cloud created or entering or exiting it. Cloud move: 10ft.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A swirling cloud of smoke shot through with white-hot embers appears in a 20-foot-range. The cloud spreads around corners and is heavily obscured. It lasts for the duration or until a wind of moderate or greater speed (at least 10 miles per hour) disperses it.\n\nWhen the cloud appears, each creature in it must make a Dexterity saving throw. A creature takes 10d8 fire damage on a failed save, or half as much damage on a successful one. A creature must also make this saving throw when it enters the spell's area for the first time on a turn or ends its turn there.\n\nThe cloud moves 10 feet directly away from you in a direction that you choose at the start of each of your turns."
		},
		{
			"name": "Inflict Wounds",
			"level": 1,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 3d10",
			"sourcebook": "PHB",
			"page": "253",
			"additional-detail": "Inflict necrotic damage on target.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"oathbreaker"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Make a melee spell attack against a creature you can\nreach. On a hit, the target takes 3d10 necrotic damage.\n\n**At Higher Levels.** When you cast this spell using a\nspell slot of 2nd level or higher, the damage increases by\n1d10 for each slot level above 1st."
		},
		{
			"name": "Insect Plague",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 300
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of sugar, grain, and fat",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Piercing",
			"damage-heal": "DAM: 4d10",
			"sourcebook": "PHB",
			"page": "254",
			"additional-detail": "Targets make save when swarm created or entering or exiting it.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "Swarming, biting locusts fill a 20-foot-radius sphere centered on a point you choose within range, The sphere spreads around corners. The sphere remains for the duration, and its area is lightly obscured. The sphere's area is difficult terrain.\n\nWhen the area appears, each creature in it must make a Constitution saving throw. A creature takes 4d10 piercing damage on a failed save, or half as much damage on a successful one. A creature must also make this saving throw when it enters the spell's area for the first time on a turn or ends its turn there.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the damage increases by 1d10 for each slot level above 5th."
		},
		{
			"name": "Invisibility",
			"level": 2,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "eyelash in gum arabic",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "254",
			"additional-detail": "Target becomes invisible. Ends if target attacks or casts a spell.",
			"per-higher-spell-level": "One additional creature.",
			"bard": true,
			"cleric": false,
			"druid": [
				"grassland"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "A creature you touch becomes invisible until the spell ends. Anything the target is wearing or carrying is invisible as long as it is on the target's person. The spell ends for a target that attacks or casts a spell.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd."
		},
		{
			"name": "Jump",
			"level": 1,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "grasshopper's hind leg",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "254",
			"additional-detail": "Target's jump distance tripled until spell ends.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a creature. The creature's jump distance is tripled until the spell ends."
		},
		{
			"name": "Knock",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "openable object",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "254",
			"additional-detail": "Open mundane lock or suppress an Arcane Lock for 10 minutes. Loud knock.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Choose an object that you can see within range. The object can be a door, a box, a chest, a set of manacles, a padlock, or another object that contains a mundane or magical means that prevents access.\n\nA target that is held shut by a mundane lock or that is stuck or barred becomes unlocked, unstuck, or unbarred. If the object has multiple locks, only one of them is unlocked.\n\nIf you choose a target that is held shut with *[arcane lock](../arcane-lock/ \"arcane lock (lvl 2)\")*, that spell is suppressed for 10 minutes, during which time the target can be opened and shut normally.\n\nWhen you cast the spell, a loud knock, audible from as far away as 300 feet, emanates from the target object."
		},
		{
			"name": "Legend Lore",
			"level": 5,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "person, place, or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "INCENSE(250),4 ivory strips(50)",
			"cost": "300 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "254",
			"additional-detail": "Learn lore about target. Information is accurate but might use figurative words.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Name or describe a person, place, or object. The spell brings to your mind a brief summary of the significant lore about the thing you named. The lore might consist of current tales, forgotten stories, or even secret lore that has never been widely known. If the thing you named isn't of legendary importance, you gain no information. The more information you already have about the thing, the more precise and detailed the information you receive is.\n\nThe information you learn is accurate but might be couched in figurative language. For example, if you have a mysterious magic axe on hand, the spell might yield this information: \"Woe to the evildoer whose hand touches the axe, for even the haft slices the hand of the evil ones. Only a true Child of Stone, lover and beloved of Moradin, may awaken the true powers of the axe, and only with the sacred word *Rudnogg* on the lips.\""
		},
		{
			"name": "Leomund's Secret Chest",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "chest",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "an exquisite chest, 3 feet by 2 feet by 2 feet, constructed from rare materials worth at least 5,000 gp, and a Tiny replica made from the same materials worth at least 50 gp",
			"cost": "5050 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "254",
			"additional-detail": "Transport chest back and forth from Ethereal Plane using replica.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You hide a chest, and all its contents, on the Ethereal Plane. You must touch the chest and the miniature replica that serves as a material component for the spell. The chest can contain up to 12 cubic feet of nonliving material (3 feet by 2 feet by 2 feet).\n\nWhile the chest remains on the Ethereal Plane, you can use an action and touch the replica to recall the chest. It appears in an unoccupied space on the ground within 5 feet of you. You can send the chest back to the Ethereal Plane by using an action and touching both the chest and the replica.\n\nAfter 60 days, there is a cumulative 5 percent chance per day that the spell's effect ends. This effect ends if you cast this spell again, if the smaller replica chest is destroyed, or if you choose to end the spell as an action. If the spell ends and the larger chest is on the Ethereal Plane, it is irretrievably lost."
		},
		{
			"name": "Leomund's Tiny Hut",
			"level": 3,
			"school": "Evocation",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "hemisphere",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small crystal bead",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "255",
			"additional-detail": "Protect <= 9 creatures in hut from spells, creatures, elements.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A 10-foot-radius immobile dome of force springs into existence around and above you and remains stationary for the duration. The spell ends if you leave its area.\n\nNine creatures of Medium size or smaller can fit inside the dome with you. The spell fails if its area includes a larger creature or more than nine creatures. Creatures and objects within the dome when you cast this spell can move through it freely. All other creatures and objects are barred from passing through it. Spells and other magical effects can’t extend through the dome or be cast through it. The atmosphere inside the space is comfortable and dry, regardless of the weather outside.\n\nUntil the spell ends, you can command the interior to become dimly lit or dark. The dome is opaque from the outside, of any color you choose, but it is transparent from the inside."
		},
		{
			"name": "Lesser Restoration",
			"level": 2,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "255",
			"additional-detail": "End one disease or condition (blind, deaf, paralyzed, poisoned) on target.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature and can end either one disease or one condition afflicting it. The condition can be blinded, deafened, paralyzed, or poisoned."
		},
		{
			"name": "Levitate",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small leather loop or golden wire",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CON"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "255",
			"additional-detail": "Target <= 500 lbs. floats 20 ft.Can move up/down 20ft./turn. Floats down on end.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "One creature or object of your choice that you can see within range rises vertically, up to 20 feet, and remains suspended there for the duration. The spell can levitate a target that weighs up to 500 pounds. An unwilling creature that succeeds on a Constitution saving throw is unaffected.\n\nThe target can move only by pushing or pulling against a fixed object or surface within reach (such as a wall or a ceiling), which allows it to move as if it were climbing. You can change the target's altitude by up to 20 feet in either direction on your turn. If you are the target, you can move up or down as part of your move. Otherwise, you can use your action to move the target, which must remain within the spell's range.\n\nWhen the spell ends, the target floats gently to the ground if it is still aloft."
		},
		{
			"name": "Light",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "object <= 10 ft. cube",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "firefly or phosphorescent moss",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "255",
			"additional-detail": "Object sheds light in 20 ft. radious. Hostile targets get DEX save.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch one object that is no larger than 10 feet in any dimension. Until the spell ends, the object sheds bright light in a 20-foot radius and dim light for an additional 20 feet. The light can be colored as you like. Completely covering the object with something opaque blocks the light. The spell ends if you cast it again or dismiss it as an action.\n\nIf you target an object held or worn by a hostile creature, that creature must succeed on a Dexterity saving throw to avoid the spell."
		},
		{
			"name": "Lightning Arrow",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "target",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "ranged-weapon"
			},
			"damage-type": "Lightning",
			"damage-heal": "DAM: 4d8",
			"sourcebook": "PHB",
			"page": "255",
			"additional-detail": "Creatures within 10 ft. of initial target also take 2d8 DAM (DEX save for half).",
			"per-higher-spell-level": "Both effects add 1d8 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you make a ranged weapon attack during the spell’s duration, the weapon’s ammunition, or the weapon itself if it’s a thrown weapon, transforms into a bolt of lightning. Make the attack roll as normal. The target takes 4d8 lightning damage on a hit, or half as much damage on a miss, instead of the weapon’s normal damage.\n\nWhether you hit or miss, each creature within 10 feet of the target must make a Dexterity saving throw. Each of these creatures takes 2d8 lightning damage on a failed save, or half as much damage on a successful one.\n\nThe piece of ammunition or weapon then returns to its normal form.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage for both effects of the spell increases by 1d8 for each slot level above 3rd."
		},
		{
			"name": "Lightning Bolt",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. line",
				"size": 100
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of fur and glass rod",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "LIghtning",
			"damage-heal": "DAM: 8d6",
			"sourcebook": "PHB",
			"page": "255",
			"additional-detail": "Lightning ignites flammable objects.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": false,
			"druid": [
				"mountain"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A stroke of lightning forming a line 100 feet long and 5 feet wide blasts out from you in a direction you choose. Each creature in the line must make a Dexterity saving throw. A creature takes 8d6 lightning damage on a failed save, or half as much damage on a successful one.\n\nThe lightning ignites flammable objects in the area that aren't being worn or carried.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot level above 3rd."
		},
		{
			"name": "Locate Animals or Plants",
			"level": 2,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "unknown",
				"text": "Kind of beast or plant"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bloodhound fur",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "Name a kind of beast or plant and find the nearest one within 5 miles.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Describe or name a specific kind of beast or plant. Concentrating on the voice of nature in your surroundings, you learn the direction and distance to the closest creature or plant of that kind within 5 miles, if any are present."
		},
		{
			"name": "Locate Creature",
			"level": 4,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "creature familiar to you",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bloodhound fur",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "Sense creature direction within 1000 ft. or locate it within 30 ft.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Describe or name a creature that is familiar to you. You sense the direction to the creature's location, as long as that creature is within 1,000 feet of you. If the creature is moving, you know the direction of its movement.\n\nThe spell can locate a specific creature known to you, or the nearest creature of a specific kind (such as a human or a unicorn), so long as you have seen such a creature up close—-within 30 feet-—at least once. If the creature you described or named is in a different form, such as being under the effects of a *[polymorph](../polymorph/ \"polymorph (lvl 4)\")* spell, this spell doesn’t locate the creature.\n\nThis spell can't locate a creature if running water at least 10 feet wide blocks a direct path between you and the creature."
		},
		{
			"name": "Locate Object",
			"level": 2,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "object familiar to you",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "forked twig",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "Sense object direction within 1000 ft. or locate it within 30 ft.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Describe or name an object that is familiar to you. You sense the direction to the object's location, as long as that object is within 1,000 feet of you. If the object is in motion, you know the direction of its movement.\n\nThe spell can locate a specific object known to you, as long as you have seen it up close-—within 30 feet-—at least once. Alternatively, the spell can locate the nearest object of a particular kind, such as a certain kind of apparel, jewelry, furniture, tool, or weapon.\n\nThis spell can't locate an object if any thickness of lead, even a thin sheet, blocks a direct path between you and the object."
		},
		{
			"name": "Longstrider",
			"level": 1,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of dirt",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "Target's speed increases by 10 ft.",
			"per-higher-spell-level": "One additional creature.",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a creature. The target's speed increases by 10 feet until the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each spell slot above 1st."
		},
		{
			"name": "Mage Armor",
			"level": 1,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of cured leather",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "If target isn't wearing armor, its base AC becomes 13 + DEX modifier.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a willing creature who isn’t wearing armor, and a protective magical force surrounds it until the spell ends. The target’s base AC becomes 13 + its Dexterity modifier. The spell ends if the target dons armor or if you dismiss the spell as an action."
		},
		{
			"name": "Mage Hand",
			"level": 0,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "Create spectral hand that manipulates objects. Can pick up <= 10 lbs.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "A spectral, floating hand appears at a point you choose within range. The hand lasts for the duration or until you dismiss it as an action. The hand vanishes if it is ever more than 30 feet away from you or if you cast this spell again.\nYou can use your action to control the hand. You can use the hand to manipulate an object, open an unlocked door or container, stow or retrieve an item from an open container, or pour the contents out of a vial. You can move the hand up to 30 feet each time you use it. \n\nThe hand can’t attack, activate magic items, or carry more than 10 pounds."
		},
		{
			"name": "Magic Circle",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "ft. rad., 20 ft. high cylinder",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "HOLY WATER or Fe/Ag DUST",
			"cost": "100 gp",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "256",
			"additional-detail": "Hinder one creature type within cylinder.  See Sourcebook.",
			"per-higher-spell-level": "Duration increases 1 hour.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You create a 10-foot-radius, 20-foot-tall cylinder of magical energy centered on a point on the ground that you can see within range. Glowing runes appear wherever the cylinder intersects with the floor or other surface.\n\nChoose one or more of the following types of creatures: celestials, elementals, fey, fiends, or undead. The circle affects a creature of the chosen type in the following ways:\n\n* The creature can’t willingly enter the cylinder by nonmagical means. If the creature tries to use teleportation or interplanar travel to do so, it must first succeed on a Charisma saving throw.\n* The creature has disadvantage on attack rolls against targets within the cylinder.\n* Targets within the cylinder can’t be charmed, frightened, or possessed by the creature.\n\nWhen you cast this spell, you can elect to cause its magic to operate in the reverse direction, preventing a creature of the specified type from leaving the cylinder and protecting targets outside it.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the duration increases by 1 hour for each slot level above 3rd."
		},
		{
			"name": "Magic Jar",
			"level": 6,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "ornamental container",
			"cost": "500 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "257",
			"additional-detail": "Your soul enters an external object.  See sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Your body falls into a catatonic state as your soul leaves it and enters the container you used for the spell's material component. While your soul inhabits the container, you are aware of your surroundings as if you were in the container's space. You can't move or use reactions. The only action you can take is to project your soul up to 100 feet out of the container, either returning to your living body (and ending the spell) or attempting to possess a humanoid's body.\n\nYou can attempt to possess any humanoid within 100 feet of you that you can see (creatures warded by a *[protection from evil and good](../protection-from-evil-and-good \"protection from evil and good (lvl 1)\")* or *[magic circle](../magic-circle \"magic circle (lvl 3)\")* spell can't be possessed). The target must make a Charisma saving throw. On a failure, your soul moves into the target's body, and the target's soul becomes trapped in the container. On a success, the target resists your efforts to possess it, and you can't attempt to possess it again for 24 hours.\n\nOnce you possess a creature's body, you control it. Your game statistics are replaced by the statistics of the creature, though you retain your alignment and your Intelligence, Wisdom, and Charisma scores. You retain the benefit of your own class features. If the target has any class levels, you can't use any of its class features.\n\nMeanwhile, the possessed creature's soul can perceive from the container using its own senses, but it can't move or take actions at all.\n\nWhile possessing a body, you can use your action to return from the host body to the container if it is within 100 feet of you, returning the host creature's soul to its body. If the host body dies while you're in it, the creature dies, and you must make a Charisma saving throw against your own spellcasting DC. On a success, you return to the container if it is within 100 feet of you. Otherwise, you die.\n\nIf the container is destroyed or the spell ends, your soul immediately returns to your body. If your body is more than 100 feet away from you or if your body is dead when you attempt to return to it, you die. If another creature's soul is in the container when it is destroyed, the creature's soul returns to its body if the body is alive and within 100 feet. Otherwise, that creature dies.\n\nWhen the spell ends, the container is destroyed."
		},
		{
			"name": "Magic Missile",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "Any creature in range."
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Force",
			"damage-heal": "DAM:(1d4+1)x3",
			"sourcebook": "PHB",
			"page": "257",
			"additional-detail": "You choose the target for each dart that does 1d4+1 DAM.",
			"per-higher-spell-level": "One additional dart.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create three glowing darts of magical force. Each dart hits a creature of your choice that you can see within range. A dart deals 1d4 + 1 force damage to its target. The darts all strike simultaneously, and you can direct them to hit one creature or several.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the spell creates one more dart for each slot level above 1st."
		},
		{
			"name": "Magic Mouth",
			"level": 2,
			"school": "Illusion",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "honeycomb and JADE DUST",
			"cost": "10 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "257",
			"additional-detail": "Magic mouth repeats <= 25 word message once condition is met.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You implant a message within an object in range, a message that is uttered when a trigger condition is met. Choose an object that you can see that isn't being worn or carried by another creature, then speak the message, which must be 25 words or less, though it can be delivered over as long as ten minutes. Finally, determine the circumstance that will trigger the spell to deliver your message.\n\nWhen that circumstance occurs, a magical mouth appears on the object and recites the message in your voice at the same volume you spoke. If the object you chose has a mouth or something that looks like a mouth (for example, the mouth of a statue) the magical mouth appears there so that the words appear to come from the object's mouth. When you cast this spell, you can have the spell end after it delivers its message or it can remain and repeat its message whenever the trigger occurs.\n\nThe triggering circumstance can be as general or as detailed as you like, though it must be based on visual or audible conditions that occur within 30 feet of the object. For example, you could instruct the mouth to speak when any creature moves within 30 feet of the object or when a silver bell rings within 30 feet."
		},
		{
			"name": "Magic Weapon",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "nonmagical weapon",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "257",
			"additional-detail": "Nonmagical weapon becomes +1.",
			"per-higher-spell-level": "4th: +2 weapon,6th: +3",
			"bard": false,
			"cleric": [
				"war"
			],
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a nonmagical weapon. Until the spell ends, that weapon becomes a magic weapon with a +1 bonus to attack rolls and damage rolls.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the bonus increases to +2. When you use a spell slot of 6th level or higher, the bonus increases to +3."
		},
		{
			"name": "Major Image",
			"level": 3,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. cube",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of fleece",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "258",
			"additional-detail": "Create image of object including sounds, smells. Investigation check to foil.",
			"per-higher-spell-level": "6th: lasts until dispelled",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You create the image of an object, a creature, or some other visible phenomenon that is no larger than a 20-foot cube. The image appears at a spot that you can see within range and lasts for the duration. It seems completely real, including sounds, smells, and temperature appropriate to the thing depicted. You can’t create sufficient heat or cold to cause damage, a sound loud enough to deal thunder damage or deafen a creature, or a smell that might sicken a creature (like a troglodyte’s stench).\n\nAs long as you are within range o f the illusion, you can use your action to cause the image to move to any other spot within range. As the image changes location, you can alter its appearance so that its movements appear natural for the image. For example, if you create an image o f a creature and move it, you can alter the image so that it appears to be walking. Similarly, you can cause the illusion to make different sounds at different times, even making it carry on a conversation, for example.\n\nPhysical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image, and its other sensory qualities become faint to the creature.\n\n**At Higher Levels.** When you cast this spell using a spell slot o f 6th level or higher, the spell lasts until dispelled, without requiring your concentration."
		},
		{
			"name": "Mass Cure Wounds",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creatures-less-than",
				"size": 6
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "See Details.",
			"sourcebook": "PHB",
			"page": "258",
			"additional-detail": "Creatures HEAL 3d8 + casting ability modifier. No effect on undead/constructs.",
			"per-higher-spell-level": "HEAL extra 1d8.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A wave of healing energy washes out from a point of your choice within range. Choose up to six creatures in a 30-foot-radius sphere centered on that point. Each target regains hit points equal to 3d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 6th level or higher, the healing increases by 1d8 for each slot level above 5th."
		},
		{
			"name": "Mass Heal",
			"level": 9,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "unknown",
				"text": "Any creature in range."
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "See Details.",
			"sourcebook": "PHB",
			"page": "258",
			"additional-detail": "Targets HEAL total of 700 HP and cured of diseases, blindness, and deafness.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A flood of healing energy flows from you into injured creatures around you. You restore up to 700 hit points, divided as you choose among any number of creatures that you can see within range. Creatures healed by this spell are also cured of all diseases and any effect making them blinded or deafened. This spell has no effect on undead or constructs."
		},
		{
			"name": "Mass Healing Word",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creatures-less-than",
				"size": 6
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "See Details.",
			"sourcebook": "PHB",
			"page": "258",
			"additional-detail": "Targets HEAL 1d4 + casting ability modifier. No effect on undead/constructs.",
			"per-higher-spell-level": "HEAL extra 1d4.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "As you call out words of restoration, up to six creatures of your choice that you can see within range regain hit points equal to 1d4 + your spellcasting ability modifier. This spell has no effect on undead or constructs.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the healing increases by 1d4 for each slot level above 3rd."
		},
		{
			"name": "Mass Suggestion",
			"level": 6,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creatures-less-than",
				"size": 12
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "snake's tongue, honeycomb",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "258",
			"additional-detail": "Make creatures accept reasonable sounding suggestions. See Sourcebook.",
			"per-higher-spell-level": "7th: 10 days;8th:30;9th:366",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You suggest a course of activity (limited to a sentence or two) and magically influence up to twelve creatures of your choice that you can see within range and that can hear and understand you. Creatures that can't be charmed are immune to this effect. The suggestion must be worded in such a manner as to make the course of action sound reasonable. Asking the creature to stab itself, throw itself onto a spear, immolate itself, or do some other obviously harmful act automatically negates the effect of the spell.\n\nEach target must make a Wisdom saving throw. On a failed save, it pursues the course of action you described to the best of its ability. The suggested course of action can continue for the entire duration. If the suggested activity can be completed in a shorter time, the spell ends when the subject finishes what it was asked to do.\n\nYou can also specify conditions that will trigger a special activity during the duration. For example, you might suggest that a group of soldiers give all their money to the first beggar they meet. If the condition isn't met before the spell ends, the activity isn’t performed.\n\nIf you or any of your companions damage a creature affected by this spell, the spell ends for that creature.\n\n**At Higher Levels.** When you cast this spell using a 7th-level spell slot, the duration is 10 days. When you use an 8th-level spell slot, the duration is 30 days. When you use a 9th-level spell slot, the duration is a year and a day."
		},
		{
			"name": "Maze",
			"level": 8,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Details"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "258",
			"additional-detail": "Target uses action each turn to make INT check (DC 20) to escape.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You banish a creature that you can see within range into a labyrinthine demiplane. The target remains there for the duration or until it escapes the maze.\n\nThe target can use its action to attempt to escape. When it does so, it makes a DC 20 Intelligence check. If it succeeds, it escapes, and the spell ends (a minotaur or goristro demon automatically succeeds).\n\nWhen the spell ends, the target reappears in the space it left or, if that space is occupied, in the nearest unoccupied space."
		},
		{
			"name": "Meld into Stone",
			"level": 3,
			"school": "Transmutation",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "Stone object or surface"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "259",
			"additional-detail": "Meld into stone walls or large stone objects.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You step into a stone object or surface large enough to fully contain your body, melding yourself and all the equipment you carry with the stone for the duration. Using your movement, you step into the stone at a point you can touch. Nothing of your presence remains visible or otherwise detectable by nonmagical senses.\n\nWhile merged with the stone, you can’t see what occurs outside it, and any Wisdom (Perception) checks you make to hear sounds outside it are made with disadvantage. You remain aware of the passage of time and can cast spells on yourself while merged in the stone. You can use your movement to leave the stone where you entered it, which ends the spell. You otherwise can’t move.\n\nMinor physical damage to the stone doesn’t harm you, but its partial destruction or a change in its shape (to the extent that you no longer fit within it) expels you and deals 6d6 bludgeoning damage to you. The stone’s complete destruction (or transmutation into a different substance) expels you and deals 50 bludgeoning damage to you. If expelled, you fall prone in an unoccupied space closest to where you first entered."
		},
		{
			"name": "Melf's Acid Arrow",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "target",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "rhubarb leaf, adder's stomach",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Acid",
			"damage-heal": "DAM: 4d4",
			"sourcebook": "PHB",
			"page": "259",
			"additional-detail": "Half DAM on miss. On hit, target also takes 2d4 acid DAM at end of next turn.",
			"per-higher-spell-level": "1d4 DAM on both effects",
			"bard": false,
			"cleric": false,
			"druid": [
				"swamp"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A shimmering green arrow streaks toward a target within range and bursts in a spray of acid. Make a ranged spell attack against the target. On a hit, the target takes 4d4 acid damage immediately and 2d4 acid damage at the end of its next turn. On a miss, the arrow splashes the target with acid for half as much of the initial damage and no damage at the end of its next turn. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the damage (both initial and later) increases by 1d4 for each slot level above 2nd."
		},
		{
			"name": "Mending",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "two lodestones",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "259",
			"additional-detail": "Mends one break or tear no larger than 1ft. in a mundane object.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell repairs a single break or tear in an object you touch, such as a broken key, a torn cloak, or a leaking wineskin. As long as the break or tear is no longer than 1 foot in any dimension, you mend it, leaving no trace of the former damage.\n\nThis spell can physically repair a magic item or construct, but the spell can’t restore magic to such an object."
		},
		{
			"name": "Message",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creature in range",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of copper wire",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "259",
			"additional-detail": "Point at target and whisper a message. They can whisper a response.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You point your finger toward a creature within range and whisper a message. The target (and only the target) hears the message and can reply in a whisper that only you can hear.\n\nYou can cast this spell through solid objects if you are familiar with the target and know it is beyond the barrier. Magical silence, 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood blocks the spell. The spell doesn't have to follow a straight line and can travel freely around corners or through openings."
		},
		{
			"name": "Meteor Swarm",
			"level": 9,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "1 mile"
			},
			"target-area": {
				"type": "sphere",
				"size": 40
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire+Bludgeoning",
			"damage-heal": "DAM20d6+20d6",
			"sourcebook": "PHB",
			"page": "259",
			"additional-detail": "Also damages objects and ignites flammable objects.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Blazing orbs of fire plummet to the ground at four different points you can see within range. Each creature in a 40-foot-radius sphere centered on each point you choose must make a Dexterity saving throw. The sphere spreads around corners. A creature takes 20d6 fire damage and 20d6 bludgeoning damage on a failed save, or half as much damage on a successful one. A creature in the area of more than one fiery burst is affected only once.\n\nThe spell damages objects in the area and ignites flammable objects that aren't being worn or carried."
		},
		{
			"name": "Mind Blank",
			"level": 8,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "259",
			"additional-detail": "Target immune to psychic damage, charm, mind reading, divinations.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Until the spell ends, one willing creature you touch is immune to psychic damage, any effect that would sense its emotions or read its thoughts, divination spells, and the charmed condition. The spell even foils _[wish](../wish/ \"wish (lvl 9)\")_ spells and spells or effects of similar power used to affect the target's mind or to gain information about the target."
		},
		{
			"name": "Minor Illusion",
			"level": 0,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "ft. cube",
				"size": 5
			},
			"v": false,
			"s": true,
			"m": true,
			"components": "bit of fleece",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "260",
			"additional-detail": "Create illusory sound or image. Investigation check against spell DC to detect.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You create a sound or an image of an object within range that lasts for the duration. The illusion also ends if you dismiss it as an action or cast this spell again.\n\nIf you create a sound, its volume can range from a whisper to a scream. It can be your voice, someone else’s voice, a lion’s roar, a beating of drums, or any other sound you choose. The sound continues unabated throughout the duration, or you can make discrete sounds at different times before the spell ends. \n\nIf you create an image of an object—such as a chair, muddy footprints, or a small chest—it must be no larger than a 5-foot cube. The image can’t create sound, light, smell, or any other sensory effect. Physical interaction with the image reveals it to be an illusion, because things can pass through it. \n\nIf a creature uses its action to examine the sound or image, the creature can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the illusion becomes faint to the creature."
		},
		{
			"name": "Mirage Arcane",
			"level": 7,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "sight"
			},
			"target-area": {
				"type": "square mile",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "days",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "260",
			"additional-detail": "Create audo,visual,tactile, and olfactory illusion. Only Truesight can detect.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You make terrain in a area up to 1 mile square look, sound, smell, and even feel like some other sort of terrain. The terrain's general shape remains the same, however. Open fields or a road could be made to resemble a swamp, hill, crevasse, or some other difficult or impassable terrain. A pond can be made to seem like a grassy meadow, a precipice like a gentle slope, or a rock-strewn gully like a wide and smooth road.\n\nSimilarly, you can alter the appearance of structures, and add them where none are present. The spell doesn't disguise, conceal or add creatures.\n\nThe illusion includes audible, visual, tactile, and olfactory elements, so it can turn clear ground into difficult terrain (or vice versa) or otherwise impede movement through the area. Any piece of the illusory terrain (such as a rock or stick) that is removed from the spell's area disappears immediately.\n\nCreatures with truesight can see through the illusion to the terrain's true form; however, all other elements of the illusion remain, so while the creature is aware of the illusion's presence, the creature can still physically interact with the illusion."
		},
		{
			"name": "Mirror Image",
			"level": 2,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "260",
			"additional-detail": "Create duplicates that make you harder to hit.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"trickery"
			],
			"druid": [
				"coast"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Three illusory duplicates of yourself appear in your space. Until the spell ends, the duplicates move with you and mimic your actions, shifting position so it's impossible to track which image is real. You can use your action to dismiss the illusory duplicates.\n\nEach time a creature targets you with an attack during the spell's duration, roll a d20 to determine whether the attack instead targets one of your duplicates.\n\nIf you have three duplicates, you must roll a 6 or higher to change the attack's target to a duplicate. With two duplicates, you must roll an 8 or higher. With one duplicate, you must roll an 11 or higher.\n\nA duplicate's AC equals 10 + your Dexterity modifier. If an attack hits a duplicate, the duplicate is destroyed. A duplicate can be destroyed only by an attack that hits it. It ignores all other damage and effects. The spell ends when all three duplicates are destroyed.\n\nA creature is unaffected by this spell if it can't see, if it relies on senses other than sight, such as blindsight, or if it can perceive illusions as false, as with truesight."
		},
		{
			"name": "Mislead",
			"level": 5,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": false,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "260",
			"additional-detail": "Become invisible and create illusory double. Use action to move your double.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You become invisible at the same time that an illusory double of you appears where you are standing. The double lasts for the duration, but the invisibility ends if you attack or cast a spell.\n\nYou can use your action to move your illusory double up to twice your speed and make it gesture, speak, and behave in whatever way you choose.\n\nYou can see through its eyes and hear through its ears as if you were located where it is. On each of your turns as a bonus action, you can switch from using its senses to using your own, or back again. While you are using its senses, you are blinded and deafened in regard to your own surrounding."
		},
		{
			"name": "Misty Step",
			"level": 2,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "260",
			"additional-detail": "Teleport <= 30 ft. away to unoccupied location.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"coast"
			],
			"paladin": [
				"ancients",
				"vengeance"
			],
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Briefly surrounded by silvery mist, you teleport up to 30 feet to an unoccupied space that you can see."
		},
		{
			"name": "Modify Memory",
			"level": 5,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "261",
			"additional-detail": "Reshape another creature's memories.  See Sourcebook.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": true,
			"cleric": [
				"trickery"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You attempt to reshape another creature's memories. One creature that you can see must make a Wisdom saving throw. If you are fighting the creature, it has advantage on the saving throw. On a failed save, the target becomes charmed by you for the duration. The charmed target is incapacitated and unaware of its surroundings, though it can still hear you. If it takes any damage or is targeted by another spell, this spell ends, and none of the target's memories are modified.\n\nWhile this charm lasts, you can affect the target's memory of an event that it experienced within the last 24 hours and that lasted no more than 10 minutes. You can permanently eliminate all memory of the event, allow the target to recall the event with perfect clarity and exacting detail, change its memory of the details of the event, or create a memory of some other event.\n\nYou must speak to the target to describe how its memories are affected, and it must be able to understand your language for the modified memories to take root. Its mind fills in any gaps in the details of your description. If the spell ends before you have finished describing the modified memories, the creature's memory isn’t altered. Otherwise, the modified memories take hold when the spell ends.\n\nA modified memory doesn’t necessarily affect how a creature behaves, particularly if the memory contradicts the creature's natural inclinations, alignment, or beliefs. An illogical modified memory, such as implanting a memory of how much the creature enjoyed dousing itself in acid, is dismissed, perhaps as a bad dream. The DM might deem a modified memory too nonsensical to affect a creature in a significant manner.\n\nA *[remove curse](../remove-curse/ \"remove curse (lvl 3)\")* or *[greater restoration](../greater-restoration/ \"greater restoration (lvl 5)\")* spell cast on the target restores the creature's true memory. \n\n**At Higher Levels.** If you cast this spell using a spell slot of 6th level or higher, you can alter the target’s memories of an event that took place up to 7 days ago (6th level), 30 days ago (7th level), 1 year ago (8th level), or any time in the creature’s past (9th level)."
		},
		{
			"name": "Moonbeam",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. rad. 40 ft. high cylinder",
				"size": 5
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "moonseed seeds, feldspar",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 2d10",
			"sourcebook": "PHB",
			"page": "261",
			"additional-detail": "DAM taken entering/start turn in beam. Shapechanges disadvantage to save.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A silvery beam of pale light shines down in a 5-foot-radius, 40-foot-high cylinder centered on a point within range. Until the spell ends, dim light fills the cylinder.\n\nWhen a creature enters the spell's area for the first time on a turn or starts its turn there, it is engulfed in ghostly flames that cause searing pain, and it must make a Constitution saving throw. It takes 2d10 radiant damage on a failed save, or half as much on a successful one.\n\nA shapechanger makes its saving throw with disadvantage. If it fails, it also instantly reverts to its original form and can't assume a different form until it leaves the spells light.\n\nOn each of your turns after you cast this spell use can use an action to move the beam 60 feet in any direction.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d10 for each slot level above 2nd."
		},
		{
			"name": "Mordenkainen's Faithful Hound",
			"level": 4,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "silver whistle, bone, thread",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "Piercing",
			"damage-heal": "DAM: 4d8",
			"sourcebook": "PHB",
			"page": "261",
			"additional-detail": "Spectral hound guards area and can attack hostiles.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You conjure a phantom watchdog in an unoccupied space that you can see within range, where it remains for the duration, until you dismiss it as an action, or until you move more than 100 feet away from it.\n\nThe hound is invisible to all creatures except you and can't be harmed. When a Small or larger creature comes within 30 feet of it without first speaking the password that you specify when you cast this spell, the hound starts barking loudly. The hound sees invisible creatures and can see into the Ethereal Plane. It ignores illusions.\n\nAt the start of each of your turns, the hound attempts to bite one creature within 5 feet of it that is hostile to you. The hound’s attack bonus is equal to your spellcasting ability modifier + your proficiency bonus. On a hit, it deals 4d8 piercing damage."
		},
		{
			"name": "Mordenkainen's Magnificent Mansion",
			"level": 7,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 300
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "portal(5),marble(5),spoon(5)",
			"cost": "15 gp",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "261",
			"additional-detail": "Summon portal to 50000 cubic ft. mansion with food for 100 people.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You conjure an extradimensional dwelling in range that lasts for the duration. You choose where its one entrance is located. The entrance shimmers faintly and is 5 feet wide and 10 feet tall. You and any creature you designate when you cast the spell can enter the extradimensional dwelling as long as the portal remains open. You can open or close the portal if you are within 30 feet of it. While closed, the portal is invisible.\n\nBeyond the portal is a magnificent foyer with numerous chambers beyond. The atmosphere is clean, fresh, and warm.\n\nYou can create any floor plan you like, but the space can't exceed 50 cubes, each cube being 10 feet on each side. The place is furnished and decorated as you choose. It contains sufficient food to server a nine-course banquet for up to 100 people. A staff of 100 near-transparent servants attends all who enter. You decide the visual appearance of these servants and their attire. They are completely obedient to your orders. Each servant can perform any task a normal human servant could perform, but they can't attack or take any action that would directly harm another creature. Thus the servants can fetch things, clean, mend, fold clothes, light fires, serve food, pour wine, and so on. The servants can go anywhere in the mansion but can't leave it. Furnishings and other objects created by this spell dissipate into smoke if removed from the mansion. When the spell ends, any creatures inside the extradimensional space are expelled into the open spaces nearest to the entrance."
		},
		{
			"name": "Mordenkainen's Private Sanctum",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. cube-less-than",
				"size": 100
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "lead,glass,cloth,chrysolite",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "262",
			"additional-detail": "Create magically secure area.  See Sourcebook.",
			"per-higher-spell-level": "Extra 100 ft. per cube side",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You make an area within range magically secure. The area is a cube that can be as small as 5 feet to as large as 100 feet on each side. The spell lasts for the duration or until you use an action to dismiss it.\n\nWhen you cast the spell, you decide what sort of security the spell provides, choosing any or all of the following properties:\n\n* Sound can't pass through the barrier at the edge of the warded area.\n* The barrier of the warded area appears dark and foggy, preventing vision (including darkvision) through it.\n* Sensors created by divination spells can't appear inside the protected area or pass through the barrier at its perimeter.\n* Creatures in the area can't be targeted by divination spells.\n* Nothing can teleport into or out of the warded area.\n* Planar travel is blocked within the warded area.\n\nCasting this spell on the same spot every day for a year makes this effect permanent.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level or higher, you can increase the size of the cube by 100 feet for each slot level beyond 4th. Thus you could protect a cube that can be up to 200 feet on one side by using a spell slot of 5th level."
		},
		{
			"name": "Mordenkainen's Sword",
			"level": 7,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "mini platinum sword",
			"cost": "250 gp",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Force",
			"damage-heal": "DAM: 3d10",
			"sourcebook": "PHB",
			"page": "262",
			"additional-detail": "Use bonus action each turn to move sword <= 20 ft. and attack again.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a sword-shaped plane of force that hovers within range. It lasts for the duration.\n\nWhen the sword appears, you make a melee spell attack against a target of your choice within 5 feet of the sword. On a hit, the target takes 3d10 force damage. Until the spell ends, you can use a bonus action on each of your turns to move the sword up to 20 feet to a spot you can see and repeat this attack against the same target or a different one."
		},
		{
			"name": "Move Earth",
			"level": 6,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. square of terrain",
				"size": 40
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "iron blade, bag of soil",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hours",
				"size": 2
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "263",
			"additional-detail": "Reshape dirt, sand, or clay. Can move to different square after 10 minutes.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Choose an area of terrain no larger than 40 feet on a side within range. You can reshape dirt, sand, or clay in the area in any manner you choose for the duration. You can raise or lower the area's elevation, create or fill in a trench, erect or flatten a wall, or form a pillar. The extent of any such changes can't exceed half the area's largest dimension. So, if you affect a 40-foot square, you can create a pillar up to 20 feet high, raise or lower the square's elevation by up to 20 feet, dig a trench up to 20 feet deep, and so on. It takes 10 minutes for these changes to complete.\n\nAt the end of every 10 minutes you spend concentrating on the spell, you can choose a new area of terrain to affect.\n\nBecause the terrain’s transformation occurs slowly, creatures in the area can't usually be trapped or injured by the ground's movement. This spell can't manipulate natural stone or stone construction. Rocks and structures shift to accommodate the new terrain. If the way you shape the terrain would make a structure unstable, it might collapse.\n\nSimilarly, this spell doesn't directly affect plant growth. The moved earth carries any plants along with it."
		},
		{
			"name": "Nondetection",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "object, place, or willing target",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "DIAMOND DUST",
			"cost": "25 gp",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "263",
			"additional-detail": "Hide target from all divination and scrying magic.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"knowledge"
			],
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "For the duration, you hide a target that you touch from divination magic. The target can be a willing creature or a place or an object no larger than 10 feet in any dimension. The target can’t be targeted by any divination magic or perceived through magical scrying sensors."
		},
		{
			"name": "Nystul's Magic Aura",
			"level": 2,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small square of silk",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "263",
			"additional-detail": "Divination spells reveal false info about target.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You place an illusion on a creature or an object you touch so that divination spells reveal false information about it. The target can be a willing creature or an object that isn't being carried or worn by another creature. \n\nWhen you cast the spell, choose one or both of the following effects. The effect lasts for the duration. If you cast this spell on the same creature or object every day for 30 days, placing the same effect on it each time, the illusion lasts until it is dispelled.\n\n**False Aura.** You change the way the target appears to spells and magical effects, such as *[detect magic](../detect-magic/ \"detect magic (lvl 1)\")*, that detect magical auras. You can make a nonmagical object appear magical, a magical object appear nonmagical, or change the object's magical aura so that it appears to belong to a specific school of magic that you choose. When you use this effect on an object, you can make the false magic apparent to any creature that handles the item.\n\n**Mask.** You change the way the target appears to spells and magical effects that detect creature types, such as a paladin's Divine Sense or the trigger of a *[symbol](../symbol/ \"symbol (lvl 7)\")* spell. You choose a creature type and other spells and magical effects treat the target as if it were a creature of that type or of that alignment."
		},
		{
			"name": "Otiluke's Freezing Sphere",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 300
			},
			"target-area": {
				"type": "sphere",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small crystal sphere",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Cold",
			"damage-heal": "DAM: 10d6",
			"sourcebook": "PHB",
			"page": "263",
			"additional-detail": "Water freezes. Can give globe to another who fires it and spell takes effect then.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A frigid globe of cold energy streaks from your fingertips to a point of your choice within range, where it explodes in a 60-foot-radius sphere. Each creature within the area must make a Constitution saving throw. On a failed save, a creature takes 10d6 cold damage. On a successful save, it takes half as much damage.\n\nIf the globe strikes a body of water or a liquid that is principally water (not including water-based creatures), it freezes the liquid to a depth of 6 inches over an area 30 feet square. This ice lasts for 1 minute. Creatures that were swimming on the surface of frozen water are trapped in the ice. A trapped creature can use an action to make a Strength check against your spell save DC to break free.\n\nYou can refrain from firing the globe after completing the spell, if you wish. A small globe about the size of a sling stone, cool to the touch, appears in your hand. At any time, you or a creature you give the globe to can throw the globe (to a range of 40 feet) or hurl it with a sling (to the sling's normal range). It shatters on impact, with the same effect as the normal casting of the spell. You can also set the globe down without shattering it. After 1 minute, if the globe hasn't already shattered, it explodes.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 7th level or higher, the damage increases by 1d6 for each slot level above 6th."
		},
		{
			"name": "Otiluke's Resilient Sphere",
			"level": 4,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "hemispheres of crystal,arabic",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "264",
			"additional-detail": "Trap creature in sphere.  Sphere only destroyed by Disintegrate spell.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A sphere of shimmering force encloses a creature or object of Large size or smaller within range. An unwilling creature must make a Dexterity saving throw. On a failed save, the creature is enclosed for the duration.\n\nNothing—-not physical objects, energy, or other spell effects-—can pass through the barrier, in or out, though a creature in the sphere can breathe there. The sphere is immune to all damage, and a creature or object inside can’t be damaged by attacks or effects originating from outside, nor can a creature inside the sphere damage anything outside it.\n\nThe sphere is weightless and just large enough to contain the creature or object inside. An enclosed creature can use its action to push against the sphere’s walls and thus roll the sphere at up to half the creature’s speed. Similarly, the globe can be picked up and moved by other creatures.\n\nA *[disintegrate](../disintegrate/ \"disintegrate (lvl 6)\")* spell targeting the globe destroys it without harming anything inside it."
		},
		{
			"name": "Otto's Irresistable Dance",
			"level": 6,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "264",
			"additional-detail": "No movement.Disadvantage on DEX saves and attacks.Use action to WIS save.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Choose one creature that you can see within range. The target begins a comic dance in place: shuffling, tapping its feet, and capering for the duration. Creatures that can’t be charmed are immune to this spell.\n\nA dancing creature must use all its movement to dance without leaving its space and has disadvantage on Dexterity saving throws and attack rolls. While the target is affected by this spell, other creatures have advantage on attack rolls against it. As an action, a dancing creature makes a Wisdom saving throw to regain control of itself. On a successful save, the spell ends."
		},
		{
			"name": "Pass without Trace",
			"level": 2,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "unknown",
				"text": "Willing creatures in range"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "mistletoe or spruce ash",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "264",
			"additional-detail": "Targets get +10 to Stealth checks and can only be tracked by magic.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"trickery"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A veil of shadows and silence radiates from you, masking you and your companions from detection. For the duration, each creature you choose within 30 feet of you (including you) has a +10 bonus to Dexterity (Stealth) checks and can’t be tracked except by magical means. A creature that receives this bonus leaves behind no tracks or other traces of its passage."
		},
		{
			"name": "Passwall",
			"level": 5,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of sesame seeds",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "264",
			"additional-detail": "Create 5ft wide, 8ft tall,20ft deep opening in wall, ceiling, or floor. ",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"mountain"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A passage appears at a point of your choice that you can see on a wooden, plaster, or stone surface (such as a wall, a ceiling, or a floor) within range, and lasts for the duration. You choose the opening’s dimensions: up to 5 feet wide, 8 feet tall, and 20 feet deep. The passage creates no instability in a structure surrounding it.\n\nWhen the opening disappears, any creatures or objects still in the passage created by the spell are safely ejected to an unoccupied space nearest to the surface on which you cast the spell."
		},
		{
			"name": "Phantasmal Force",
			"level": 2,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of fleece",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "INT"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "264",
			"additional-detail": "Affect target with illusion. Can DAM for 1d6 Psychic. See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You craft an illusion that takes root in the mind of a creature that you can see within range. The target must make an Intelligence saving throw. On a failed save, you create a phantasmal object, creature, or other visible phenomenon of your choice that is no larger than a 1O-foot cube and that is perceivable only to the target for the duration. This spell has no effect on undead or constructs. \n\nThe phantasm includes sound, temperature, and other stimuli, also evident only to the creature.\n\nThe target can use its action to examine the phantasm with an Intelligence (Investigation) check against your spell save DC. If the check succeeds, the target realizes that the phantasm is an illusion, and the spell ends.\n\nWhile a target is affected by the spell, the target treats the phantasm as if it were real. The target rationalizes any illogical outcomes from interacting with the phantasm. For example, a target attempting to walk across a phantasmal bridge that spans a chasm falls once it steps onto the bridge. If the target survives the fall, it still believes that the bridge exists and comes up with some other explanation for its fall--it was pushed, it slipped, or a strong wind might have knocked it off.\n\nAn affected target is so convinced of the phantasm's reality that it can even take damage from the illusion. A phantasm created to appear as a creature can attack the target. Similarly. a phantasm created to appear as fire, a pool of acid, or lava can burn the target. Each round on your turn, the phantasm can deal 1d6 psychic damage to the target if it is in the phantasm's area or within 5 feet of the phantasm, provided that the illusion is of a creature or hazard that could logically deal damage, such as by attacking. The target perceives the damage as a type appropriate to the illusion."
		},
		{
			"name": "Phantasmal Killer",
			"level": 4,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 4d10",
			"sourcebook": "PHB",
			"page": "265",
			"additional-detail": "Target is frightened and takes DAM at start of turn if it doesn't save.",
			"per-higher-spell-level": "Extra 1d10 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You tap into the nightmares of a creature you can see within range and create an illusory manifestation of its deepest fears, visible only to that creature. The target must make a Wisdom saving throw. On a failed save, the target becomes frightened for the duration. At the start of each of the target's turns before the spell ends, the target must succeed on a Wisdom saving throw or take 4d10 psychic damage. On a successful save, the spell ends. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level or higher, the damage increases by 1d10 for each slot level above 4th."
		},
		{
			"name": "Phantom Steed",
			"level": 3,
			"school": "Illusion",
			"ritual": "Ritual",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "265",
			"additional-detail": "You and 1 other can ride phantom steed. Speed=100ft or 10mph (13 fast).",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A Large quasi-real, horselike creature appears on the ground in an unoccupied space of your choice within range. You decide the creature’s appearance, but it is equipped with a saddle, bit, and bridle. Any of the equipment created by the spell vanishes in a puff of smoke if it is carried more than 10 feet away from the steed.\n\nFor the duration, you or a creature you choose can ride the steed. The creature uses the statistics for a riding horse, except it has a speed of 100 feet and can travel 10 miles in an hour, or 13 miles at a fast pace. When the spell ends, the steed gradually fades, giving the rider 1 minute to dismount. The spell ends if you use an action to dismiss it or if the steed takes any damage."
		},
		{
			"name": "Planar Ally",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "265",
			"additional-detail": "Ask otherworldly entity for aid.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You beseech an otherworldly entity for aid. The being must be known to you: a god, a primordial, a demon prince, or some other being of cosmic power. That entity sends a celestial, an elemental, or a fiend loyal to it to aid you, making the creature appear in an unoccupied space within range. If you know a specific creature's name, you can speak that name when you cast this spell to request that creature, though you might get a different creature anyway (DM's choice).\n\nWhen the creature appears, it is under no compulsion to behave in any particular way. You can ask the creature to perform a service in exchange for payment, but it isn’t obliged to do so. The requested task could range from simple (fly us across the chasm, or help us fight a battle) to complex (spy on our enemies, or protect us during our foray into the dungeon). You must be able to communicate with the creature to bargain for its services.\n\nPayment can take a variety of forms. A celestial might require a sizable donation of gold or magic items to an allied temple, while a fiend might demand a living sacrifice or a gift of treasure. Some creatures might exchange their service for a quest undertaken by you. As a rule of thumb, a task that can be measured in minutes requires a payment worth 100 gp per minute. A task measured in hours requires 1,000 gp per hour. And a task measured in days (up to 10 days) requires 10,000 gp per day. The DM can adjust these payments based on the circumstances under which you cast the spell. If the task is aligned with the creature's ethos, the payment might be halved or even waived. Nonhazardous tasks typically require only half the suggested payment, while especially dangerous tasks might require a greater gift. Creatures rarely accept tasks that seem suicidal.\n\nAfter the creature completes the task, or when the agreed-upon duration of service expires, the creature returns to its home plane after reporting back to you, if appropriate to the task and if possible. If you are unable to agree on a price for the creature’s service, the creature immediately returns to its home plane.\n\nA creature enlisted to join your group counts as a member of it, receiving a full share of experience points awarded."
		},
		{
			"name": "Planar Binding",
			"level": 5,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "extraplanar creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "JEWEL",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "265",
			"additional-detail": "Bind celestial, elemental, fey, or fiend to serve you for spell duration.",
			"per-higher-spell-level": "See Sourcebook.",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "With this spell, you attempt to bind a celestial, an elemental, a fey, or a fiend to your service. The creature must be within range for the entire casting of the spell. (Typically, the creature is first summoned into the center of an inverted magic circle in order to keep it trapped while this spell is cast.) At the completion of the casting, the target must make a Charisma saving throw. On a failed save, it is bound to serve you for the duration. If the creature was summoned or created by another spell, that spell's duration is extended to match the duration of this spell.\n\nA bound creature must follow your instructions to the best of its ability. You might command the creature to accompany you on an adventure, to guard a location, or to deliver a message. The creature obeys the letter of your instructions, but if the creature is hostile to you, it strives to twist your words to achieve its own objectives. If the creature carries out your instructions completely before the spell ends, it travels to you to report this fact if you are on the same plane of existence. If you are on a different plane of existence, it returns to the place where you bound it and remains there until the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of a higher level, the duration increases to 10 days with a 6th-level slot, to 30 days with a 7th-level slot, to 180 days with an 8th-level slot, and to a year and a day with a 9th-level spell slot."
		},
		{
			"name": "Plane Shift",
			"level": 7,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unwilling or Self + 8 willing",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "forked metal rod",
			"cost": "250 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "266",
			"additional-detail": "Transport to another plane. You specify general location or teleportation circle.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You and up to eight willing creatures who link hands in a circle are transported to a different plane of existence. You can specify a target destination in general terms, such as the City of Brass on the Elemental Plane of Fire or the palace of Dispater on the second level of the Nine Hells, and you appear in or near that destination. If you are trying to reach the City of Brass, for example, you might arrive in is Street of Steel, before its Gate of Ashes, or looking at the city from across the Sea of Fire, at the DM's discretion.\n\nAlternatively, if you know the sigil sequence of a teleportation circle on another plane of existence, this spell can take you to that circle. If the teleportation circle is too small to hold all the creatures you transported, they appear in the closest unoccupied spaces next to the circle.\n\nYou can use this spell to banish an unwilling creature to another plane.  Chose a creature within your reach and make a melee spell attack against it. On a hit, the creature must make a Charisma saving throw. If the creature fails this save, it is transported to a random location on the plane of existence you specify. A creature so transported must find its own way back to your current plane of existence."
		},
		{
			"name": "Plant Growth",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "ft. or 1 mile radius",
				"size": 100
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "266",
			"additional-detail": "Cast short term (creatures move 1/4 speed) or long term (double food yield).",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell channels vitality into plants within a specific area. There are two possible uses for the spell, granting either immediate or long-term benefits.\n\nIf you cast this spell using 1 action, choose a point within range. All normal plants in a 100-foot radius centered on that point become thick and overgrown. A creature moving through the area must spend 4 feet of movement for every 1 foot it moves.\n\nYou can exclude one or more areas of any size within the spell’s area from being affected.\n\nIf you cast this spell over 8 hours, you enrich the land. All plants in a half-mile radius centered on a point within range become enriched for 1 year. The plants yield twice the normal amount of food when harvested."
		},
		{
			"name": "Poison Spray",
			"level": 0,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CON"
			},
			"damage-type": "Poison",
			"damage-heal": "DAM: 1d12",
			"sourcebook": "PHB",
			"page": "266",
			"additional-detail": "DAM increase. 5th level: 2d12, 11th level: 3d12, 17th level: 4d12.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You extend your hand toward a creature you can see within range and project a puff of noxious gas from your palm. The creature must succeed on a Constitution saving throw or take 1d12 poison damage.\n\nThis spell's damage increases by 1d12 when you reach 5th level (2d12), 11th level (3d12), and 17th level (4d12)."
		},
		{
			"name": "Polymorph",
			"level": 4,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "caterpillar cocoon",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "266",
			"additional-detail": "Transform creature's form. All stats change. Limited to actions of new form.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"trickery"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell transforms a creature that you can see within range into a new form. An unwilling creature must make a Wisdom saving throw to avoid the effect. A shapechanger automatically succeeds on this saving throw. \n\nThe transformation lasts for the duration, or until the target drops to 0 hit points or dies. The new form can be any beast whose challenge rating is equal to or less than the target's (or the target's level, if it doesn’t have a challenge rating). The target's game statistics, including mental ability scores, are replaced by the statistics of the chosen beast. It retains its alignment and personality. \n\nThe target assumes the hit points of its new form. When it reverts to its normal form, the creature returns to the number of hit points it had before it transformed. If it reverts as a result of dropping to 0 hit points, any excess damage carries over to its normal form.\n\nAs long as the excess damage doesn't reduce the creature's normal form to 0 hit points, it isn't knocked unconscious. \nThe creature is limited in the actions it can perform by the nature of its new form, and it can't speak, cast spells, or take any other action that requires hands or speech. \n\nThe target's gear melds into the new form. The creature can't activate, use, wield, or otherwise benefit from any of its equipment."
		},
		{
			"name": "Power Word Heal",
			"level": 9,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "HEAL: All HP",
			"sourcebook": "PHB",
			"page": "266",
			"additional-detail": "Target also cured of charm, fright, paralyze, or stun. Use reaction to stand up.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A wave of healing energy washes over the creature you touch. The target regains all its hit points. If the creature is charmed, frightened, paralyzed, or stunned, the condition ends. If the creature is prone, it can use its reaction to stand up. This spell has no effect on undead or constructs."
		},
		{
			"name": "Power Word Kill",
			"level": 9,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "See Details.",
			"sourcebook": "PHB",
			"page": "266",
			"additional-detail": "If target has <= 100 HP, it dies instantly. No effect otherwise. No saving throw.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You utter a word of power that can compel one creature you can see within range to die instantly.  If the creature you choose has 100 hit points or fewer, it dies. Otherwise, the spell has no effect."
		},
		{
			"name": "Power Word Stun",
			"level": 8,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Details."
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "267",
			"additional-detail": "Target <= 150 HP is stunned. Nothing otherwise. CON save at end of turn to end.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You speak a word of power that can overwhelm the mind of one creature you can see within range, leaving it dumbfounded. If the target has 150 hit points or fewer, it is stunned. Otherwise, the spell has no effect.\n\nThe stunned target must make a Constitution saving throw at the end of each of its turns.  On a successful save, this stunning effect ends."
		},
		{
			"name": "Prayer of Healing",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creatures you choose-less-than",
				"size": 6
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "See Details.",
			"sourcebook": "PHB",
			"page": "267",
			"additional-detail": "Targets HEAL 2d8 + casting ability modifier HP. No effect on undead/constructs.",
			"per-higher-spell-level": "HEAL extra 1d8.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Up to six creatures of your choice that you can see within range each regain hit points equal to 2d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the healing increases by 1d8 for each slot level above 2nd."
		},
		{
			"name": "Prestidigitation",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "267",
			"additional-detail": "Create minor magical effect.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "This spell is a minor magical trick that novice spellcasters use for practice. You create one of the following magical effects within range:\n\n* You create an instantaneous, harmless sensory effect, such as a shower of sparks, a puff of wind, faint musical notes, or an odd odor.\n* You instantaneously light or snuff out a candle, a torch, or a small campfire.\n* You instantaneously clean or soil an object no larger than 1 cubic foot.\n* You chill, warm, or flavor up to 1 cubic foot of nonliving material for 1 hour.\n* You make a color, a small mark, or a symbol appear on an object or a surface for 1 hour.\n* You create a nonmagical trinket or an illusory image that can fit in your hand and that lasts until the end of your next turn.\n\nIf you cast this spell multiple times, you can have up to three of its non-instantaneous effects active at a time, and you can dismiss such an effect as an action."
		},
		{
			"name": "Prismatic Spray",
			"level": 7,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cone",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "See Sourcebook.",
			"damage-heal": "See Sourcebook.",
			"sourcebook": "PHB",
			"page": "267",
			"additional-detail": "Send a rainbow of negative effects at enemies.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Eight multicolored rays of light flash from your hand. Each ray is a different color and has a different power and purpose. Each creature in a 60-foot code must make a Dexterity saving throw. For each target, roll a d8 to determine which color ray affects it.\n\n1. **Red.** The target takes 10d6 fire damage on a failed save, or half as much damage on a successful one.\n2. **Orange.** The target takes 10d6 acid damage on a failed save, or half as much damage on a successful one.\n3. **Yellow.** The target takes 10d6 lightning damage on a failed save, or half as much damage on a successful one.\n4. **Green.** The target takes 10d6 poison damage on a failed save, or half as much damage on a successful one.\n5. **Blue.** The target takes 10d6 cold damage on a failed save, or half as much damage on a successful one.\n6. **Indigo.** On a failed save, the target is restrained. It must then make a Constitution saving throw at the end of each of its turns. If it successfully saves three times, the spell ends. If it fails its save three times, it permanently turns to stone and is subjected to the petrified condition. The successes and failures don't need to be consecutive; keep track of both until the target collects three of a kind.\n7. **Violet.** On a failed save, the target is blinded. It must then make a Wisdom saving throw at the start of your next turn. A successful save ends the blindness. If it fails that save, the creature is transported to another plane of existence of the DM's choosing and is no longer blinded. (Typically, a creature that is on a plane that isn't its home plane is banished home, while other creatures are usually cast into the Astral or Ethereal planes.)\n8. **Special.** The target is struck by two rays. Roll twice more, rerolling any 8."
		},
		{
			"name": "Prismatic Wall",
			"level": 9,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "unknown",
				"text": "90x30 ft wall or 30ft dia. sphere"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "See Sourcebook.",
			"damage-heal": "See Sourcebook.",
			"sourcebook": "PHB",
			"page": "267",
			"additional-detail": "Create multicolored barrier with various effects.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A shimmering, multicolored plane of light forms a vertical opaque wall--up to 90 feet long, 30 feet high, and 1 inch thick--centered on a point you can see within range. Alternatively, you can shape the wall into a sphere up to 30 feet in diameter centered on a point you choose within range. The wall remains in place for the duration. If you position the wall so that it passes through a space occupied by a creature, the spell fails, and your action and the spell slot are wasted.\n\nThe wall sheds bright light out to a range of 100 feet and dim light for an additional 100 feet. You and creatures you designate at the time you cast the spell can pass through and remain near the wall without harm. If another creature that can see the wall moves to within 20 feet of it or starts its turn there, the creature must succeed on a Constitution saving throw or become blinded for 1 minute.\n\nThe wall consists of seven layers, each with a different color. When a creature attempts to reach into or pass through the wall, it does so one layer at a time through all thew wall's layers. As it passes or reaches through each layer, the creature must make a Dexterity saving throw or be affected by that layer's properties as described below.\n\nThe wall can be destroyed, also one layer at a time, in order from red to violet, by means specific to each layer. Once a layer is destroyed it remains so for the duration of the spell. A _rod of cancellation_ destroys a _prismatic wall_, but an _antimagic_ field has no effect on it.\n\n1. **Red.** The creature takes 10d6 fire damage on a failed save, or half as much damage on a successful one. While this layer is in place, nonmagical ranged attacks can't pass through the wall. The layer can be destroyed by dealing at least 25 cold damage to it.\n\n2. **Orange.** The creature takes 10d6 acid damage on a failed save, or half as much damage on a successful one. While this layer is in place, magic ranged attacks can't pass through the wall. The layer is destroyed by a strong wind.\n\n3. **Yellow.** The creature takes 10d6 lightning damage on a failed save, or half as much damage on a successful one. This layer can be destroyed by dealing at least 60 force damage to it.\n\n4. **Green.** The creature takes 10d6 poison damage on a failed save, or half as much damage on a successful one. A _passwall_ spell, or another spell of equal or greater level that can open a portal on a solid surface, destroys this layer.\n\n5. **Blue.** The creature takes 10d6 cold damage on a failed save, or half as much damage on a successful one. This layer can be destroyed by dealing at least 25 fire damage to it.\n\n6. **Indigo.** On a failed save, the creature is restrained. It must then make a Constitution saving throw at the end of each of its turns. If it successfully saves three times, the spell ends. If it fails its save three times, it permanently turns to stone and is subjected to the petrified condition. The success and failures don't need to be consecutive; keep track of both until the creature collects three of a kind.\n\n  While this layer is in place, spells can't be cast through the wall. The layer is destroyed by bright light shed by a _daylight_ spell or a similar spell of equal or higher level.\n\n7. **Violet.** On a failed save, the creature is blinded. It must then make a Wisdom saving throw at the start of your next turn. A successful save ends the blindness. If it fails that save, the creature is transported to another plane of the DM's choosing and is no longer blinded. (Typically, a creature that is on a plane that isn't its home plane is banished home, while other creatures are usually cast into the Astral or Ethereal planes.) This layer is destroyed by a _dispel magic_ spell or a similar spell of equal or higher level that can end spells and magical effects."
		},
		{
			"name": "Produce Flame",
			"level": 0,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 1d8",
			"sourcebook": "PHB",
			"page": "269",
			"additional-detail": "Create flame. DAM increase. 5th level: 2d8, 11th level: 3d8, 17th level: 4d8.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A flickering flame appears in your hand. The flame remains there for the duration and harms neither you nor your equipment. The flame sheds bright light in a 10-foot radius and dim light for an additional 10 feet. The spell ends if you dismiss it as an action or if you cast it again.\n\nYou can also attack with the flame, although doing so ends the spell. When you cast this spell, or as an action on a later turn, you can hurl the flame at a creature within 30 feet of you. Make a ranged spell attack. On a hit, the target takes 1d8 fire damage.\n\nThis spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
		},
		{
			"name": "Programmed Illusion",
			"level": 6,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. cube",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "fleece, jade dust",
			"cost": "25 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "269",
			"additional-detail": "Create illusion that performs specific action triggered by specific action.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create an illusion of an object, a creature, or some other visible phenomenon within range that activates when a specific condition occurs. The illusion is imperceptible until then. It must be no larger than a 30-foot cube, and you decide when you cast the spell how the illusion behaves and what sounds it makes. This scripted performance can last up to 5 minutes.\n\nWhen the condition you specify occurs, the illusion springs into existence and performs in the manner you described. Once the illusion finishes performing, it disappears and remains dormant for 10 minutes. After this time, the illusion can be activated again. The triggering condition can be as general or as detailed as you like, though it must be based on visual or audible conditions that occur within 30 feet of the area. For example, you could create an illusion of yourself to appear and warn off others who attempt to open a trapped door, or you could set the illusion to trigger only when a creature says the correct word or phrase.\n\nPhysical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image, and any noise it makes sounds hollow to the creature."
		},
		{
			"name": "Project Image",
			"level": 7,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "500 miles"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "small replica of self",
			"cost": "5 gp",
			"concentration": true,
			"duration": {
				"type": "day",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "Create image of self you can see/hear/speak/move (x2 speed) through. ",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create an illusory copy of yourself that lasts for the duration. The copy can appear at any location within range that you have seen before, regardless of intervening obstacles. The illusion looks and sounds like you but is intangible. If the illusion takes any damage, it disappears, and the spell ends.\n\nYou can use your action to move this illusion up to twice your speed, and make it gesture, speak, and behave in whatever way you choose. It mimics your mannerisms perfectly.\n\nYou can see through its eyes and hear through its ears as if you were in its space. On your turn as a bonus action, you can switch from using its senses to using your own, or back again. While you are using its senses, you are blinded and deafened in regard to your own surroundings.\n\nPhysical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image, and any noise it makes sounds hollow to the creature."
		},
		{
			"name": "Protection from Energy",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "Creature gains resistance to one of: acid, cold, fire, lightning, or thunder.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": [
				"ancients",
				"vengeance"
			],
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "For the duration, the willing creature you touch has resistance to one damage type of your choice: acid, cold, fire, lightning, or thunder."
		},
		{
			"name": "Protection from Evil and Good",
			"level": 1,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "holy water or powdered silver",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "Protect against certain types of creatures.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "Until the spell ends, one willing creature you touch is protected against certain types of creatures: aberrations, celestials, elementals, fey, fiends, and undead.\n\nThe protection grants several benefits. Creatures of those types have disadvantage on attack rolls against the target. The target also can't be charmed, frightened, or possessed by them. If the target is already charmed, frightened, or possessed by such a creature, the target has advantage on any new saving throw against the relevant effect."
		},
		{
			"name": "Protection from Poison",
			"level": 2,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "Target has 1 poison neutralized, advantage on poison save, resists poison DAM.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature. If it is poisoned, you neutralize the poison. If more than one poison afflicts the target, you neutralize one poison that you know is present, or you neutralize one at random. For the duration, the target has advantage on saving throws against being poisoned, and it has resistance to poison damage."
		},
		{
			"name": "Purify Food and Drink",
			"level": 1,
			"school": "Transmutation",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "ft. radius",
				"size": 5
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "All nonmagical food and drink in range is rendered free of poison and disease.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "All nonmagical food and drink within a 5-foot radius sphere centered on a point of your choice within range is purified and rendered free of poison and disease."
		},
		{
			"name": "Raise Dead",
			"level": 5,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "dead creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "DIAMOND",
			"cost": "500 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "Return target to life with 1 HP.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You return a dead creature you touch to life, provided that it has been dead no longer than 10 days. If the creature's soul is both willing and at liberty to rejoin the body, the creature returns to life with 1 hit point.\n\nThis spell also neutralizes any poisons and cures nonmagical diseases that affected the creature at the time it died. This spell doesn't, however, remove magical diseases, curses, or similar effects; if these aren't first removed prior to casting the spell, they take effect when the creature returns to life. The spell can’t return an undead creature to life.\n\nThis spell closes all mortal wounds, but it doesn't restore missing body parts. If the creature is lacking body parts or organs integral for its survival—its head, for instance—the spell automatically fails.\n\nComing back from the dead is an ordeal. The target takes a −4 penalty to all attack rolls, saving throws, and ability checks. Every time the target finishes a long rest, the penalty is reduced by 1 until it disappears."
		},
		{
			"name": "Rary's Telepathic Bond",
			"level": 5,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "willing creatures-less-than",
				"size": 8
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "eggshell of 2 different creatures",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "270",
			"additional-detail": "Targets can communicate telepathically with each other, but not to other planes.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You forge a telepathic link among up to eight willing creatures o f your choice within range, psychically linking each creature to all the others for the duration. Creatures with Intelligence scores o f 2 or less aren’t affected by this spell.\n\nUntil the spell ends, the targets can communicate telepathically through the bond whether or not they have a common language. The communication is possible over any distance, though it can’t extend to other planes of existence."
		},
		{
			"name": "Ray of Enfeeblement",
			"level": 2,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature in range",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "271",
			"additional-detail": "Target deals 1/2 DMG with STR weapon attacks. CON save to end at turn's end.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "A black beam of enervating energy springs from your finger toward a creature within range. Make a ranged spell attack against the target. On a hit, the target deals only half damage with weapon attacks that use Strength until the spell ends.\n\nAt the end of each of the target's turns, it can make a Constitution saving throw against the spell. On a success, the spell ends."
		},
		{
			"name": "Ray of Frost",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature in range",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Cold",
			"damage-heal": "DAM: 1d8",
			"sourcebook": "PHB",
			"page": "271",
			"additional-detail": "Speed -10ft. DAM increase. 5th level: 2d8, 11th level: 3d8, 17th level: 4d8.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A frigid beam of blue-white light streaks toward a creature within range. Make a ranged spell attack against the target. On a hit, it takes 1d8 cold damage, and its speed is reduced by 10 feet until the start of your next turn.\n\nThe spell’s damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
		},
		{
			"name": "Ray of Sickness",
			"level": 1,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature in range",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Poison",
			"damage-heal": "DAM: 2k8",
			"sourcebook": "PHB",
			"page": "271",
			"additional-detail": "Target also makes CON save. On fail, poisoned until end of next turn.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A ray of sickening greenish energy lashes out toward a creature within range. Make a ranged spell attack against the target. On a hit, the target takes 2d8 poison damage and must make a Constitution saving throw. On a failed save, it is also poisoned until the end of your next turn.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st."
		},
		{
			"name": "Regenerate",
			"level": 7,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "prayer wheel and holy water",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "HEAL: 4d8+15",
			"sourcebook": "PHB",
			"page": "271",
			"additional-detail": "Target HEAL 1 HP at start of every turn. Severed parts return after 2 minutes.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature and stimulate its natural healing ability. The target regains 4d8 + 15 hit points. For the duration of the spell, the target regains 1 hit point at the start of each of its turns (10 hit points each minute).\n\nThe target's severed body members (fingers, legs, tails, and so on), if any, are restored after 2 minutes. If you have the severed part and hold it to the stump, the spell instantaneously causes the limb to knit to the stump."
		},
		{
			"name": "Reincarnate",
			"level": 5,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "dead humanoid",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "RARE OILS AND UNGUENTS",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "271",
			"additional-detail": "Resurrect dead humanoid into a random humanoid body.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a dead humanoid or a piece of a dead humanoid. Provided that the creature has been dead no longer than 10 days, the spell forms a new adult body for it and then calls the soul to enter that body. If the target's soul isn't free or willing to do so, the spell fails.\n\nThe magic fashions a new body for the creature to inhabit, which likely causes the creature's race to change. The DM rolls a d100 and consults the following table to determine what form the creature takes when restored to life, or the DM chooses a form.\n\n|d100|Race|\n|--------|---------|\n|01-04|Dragonborn|\n|05-13|Dwarf, hill|\n|14-21|Dwarf, mountain|\n|22-25|Elf, dark|\n|26-34|Elf, high|\n|35-42|Elf, wood|\n|43-46|Gnome, forest|\n|47-52|Gnome, rock|\n|53-56|Half-elf|\n|57-60|Half-orc|\n|61-68|Halfling, lightfoot|\n|69-76|Halfling, stout|\n|77-96|Human|\n|97-00|Tiefling|\n\nThe reincarnated creature recalls its former life and experiences. It retains the capabilities it had in its original form, except it exchanges its original race for the new one and changes its racial traits accordingly."
		},
		{
			"name": "Remove Curse",
			"level": 3,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "271",
			"additional-detail": "Remove curse creature or break object's curse attunement to any target.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "At your touch, all curses affecting one creature or object end. If the object is a cursed magical item, its curse remains, but the spell breaks its owner's attunement to the object so it can be removed or discarded."
		},
		{
			"name": "Resistance",
			"level": 0,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "miniature cloak",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "Once before spell ends, add 1d4 to a saving throw. Roll before or after save.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch one willing creature. Once before the spell ends, the target can roll a d4 and add the number rolled to one saving throw of its choice. It can roll the die before or after making the saving throw. The spell then ends."
		},
		{
			"name": "Resurrection",
			"level": 7,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "dead creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "DIAMOND",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "Resurrect dead creaature. See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a dead creature that has been dead for no more than a century, that didn't die of old age, and that isn't undead. If its soul is free and willing, the target returns to life with all its hit points.\n\nThis spell neutralizes any poisons and cures normal diseases afflicting the creature when it died. It doesn't however, remove magical diseases, curses, and the like; if such effects aren't removed prior to casting the spell, the afflict the target on its return to life.\n\nThis spell closes all mortal wounds and restores any missing body parts.\n\nComing back from the dead is an ordeal. The target takes a -4 penalty to all attack rolls, saving throws, and ability checks. Every time the target finishes a long rest, the penalty is reduced by 1 until it disappears.\n\nCasting this spell to restore life to a creature that has been dead for one year or longer taxes you greatly. Until you finish a long rest, you can't cast spells again, and you have disadvantage on all attack rolls, ability checks, and saving throws."
		},
		{
			"name": "Reverse Gravity",
			"level": 7,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 100
			},
			"target-area": {
				"type": "ft. radius",
				"size": 50
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "lodestone and iron filings",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "DEX (grab fixed object)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "Creatures fall upwards, taking falling damage. Fall again once spell ends.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell reverses gravity in a 50-foot-radius, 100-foot high cylinder centered on a point within range. All creatures and objects that aren't somehow anchored to the ground in the area fall upward and reach the top of the area when you cast this spell. A creature can make a Dexterity saving throw to grab onto a fixed object it can reach, thus avoiding the fall.\n\nIf some solid object (such as a ceiling) is encountered in this fall, falling objects and creature strike it just as they would during a normal downward fall. If an object or creature reaches the top of the area without striking anything, it remains there, oscillating slightly, for the duration.\n\nAt the end of the duration, affected objects and creatures fall back down."
		},
		{
			"name": "Revivify",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "DIAMOND",
			"cost": "300 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "Raise creature that died within 1 minute to 1 HP. Doesn't restore missing parts.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature that has died within the last minute. That creature returns to life with 1 hit point. This spell can’t return to life a creature that has died of old age, nor can it restore any missing body parts."
		},
		{
			"name": "Rope Trick",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "ft. rope",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "powdered corn, parchment loop",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "Climb rope to other space that can hide 8 Medium creatures. Can see outside.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a length of rope that is up to 60 feet long. One end of the rope then rises into the air until the whole rope hangs perpendicular to the ground. At the upper end of the rope, an invisible entrance opens to an extradimensional space that lasts until the spell ends. \n\nThe extradimensional space can be reached by climbing to the top of the rope. The space can hold as many as eight Medium or smaller creatures. The rope can be pulled into the space, making the rope disappear from view outside the space.\n\nAttacks and spells can't cross through the entrance into or out of the extradimensional space, but those inside can see out of it as if through a 3-foot-by-5-foot window centered on the rope.\n\nAnything inside the extradimensional space drops out when the spell ends."
		},
		{
			"name": "Sacred Flame",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 1d8",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "No cover. DAM increase. 5th level: 2d8, 11th level: 3d8, 17th level: 4d8.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "Flame-like radiance descends on a creature that you can see within range. The target must succeed on a Dexterity saving throw or take 1d8 radiant damage. The target gains no benefit from cover for this saving throw.\n\nThe spell’s damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
		},
		{
			"name": "Sanctuary",
			"level": 1,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small silver mirror",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "272",
			"additional-detail": "Those choosing to attack target must make WIS save or choose new target.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": [
				"devotion"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You ward a creature within range against attack. Until the spell ends, any creature who targets the warded creature with an attack or a harmful spell must first make a Wisdom saving throw. On a failed save, the creature must choose a new target or lose the attack or spell. This spell doesn’t protect the warded creature from area effects, such as the explosion of a fireball.\n\nIf the warded creature makes an attack or casts a spell that affects an enemy creature, this spell ends."
		},
		{
			"name": "Scorching Ray",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creatures-less-than",
				"size": 3
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 2d6x3",
			"sourcebook": "PHB",
			"page": "273",
			"additional-detail": "Shoot 3 rays at up to 3 targets.",
			"per-higher-spell-level": "One additional ray.",
			"bard": false,
			"cleric": [
				"light"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create three rays of fire and hurl them at targets within range. You can hurl them at one target or several.\n\nMake a ranged spell attack for each ray. On a hit, the target takes 2d6 fire damage.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, you create one additional ray for each slot level above 2nd."
		},
		{
			"name": "Scrying",
			"level": 5,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "minutes",
				"size": 10
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "scrying focus",
			"cost": "1000 gp",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "273",
			"additional-detail": "Spy on a target located on the same plane as you.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": true,
			"paladin": [
				"vengeance"
			],
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "You can see and hear a particular creature you choose that is on the same plane of existence as you. The target must make a Wisdom saving throw, which is modified by how well you know the target and the sort of physical connection you have to it. If a target knows you're casting this spell, it can fail the saving throw voluntarily if it wants to be observed.\n\n|Knowledge|Save Modifier|\n|---------|:-----------:|\n|Secondhand (you have heard of the target)| +5|\n|Firsthand (you have met the target)| 0|\n|Familiar (you know the target well)| -5|\n\n|Connection|Save Modifier|\n|----------|:-----------:|\n|Likeness or picture| -2|\n|Possession or garment| -4|\n|Body part, lock of hair, bit of nail, or the like| -10|\n\nOn a successful save, the target isn't affected, and you can't use this spell against it again for 24 hours. On a failed save, the spell creates an invisible sensor within 10 feet of the target. You can see and hear through the sensor as if you were there. The sensor moves with the target, remaining within 10 feet of it for the duration. A creature that can see invisible objects sees the sensor as a luminous orb about the size of your fist.\n\nInstead of targeting a creature, you can choose a location you have seen before as the target of this spell. When you do, the sensor appears at that location and doesn’t move."
		},
		{
			"name": "Searing Smite",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-weapon"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 1d6",
			"sourcebook": "PHB",
			"page": "274",
			"additional-detail": "Target takes initial DAM and CON save at start of each turn or take 1d6 fire.",
			"per-higher-spell-level": "Extra 1d6 initial DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a melee weapon attack during the spell's duration, your weapon flares with white-hot intensity, and the attack deals an extra 1d6 fire damage to the target and causes the target to ignite in flames. At the start of each of its turns until the spell ends, the target must make a Constitution saving throw. On a failed save, it takes 1d6 fire damage. On a successful save, the spell ends. If the target or a creature within 5 feet of it uses an action to put out the flames, or if some other effect douses the flames (such as the target being submerged in water), the spell ends.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the initial extra damage dealt by the attack increases by 1d6 for each slot level above 1st."
		},
		{
			"name": "See Invisibility",
			"level": 2,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of talc and silver powder",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "274",
			"additional-detail": "See invisible and ethereal creatures.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "For the duration, you see invisible creatures and objects as if they were visible, and you can see into the Ethereal Plane. Ethereal creatures and objects appear ghostly and translucent."
		},
		{
			"name": "Seeming",
			"level": 5,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "Any creatures in range"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "274",
			"additional-detail": "Disguise willing or unwillig creatures as other similar creatures, including outfits.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell allows you to change the appearance of any number of creatures that you can see within range. You give each target you choose a new, illusory appearance. An unwilling target can make a Charisma saving throw, and if it succeeds, it is unaffected by this spell. \n\nThe spell disguises physical appearance as well as clothing, armor, weapons, and equipment. You can make each creature seem 1 foot shorter or taller and appear thin, fat, or in between. You can't change a target's body type, so you must choose a form that has the same basic arrangement of limbs. Otherwise, the extent of the illusion is up to you. The spell lasts for the duration, unless you use your action to dismiss it sooner. \n\nThe changes wrought by this spell fail to hold up to physical inspection. For example, if you use this spell to add a hat to a creature's outfit, objects pass through the hat, and anyone who touches it would feel nothing or would feel the creature's head and hair. If you use this spell to appear thinner than you are, the hand of someone who reaches out to touch you would bump into you while it was seemingly still in midair. \n\nA creature can use its action to inspect a target and make an Intelligence (Investigation) check against your spell save DC. If it succeeds, it becomes aware that the target is disguised."
		},
		{
			"name": "Sending",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "unlimited"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "short piece of fine copper wire",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "274",
			"additional-detail": "Send <= 25 word message to known creature. Get similar reply.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You send a short message of twenty-five words or less to a creature with which you are familiar. The creature hears the message in its mind, recognizes you as the sender if it knows you, and can answer in a like manner immediately. The spell enables creatures with Intelligence scores of at least 1 to understand the meaning of your message.\n\nYou can send the message across any distance and even to other planes of existence, but if the target is on a different plane than you, there is a 5 percent chance that the message doesn’t arrive."
		},
		{
			"name": "Sequester",
			"level": 7,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "GEM POWDER",
			"cost": "5000 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "274",
			"additional-detail": "Hide target from detection, falls into suspended animation. Condition can end it.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "By means of this spell, a willing creature or an object can be hidden away, safe from detection for the duration. When you cast the spell and touch the target, it becomes invisible and can't be targeted by divination spells or perceived through scrying sensors created by divination spells.\n\nIf the target is a creature, it falls into a state of suspended animation. Time ceases to flow for it, and it doesn't grow older.\n\nYou can set a condition for the spell to end early. The condition can be anything you choose, but it must occur or be visible within 1 mile of the target.  Examples include \"after 1,000 years\" or \"when the tarrasque awakens.\" This spell also ends if the target takes any damage."
		},
		{
			"name": "Shapechange",
			"level": 9,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "jade circlet",
			"cost": "1500 gp",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "274",
			"additional-detail": "Assume the form of a different creature.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You assume the form of a different creature for the duration. The new form can be of any creature with a challenge rating equal to your level or lower. The creature can't be a construct or an undead, and you must have seen the sort of creature at least once. You transform into an average example of that creature, one without any class levels or the Spellcasting trait.\n\nYour game statistics are replaced by the statistics of the chosen creature, though you retain your alignment and Intelligence, Wisdom and Charisma scores. You also retain all of your skill and saving throw proficiencies, in addition to gaining those of the creature. If the creature has the same proficiency as you and the bonus listed in its statistics is higher than yours, use the creature's bonus in place of yours. You can't use any legendary actions or lair actions of the new form.\n\nYou assume the hit points and Hit Dice of the new form. When you revert to your normal form, you return to the number of hit points you had before you transformed. If you revert as a result of dropping to 0 hit points, any excess damage carries over to your normal form. As long as the excess damage doesn't reduce your normal form to 0 hit points, you aren't knocked unconscious.\n\nYou retain the benefit of any features from your class, race, or other source and can use them, provided that your new form is physically capable of doing so. You can't use any special senses you have (for example, darkvision) unless your new form also has that sense. You can only speak if the creature can normally speak.\n\nWhen you transform, you choose whether your equipment falls to the ground, merges into the new form, or is worn by it. Worn equipment functions as normal. The DM determines whether it is practical for the new form to wear a piece of equipment, based on the creature's shape and size. Your equipment doesn't change shape or size to match the new form, and any equipment that the new form can't wear must either fall to the ground or merge into your new form. Equipment that merges has no effect in that state.\n\nDuring this spell's duration, you can use your action to assume a different form following the same restrictions and rules for the original form, with one exception: if your new form has more hit points than your current one, you hit points remain at their current value."
		},
		{
			"name": "Shatter",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. sphere",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "chip of mica",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "CON"
			},
			"damage-type": "Thunder",
			"damage-heal": "DAM: 3d8",
			"sourcebook": "PHB",
			"page": "275",
			"additional-detail": "Inorganic creatures have disadvantage to save. Objects take DAM too.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": true,
			"cleric": [
				"tempest"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "A sudden loud ringing noise, painfully intense, erupts from a point of your choice within range. Each creature in a 10-foot-radius sphere centered on that point must make a Constitution saving throw. A creature takes 3d8 thunder damage on a failed save, or half as much damage on a successful one. A creature made of inorganic material such as stone, crystal, or metal has disadvantage on this saving throw.\n\nA nonmagical object that isn't being worn or carried also takes the damage if it's in the spell's area.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d8 for each slot level above 2nd."
		},
		{
			"name": "Shield",
			"level": 1,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "reaction",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "275",
			"additional-detail": "Gain +5 bonus to AC, including triggering attack. Negates Magic Missile attacks.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "An invisible barrier of magical force appears and protects you. Until the start of your next turn, you have a +5 bonus to AC, including against the triggering attack, and you take no damage from magic missile."
		},
		{
			"name": "Shield of Faith",
			"level": 1,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small parchment with holy text",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "275",
			"additional-detail": "Target gains +2 bonus to AC.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A shimmering field appears and surrounds a creature of your choice within range, granting it a +2 bonus to AC for the duration."
		},
		{
			"name": "Shillelagh",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "club or quarterstaff",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "mistletoe, shamrock, weapon",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "275",
			"additional-detail": "Use casting ability instead of STR for attack,damage. Weapon does 1d8 DMG.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The wood of a club or a quarterstaff you are holding is imbued with nature's power. For the duration, you can use your spellcasting ability instead of Strength for the attack and damage rolls of melee attacks using that weapon, and the weapon's damage die becomes a d8. The weapon also becomes magical, if it isn't already. The spell ends if you cast it again or if you let go of the weapon."
		},
		{
			"name": "Shocking Grasp",
			"level": 0,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Lightning",
			"damage-heal": "DAM: 1d8",
			"sourcebook": "PHB",
			"page": "275",
			"additional-detail": "Target can't take reactions until next turn. Advantage if target has metal armor.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Lightning springs from your hand to deliver a shock to a creature you try to touch. Make a melee spell attack against the target. You have advantage on the attack roll if the target is wearing armor made of metal. On a hit, the target takes 1d8 lightning damage, and it can’t take reactions until the start of its next turn.\n\nThe spell’s damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
		},
		{
			"name": "Silence",
			"level": 2,
			"school": "Illusion",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "275",
			"additional-detail": "Creatures in area are deafened, immune to thunder DMG, can't cast verbally.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": [
				"desert"
			],
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "For the duration, no sound can be created within or pass through a 20-foot-radius sphere centered on a point you choose within range. Any creature or object entirely inside the sphere is immune to thunder damage, and creatures are deafened while entirely inside it."
		},
		{
			"name": "Silent Image",
			"level": 1,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. cube",
				"size": 15
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of fleece",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "276",
			"additional-detail": "Create visual-only illusion. Use action to make it move. Investigation to discover.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create the image of an object, a creature, or some other visible phenomenon that is no larger than a 15-foot cube. The image appears at a spot within range and lasts for the duration. The image is purely visual; it isn’t accompanied by sound, smell, or other sensory effects. \n\nYou can use your action to cause the image to move to any spot within range. As the image changes location, you can alter its appearance so that its movements appear natural for the image. For example, if you create an image of a creature and move it, you can alter the image so that it appears to be walking.\n\nPhysical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image."
		},
		{
			"name": "Simulacrum",
			"level": 7,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "hours",
				"size": 12
			},
			"range": {
				"type": "touch"
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "See Sourcebook.",
			"cost": "1500 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "276",
			"additional-detail": "Create duplicate of beast or humanoid that obeys your commands.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You shape an illusory duplicate of one beast or humanoid that is within range for the entire casting time of the spell. The duplicate is a creature, partially real and formed from ice or snow, and it can take actions and otherwise be affected as a normal creature. It appears to be the same as the original, but it has half the creature's hit point maximum and is formed without any equipment. Otherwise, the illusion uses all the statistics of the creature it duplicates.\n\nThe simulacrum is friendly to you and creatures you designate. It obeys your spoken commands, moving and acting in accordance with your wishes and acting on your turn in combat. The simulacrum lacks the ability to learn or become more powerful, so it never increases its level or other abilities, nor can it regain expended spell slots.\n\nIf the simulacrum is damaged, you can repair it in an alchemical laboratory, using rare herbs and minerals worth 100gp per hit point it regains. The simulacrum lasts until it drops to 0 hit points, at which point it reverts to snow and melts instantly.\n\nIf you cast this spell again, any currently active duplicates you created with this spell are instantly destroyed."
		},
		{
			"name": "Sleep",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "ft. radius",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of fine sand",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "276",
			"additional-detail": "5d8 total HP of creatures in area fall asleep. Go in order of lowest HP to hightest.",
			"per-higher-spell-level": "Addition 2d8 HP fall asleep.",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell sends creatures into a magical slumber. Roll 5d8; the total is how many hit points of creatures this spell can affect. Creatures within 20 feet of a point you choose within range are affected in ascending order of their current hit points (ignoring unconscious creatures).\n\nStarting with the creature that has the lowest current hit points, each creature affected by this spell falls unconscious until the spell ends, the sleeper takes damage, or someone uses an action to shake or slap the sleeper awake. Subtract each creature’s hit points from the total before moving on to the creature with the next lowest hit points. A creature’s hit points must be equal to or less than the remaining total for that creature to be affected.\n\nUndead and creatures immune to being charmed aren’t affected by this spell.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d8 for each slot level above 1st."
		},
		{
			"name": "Sleet Storm",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "ft. rad. 20 ft. tall cylinder",
				"size": 40
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pinch of dust, drops of water",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "276",
			"additional-detail": "Difficult terrain.Each turn,DEX save or fall prone,CON save or lose concentration.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"tempest"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Until the spell ends, freezing rain and sleet fall in a 20-foot-tall cylinder with a 40-foot radius centered on a point you choose within range. The area is heavily obscured, and exposed flames in the area are doused.\n\nThe ground in the area is covered with slick ice, making it difficult terrain. When a creature enters the spell’s area for the first time on a turn or starts its turn there, it must make a Dexterity saving throw. On a failed save, it falls prone.\n\nIf a creature is concentrating in the spell’s area, the creature must make a successful Constitution saving throw against your spell save DC or lose concentration."
		},
		{
			"name": "Slow",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "creatures in 40 ft. cube-less-than",
				"size": 6
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "drop of molasses",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Affected creatures become slowed.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"arctic"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You alter time around up to six creatures of your choice in a 40-foot cube within range. Each target must succeed on a wisdom saving throw or be affected by this spell for the duration.\n\nAn affected target’s speed is halved, it takes a -2 penalty to AC and Dexterity saving throws, and it can’t use reactions. On its turn, it can use either an action or a bonus action, not both. Regardless of the creature’s abilities or magic items, it can’t make more than one melee or ranged attack during its turn.\n\nIf the creature attempts to cast a spell with a casting time of 1 action, roll a d20. On an 11 or higher, the spell doesn’t take effect until the creature’s next turn, and the creature must use its action on that turn to complete the spell. If it can’t, the spell is wasted.\n\nA creature affected by this spell makes another Wisdom saving throw at the end of its turn. On a successful save, the effect ends for it."
		},
		{
			"name": "Spare the Dying",
			"level": 0,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "living creature at 0 HP",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Stabilize dying creature.  No effect on undead or constructs.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a living creature that has 0 hit points. The creature becomes stable. This spell has no effect on undead or constructs."
		},
		{
			"name": "Speak with Animals",
			"level": 1,
			"school": "Divination",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Understand and speak to beasts. Get info about nearby locations and monsters.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You gain the ability to comprehend and verbally communicate with beasts for the duration. The knowledge and awareness of many beasts is limited by their intelligence, but at a minimum, beasts can give you information about nearby locations and monsters, including whatever they can perceive or have perceived within the past day. You might be able to persuade a beast to perform a small favor for you, at the DM's discretion."
		},
		{
			"name": "Speak with Dead",
			"level": 3,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "dead creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "burning incense",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Ask corpse <= 5 questions. Get brief, cryptic answers. Can be lies.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You grant the semblance o f life and intelligence to a corpse of your choice within range, allowing it to answer the questions you pose. The corpse must still have a mouth and can’t be undead. The spell fails if the corpse was the target o f this spell within the last 10 days.\n\nUntil the spell ends, you can ask the corpse up to five questions. The corpse knows only what it knew in life, including the languages it knew. Answers are usually brief, cryptic, or repetitive, and the corpse is under no compulsion to offer a truthful answer if you are hostile to it or it recognizes you as an enemy. This spell doesn’t return the creature’s soul to its body, only its animating spirit. Thus, the corpse can’t learn new information, doesn’t comprehend anything that has happened since it died, and can’t speculate about future events."
		},
		{
			"name": "Speak with Plants",
			"level": 3,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Animate plants to communicate with and perform tasks.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You imbue plants within 30 feet of you with limited sentience and animation, giving them the ability to communicate with you and follow your simple commands. You can question plants about events in the spell’s area within the past day, gaining information about creatures that have passed, weather, and other circumstances.\n\nYou can also turn difficult terrain caused by plant growth (such as thickets and undergrowth) into ordinary terrain that lasts for the duration. Or you can turn ordinary terrain where plants are present into difficult terrain that lasts for the duration, causing vines and branches to hinder pursuers, for example.\n\nPlants might be able to perform other tasks on your behalf, at the DM’s discretion. The spell doesn’t enable plants to uproot themselves and move about, but they can freely move branches, tendrils, and stalks.\n\nIf a plant creature is in the area, you can communicate with it as if you shared a common language, but you gain no magical ability to influence it.\n\nThis spell can cause the plants created by the entangle spell to release a restrained creature."
		},
		{
			"name": "Spider Climb",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "spider and drop of bitumen",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Target can walk on walls or ceiling. Climbing speed becomes walking speed.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"forest",
				"underdark"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "Until the spell ends, one willing creature you touch gains the ability to move up, down, and across vertical surfaces and upside down along ceilings, while leaving its hands free. The target also gains a climbing speed equal to its walking speed."
		},
		{
			"name": "Spike Growth",
			"level": 2,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "ft. radius",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "7 sharp thorns or twigs",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "277",
			"additional-detail": "Difficult terrain.  Moving into or within area takes 2d4 piercing DAM per 5 ft.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The ground in a 20-foot radius centered on a point within range twists and sprouts hard spikes and thorns. The area becomes difficult terrain for the duration. When a creature moves into or within the area, it takes 2d4 piercing damage for every 5 feet it travels. \n\nThe transformation of the ground is camouflaged to look natural. Any creature that can't see the area at the time the spell is cast must make a Wisdom (Perception) check against your spell save DC to recognize the terrain as hazardous before entering it."
		},
		{
			"name": "Spirit Guardian",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 15
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "holy symbol",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "WIS"
			},
			"damage-type": "Radiant or Necrotic",
			"damage-heal": "DAM: 3d8",
			"sourcebook": "PHB",
			"page": "278",
			"additional-detail": "Enemy creature speed halved. DMG on enter area: necrotic if evil, radiant if not.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You call forth spirits to protect you. They flit around you to a distance of 15 feet for the duration. If you are good or neutral, their spectral form appears angelic or fey (your choice). If you are evil, they appear fiendish.\n\nWhen you cast this spell, you can designate any number of creatures you can see to be unaffected by it. An affected creature’s speed is halved in the area, and when the creature enters the area for the first time on a turn or starts its turn there, it must make a Wisdom saving throw. On a failed save, the creature takes 3d8 radiant damage (if you are good or neutral) or 3d8 necrotic damage (if you are evil). On a successful save, the creature takes half as much damage.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d8 for each slot level above 3rd."
		},
		{
			"name": "Spiritual Weapon",
			"level": 2,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Force",
			"damage-heal": "See Details",
			"sourcebook": "PHB",
			"page": "278",
			"additional-detail": "Magical weapon does 1d8 + casting ability DMG. Can move 20 ft. per turn.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a floating, spectral weapon within range that lasts for the duration or until you cast this spell again. When you cast the spell, you can make a melee spell attack against a creature within 5 feet of the weapon. On a hit, the target takes force damage equal to 1d8 + your spellcasting ability modifier.\n\nAs a bonus action on your turn, you can move the weapon up to 20 feet and repeat the attack against a creature within 5 feet of it. The weapon can take whatever form you choose. Clerics of deities who are associated with a particular weapon (as St. Cuthbert is known for his mace and Thor for his hammer) make this spell’s effect resemble that weapon.\n\n**At Higher Levels**. When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d8 for every two slot levels above the 2nd."
		},
		{
			"name": "Staggering Smite",
			"level": 4,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-weapon"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 4d6",
			"sourcebook": "PHB",
			"page": "278",
			"additional-detail": "WIS save or disadvantage on attack & ability checks; can't take reactions.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit a creature with a melee weapon attack during this spell's duration, your weapon pierces both body and mind, and the attack deals an extra 4d6 psychic damage to the target. The target must make a Wisdom saving throw. On a failed save, it has disadvantage on attack rolls and ability checks, and can't take reactions, until the end of its next turn."
		},
		{
			"name": "Stinking Cloud",
			"level": 3,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 90
			},
			"target-area": {
				"type": "sphere",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "rotten egg or skunk cabbage",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CON"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "278",
			"additional-detail": "Creatures that need to breathe spend turn retching. Wind disperses cloud.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": [
				"swamp",
				"underdark"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a 20-foot-radius sphere of yellow, nauseating gas centered on a point within range. The cloud spreads around corners, and its area is heavily obscured. The cloud lingers in the air for the duration.\n\nEach creature that is completely within the cloud at the start of its turn must make a Constitution saving throw against poison. On a failed save, the creature spends its action that turn retching and reeling. Creatures that don’t need to breathe or are immune to poison automatically succeed on this saving throw.\n\nA moderate wind (at least 10 miles per hour) disperses the cloud after 4 rounds. A strong wind (at least 20 miles per hour) disperses it after 1 round."
		},
		{
			"name": "Stone Shape",
			"level": 4,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "ft. cube",
				"size": 5
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "soft clay in desired shape",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "278",
			"additional-detail": "Reshape stone into any rough shape you wish.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You touch a stone object of Medium size or smaller or a section of stone no more than 5 feet in any dimension and form it into any shape that suits your purpose. So, for example, you could shape a large rock into a weapon, idol, or coffer, or make a small passage through a wall, as long as the wall is less than 5 feet thick. You could also shape a stone door or its frame to seal the door shut. The object you create can have up to two hinges and a latch, but finer mechanical detail isn’t possible."
		},
		{
			"name": "Stoneskin",
			"level": 4,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "DIAMOND DUST",
			"cost": "100 gp",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "278",
			"additional-detail": "Target gains resistance to nonmagical bludgeoning, piercing, and slashing DMG.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"war"
			],
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell turns the flesh of a willing creature you touch as hard as stone. Until the spell ends, the target has resistance to nonmagical bludgeoning, piercing, and slashing damage."
		},
		{
			"name": "Storm of Vengeance",
			"level": 9,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "sight"
			},
			"target-area": {
				"type": "ft. radius",
				"size": 360
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "See Sourcebook.",
			"damage-heal": "See Sourcebook.",
			"sourcebook": "PHB",
			"page": "279",
			"additional-detail": "Magical storm attacks targets in range.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A churning storm cloud forms, centered on a point you can see and spreading to a radius of 360 feet. Lightning flashes in the area, thunder booms, and strong winds roar. Each creature under the cloud (no more than 5,000 feet beneath the cloud) when it appears must make a Constitution saving throw. On a failed save, a creature takes 2d6 thunder damage and becomes deafened for 5 minutes.\n\nEach round you maintain concentration on this spell, the storm produces additional effects on your turn.\n\n**Round 2.** Acidic rain falls from the cloud. Each creature and object under the cloud takes 1d6 acid damage.\n\n**Round 3.** You call six bolts of lightning from the cloud to strike six creatures or objects of your choice beneath the cloud. A given creature or object can't be struck by more than one bolt. A struck creature must make a Dexterity saving throw. The creature takes 10d6 lightning damage on a failed save, or half as much damage on a successful one.\n\n**Round 4.** Hailstones rain down from the cloud. Each creature under the cloud takes 2d6 bludgeoning damage.\n\n**Round 5-10.** Gusts and freezing rain assail the area under the cloud. The area becomes difficult terrain and is heavily obscured. Each creature there takes 1d6 cold damage. Ranged weapon attacks in the area are impossible. The wind and rain count as a severe distraction for the purposes of maintaining concentration on spells. Finally, gusts of strong wind (ranging from 20 to 50 miles per hour) automatically disperse fog, mists, and similar phenomena in the area, whether mundane or magical."
		},
		{
			"name": "Suggestion",
			"level": 2,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "snake's tongue, honeycomb ",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "279",
			"additional-detail": "Target follows reasonable course of action you suggest. Can specify conditions.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": [
				"knowledge"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You suggest a course of activity (limited to a sentence or two) and magically influence a creature you can see within range that can hear and understand you. Creatures that can't be charmed are immune to this effect. The suggestion must be worded in such a manner as to make the course of action sound reasonable. Asking the creature to stab itself, throw itself onto a spear, immolate itself, or do some other obviously harmful act ends the spell.\n\nThe target must make a Wisdom saving throw. On a failed save, it pursues the course of action you described to the best of its ability. The suggested course of action can continue for the entire duration. If the suggested activity can be completed in a shorter time, the spell ends when the subject finishes what it was asked to do.\n\nYou can also specify conditions that will trigger a special activity during the duration. For example, you might suggest that a knight give her warhorse to the first beggar she meets. If the condition isn't met before the spell expires, the activity isn't performed.\n\nIf you or any of your companions damage the target, the spell ends."
		},
		{
			"name": "Sunbeam",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. line",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "magnifying glass",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON (Half DAM, no blindness)"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 6d8",
			"sourcebook": "PHB",
			"page": "279",
			"additional-detail": "Creatures are blinded until your next turn. Use your action to make a new line.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A beam of brilliant light flashes out from your hand in a 5-foot-wide, 60-foot-long line. Each creature in the line must make a Constitution saving throw. On a failed save, a creature takes 6d8 radiant damage and is blinded until your next turn. On a successful save, it takes half as much damage and isn't blinded by this spell. Undead and oozes have disadvantage on this saving throw.\n\nYou can create a new line of radiance as your action on any turn until the spell ends.\n\nFor the duration, a mote of brilliant radiance shines in your hand. It sheds bright light in a 30-foot radius and dim light for an additional 30 feet. This light is sunlight."
		},
		{
			"name": "Sunburst",
			"level": 8,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 150
			},
			"target-area": {
				"type": "sphere",
				"size": 60
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "fire and piece of sunstone",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON (Half DAM, no blindness)"
			},
			"damage-type": "Radiant",
			"damage-heal": "DAM: 12d6",
			"sourcebook": "PHB",
			"page": "279",
			"additional-detail": "Creatures are blinded for 1 minute (CON save at end of turn to end).",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "Brilliant sunlight flashes in a 60-foot radius centered on a point you choose within range. Each creature in that light must make a Constitution saving throw. On a failed save, a creature takes 12d6 radiant damage and is blinded for 1 minute. On a successful save, it takes half as much damage and isn't blinded by this spell. Undead and oozes have disadvantage on this saving throw.\n\nA creature blinded by this spell makes another Constitution saving throw at the end of each of its turns. On a successful save, it is no longer blinded.\n\nThis spell dispels any darkness in its area that was created by a spell."
		},
		{
			"name": "Swift Quiver",
			"level": 5,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "unknown",
				"text": "Spell component"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "quiver with at least 1 ammo",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "279",
			"additional-detail": "Quiver produces endless ammo.Use bonus action for 2 attacks using ammo.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You transmute your quiver so it produces an endless supply of nonmagical ammunition, which seems to leap into your hand when you reach for it.\n\nOn each of your turns until the spell ends, you can use a bonus action to make two attacks with a weapon that uses ammunition from the quiver. Each time you make such a ranged attack, your quiver magically replaces the piece of ammunition you used with a similar piece of nonmagical ammunition. Any pieces of ammunition created by this spell disintegrate when the spell ends. If the quiver leaves your possession, the spell ends."
		},
		{
			"name": "Symbol",
			"level": 7,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "surface or object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "Hg, P, DIAMOND and OPAL",
			"cost": "1000 gp",
			"concentration": false,
			"duration": {
				"type": "until_dispelled_or_triggered"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"damage-type": "See Sourcebook.",
			"damage-heal": "See Sourcebook.",
			"sourcebook": "PHB",
			"page": "280",
			"additional-detail": "Inscribe harmful magical glyph on surface.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "When you cast this spell, you inscribe a harmful glyph either on a surface (such as a section of floor, a wall, or a table) or within an object that can be closed to conceal the glyph (such as a book, a scroll, or a treasure chest). If you choose a surface, the glyph can cover an area of the surface no larger than 10 feet in diameter. If you choose an object, that object must remain in its place; if the object is moved more than 10 feet from where you cast this spell, the glyph is broken, and the spell ends without being triggered.\n\nThe glyph is nearly invisible, requiring an Intelligence (Investigation) check against your spell save DC to find it.\n\nYou decide what triggers the glyph when you cast the spell. For glyphs inscribed on a surface, the most typical triggers include touching or stepping on the glyph, removing another object covering it, approaching within a certain distance of it, or manipulating the object that holds it. For glyphs inscribed within an object, the most common triggers are opening the object, approaching within a certain distance of it, or seeing or reading the glyph.\n\nYou can further refine the trigger so the spell is activated only under certain circumstances or according to a creature's physical characteristics (such as height or weight), or physical kind (for example, the ward could be set to affect hags or shapechangers). You can also specify creatures that don't trigger the glyph, such as those who say a certain password.\n\nWhen you inscribe the glyph, choose one of the options below for its effect. Once triggered, the glyph glows, filling a 60-foot-radius sphere with dim light for 10 minutes, after which time the spell ends. Each creature in the sphere when the glyph activate is targeted by its effect, as is a creature that enters the sphere for the first time on a turn or ends its turn there.\n\n**Death.** Each target must make a Constitution saving throw, taking 10d10 necrotic damage on a failed save, or half as much damage on a successful save.\n\n**Discord.** Each target must make a Constitution saving throw. On a failed save, a target bickers and argues with other creatures for 1 minute. During this time it is incapable of meaningful communication and has disadvantage on attack rolls and ability checks.\n\n**Fear.** Each target must make a Wisdom saving throw and becomes frightened for 1 minute on a failed save. While frightened, the target drops whatever it is holding and must move at least 30 feet away from the glyph on each of its turns, if able.\n\n**Hopelessness.** Each target must make a Charisma saving throw. On a failed save, the target is overwhelmed with despair for 1 minute. During this time, it can't attack or target any creature with harmful abilities, spells, or other magical effects.\n\n**Insanity.** Each target must make an Intelligence saving throw. On a failed save, the target is driven insane for 1 minute. An insane creature can't take actions, can't understand what other creatures say, can't read, and speaks only in gibberish. The DM controls its movement, which is erratic.\n\n**Pain.** Each target must make a Constitution saving throw and becomes incapacitated with excruciating pain for 1 minute on a failed save.\n\n**Sleep.** Each target must make a Wisdom saving throw and falls unconscious for 10 minutes on a failed save. A creature awakens if it takes damage or if someone uses an action to shake or slap it awake.\n\n**Stunning.** Each target must make a Wisdom saving throw and becomes stunned for 1 minute on a failed save."
		},
		{
			"name": "Tasha's Hideous Laughter",
			"level": 1,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "tiny tarts and a feather",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "280",
			"additional-detail": "Target (INT > 4) is prone, incapacitated, can't stand. WIS save each turn to end.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "A creature of your choice that you can see within range perceives everything as hilariously funny and falls into fits of laughter if this spell affects it. The target must succeed on a Wisdom saving throw or fall prone, becoming incapacitated and unable to stand up for the duration. A creature with an Intelligence score of 4 or less isn't affected.\n\nAt the end of each of its turns, and each time it takes damage, the target can make another Wisdom saving throw. The target had advantage on the saving throw if it's triggered by damage. On a success, the spell ends."
		},
		{
			"name": "Telekinesis",
			"level": 5,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "unknown",
				"text": "Creatures or objects in range"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "280",
			"additional-detail": "Move objects or creatures with your mind.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You gain the ability to move or manipulate creatures or objects by thought. When you cast the spell, and as your action each round for the duration, you can exert your will on one creature or object that you can see within range, causing the appropriate effect below. You can affect the same target round after round, or choose a new one at any time. If you switch targets, the prior target is no longer affected by the spell. \n\n**Creature.** You can try to move a Huge or smaller creature. Make an ability check with your spellcasting ability contested by the creature's Strength check. If you win the contest, you move the creature up to 30 feet in any direction, including upward but not beyond the range of this spell. Until the end of your next turn, the creature is restrained in your telekinetic grip. A creature lifted upward is suspended in mid-air. \n\nOn subsequent rounds, you can use your action to attempt to maintain your telekinetic grip on the creature by repeating the contest. \n\n**Object.** You can try to move an object that weighs up to 1,000 pounds. If the object isn't being worn or carried, you automatically move it up to 30 feet in any direction, but not beyond the range of this spell.\n\nIf the object is worn or carried by a creature, you must make an ability check with your spellcasting ability contested by that creature’s Strength check. If you succeed, you pull the object away from that creature and can move it up to 30 feet in any direction but not beyond the range of this spell. \n\nYou can exert fine control on objects with your telekinetic grip, such as manipulating a simple tool, opening a door or a container, stowing or retrieving an item from an open container, or pouring the contents from a vial."
		},
		{
			"name": "Telepathy",
			"level": 8,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "unlimited"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pair of linked silver rings",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "281",
			"additional-detail": "Telepathically communicate words, sounds, images with target (INT >= 1).",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a telepathic link between yourself and a willing creature with which you are familiar. The creature can be anywhere on the same plane of existence as you. The spell ends if you or the target are no longer on the same plane.\n\nUntil the spell ends, you and the target can instantaneously share words, images, sounds and other sensory messages with one another through the link, and the target recognizes you as the creature it is communicating with. The spell enables a creature with an Intelligence score of at least 1 to understand the meaning of your words and take in the scope of any sensory messages you send to it."
		},
		{
			"name": "Teleport",
			"level": 7,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "unknown",
				"text": "Self and <= 8 creatures"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "281",
			"additional-detail": "Teleport yourself and willing creatures to a distant location.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell instantly transports you and up to eight willing creatures of your choice that you can see within range, or a single object, that you can see within range, to a destination you select. If you target an object, it must be able to fit entirely inside a 10-foot cube, and it can't be held or carried by an unwilling creature.\n\nThe destination you choose must be known to you, and it must be on the same plane of existence as you. Your familiarity with the destination determines whether you arrive there successfully. The DM rolls d100 and consults the table.\n\n| Familiarity       | Mishap | Similar Area | Off Target | On Target |\n|-------------------|--------|--------------|------------|-----------|\n| Permanent circle  |  ---   |      ---     |     ---    |   01-100  |\n| Associated object |  ---   |      ---     |     ---    |   01-100  |\n| Very familiar     | 01-05  |     06-13    |    14-24   |   25-100  |\n| Seen casually     | 01-33  |     34-43    |    44-53   |   54-100  |\n| Viewed once       | 01-43  |     44-53    |    54-73   |   74-100  |\n| Description       | 01-43  |     44-53    |    54-73   |   74-100  |\n| False destination | 01-50  |    51-100    |     ---    |    ---    |\n\n**Familiarity.** \"Permanent circle\" means a permanent teleportation circle whose sigil sequence you know. \"Associated object\" means that you possess an object taken from the desired destination within the last six months, such as a book from a wizard's library, bed linen from a royal suite, or a chunk of marble from a lich's secret tomb.\n\n\"Very familiar\" is a place you have been very often, a place you have carefully studied, or a place you can see when you cast the spell. \"Seen casually\" is someplace you have seen more than once but with which you aren't very familiar. \"Viewed once\" is a place you have seen once, possibly using magic. \"Description\" is a place whose location and appearance you know through someone else's description, perhaps from a map.\n\n\"False destination\" is a place that doesn't exist. Perhaps you tried to scry an enemy's sanctum but instead view an illusion, or you were attempting to teleport to a familiar location that no longer exists.\n\n**On Target.** You and your group (or the target object) appear where you want to.\n\n**Off Target.** You and your group (or the target object) appear a random distance away from the destination in a random direction. Distance off target is 1d10 x 1d10 percent of the distance that was to be traveled. For example, if you tried to travel 120 miles, landed off target, and rolled a 5 and 3 on the two d10s, then you would be off target by 15 percent, or 18 miles. The DM determines the direction off target randomly by rolling a determines the direction off target randomly by rolling a d8 and designating 1 as north, 2 as northeast, 3 as east, and so on around the points of the compass. If you were teleporting to a coastal city and wound up 18 miles out at sea, you could be in trouble.\n\n**Similar Area.** You and your group (or the target object) wind up in a different area that's visually or thematically similar to the target area. If you are heading for your home laboratory, for example, you might wind up in another wizard's laboratory or in an alchemical supply shop that has many of the same tools and implements as your laboratory. Generally, you appear in the closest similar place, but since the spell has no range limit, you could conceivably wind up anywhere on the plane.\n\n**Mishap.** The spell's unpredictable magic results in a difficult journey. Each teleporting creature (or the target object) takes 3d10 force damage, and the DM rerolls on the table to see where you wind up (multiple mishaps can occur, dealing damage each time)."
		},
		{
			"name": "Teleportation Circle",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": "ft. diameter circle",
				"size": 10
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "CHALK & INK mixed with gems",
			"cost": "50 gp",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "282",
			"additional-detail": "Any stepping inside circle teleport to permanent teleportation circle.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "As you cast the spell, you draw a 10-foot-diameter circle on the ground inscribed with sigils that link your location to a permanent teleportation circle of your choice, whose sigil sequence you know and that is on the same plane of existence as you. A shimmering portal opens within the circle you drew and remains open until the end of your next turn. Any creature that enters the portal instantly appears within 5 feet of the destination circle or in the nearest unoccupied space if that space is occupied.\n\nMany major temples, guilds, and other important places have permanent teleportation circles inscribed somewhere within their confines. Each such circle includes a unique sigil sequence—-a string of magical runes arranged in a particular pattern. When you first gain the ability to cast this spell, you learn the sigil sequences for two destinations on the Material Plane, determined by the DM. You can learn additional sigil sequences during your adventures. You can commit a new sigil sequence to memory after studying it for 1 minute.\n\nYou can create a permanent teleportation circle by casting this spell in the same location every day for one year. You need not use the circle to teleport when you cast the spell in this way."
		},
		{
			"name": "Tenser's Floating Disk",
			"level": 1,
			"school": "Conjuration",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "ft. diameter circle",
				"size": 3
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "drop of mercury",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "282",
			"additional-detail": "Create floating disk that holds 500 lbs and stays within 20 ft. of you.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell creates a circular, horizontal plane of force, 3 feet in diameter and 1 inch thick, that floats 3 feet above the ground in an unoccupied space of your choice that you can see within range. The disk remains for the duration, and can hold up to 500 pounds. If more weight is placed on it, the spell ends, and everything on the disk falls to the ground.\n\nThe disk is immobile while you are within 20 feet of it. If you move more than 20 feet away from it, the disk follows you so that it remains within 20 feet of you. If can move across uneven terrain, up or down stairs, slopes and the like, but it can't cross an elevation change of 10 feet or more. For example, the disk can't move across a 10-foot-deep pit, nor could it leave such a pit if it was created at the bottom.\n\nIf you move more than 100 feet away from the disk (typically because it can't move around an obstacle to follow you), the spell ends."
		},
		{
			"name": "Thaumaturgy",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "282",
			"additional-detail": "Create minor magical effect.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You manifest a minor wonder, a sign of supernatural power, within range. You create one of the following magical effects within range:\n\n* Your voice booms up to three times as loud as normal for 1 minute.\n* You cause flames to flicker, brighten, dim, or change color for 1 minute.\n* You cause harmless tremors in the ground for 1 minute.\n* You create an instantaneous sound that originates from a point of your choice within range, such as a rumble of thunder, the cry of a raven, or ominous whispers.\n* You instantaneously cause an unlocked door or window to fly open or slam shut.\n* You alter the appearance of your eyes for 1 minute. \n\nIf you cast this spell multiple times, you can have up to three of its 1-minute effects active at a time, and you can dismiss such an effect as an action."
		},
		{
			"name": "Thorn Whip",
			"level": 0,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "stem of thorny plant",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Piercing",
			"damage-heal": "DAM: 1d6",
			"sourcebook": "PHB",
			"page": "282",
			"additional-detail": "Pulled 10 ft to root. DAM increase. 5th level: 2d6, 11th level: 3d6, 17th level: 4d6.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a long, vine-like whip covered in thorns that lashes out at your command toward a creature in range. Make a melee spell attack against the target. If the attack hits, the creature takes 1d6 piercing damage, and if the creature is Large or smaller, you pull the creature up to 10 feet closer to you.\n\nThis spell's damage increases by 1d6 when you reach 5th level (2d6), 11th level (3d6), and 17th level (4d6)."
		},
		{
			"name": "Thunderous Smite",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-weapon"
			},
			"damage-type": "Thunder",
			"damage-heal": "DAM: 2d6",
			"sourcebook": "PHB",
			"page": "282",
			"additional-detail": "Attack target takes extra thunder DAM and STR save or pushed 10 ft. and prone.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The first time you hit with a melee weapon attack during this spell's duration, your weapon rings with thunder that is audible within 300 feet of you, and the attack deals an extra 2d6 thunder damage to the target. Additionally, if the target is a creature, it must succeed on a Strength saving throw or be pushed 10 feet away from you and knocked prone."
		},
		{
			"name": "Thunderwave",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "ft. cube",
				"size": 15
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "CON (Half DAM, no push)"
			},
			"damage-type": "Thunder",
			"damage-heal": "DAM: 2d8",
			"sourcebook": "PHB",
			"page": "282",
			"additional-detail": "Creatures failing save and objects pushed 10 ft. Boom heard for 300 ft.",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": true,
			"cleric": [
				"tempest"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A wave of thunderous force sweeps out from you. Each creature in a 15-foot cube originating from you must make a Constitution saving throw. On a failed save, a creature takes 2d8 thunder damage and is pushed 10 feet away from you. On a successful save, the creature takes half as much damage and isn’t pushed. In addition, unsecured objects that are completely within the area of effect are automatically pushed 10 feet away from you by the spell’s effect, and the spell emits a thunderous boom audible out to 300 feet.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st."
		},
		{
			"name": "Time Stop",
			"level": 9,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": "",
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "283",
			"additional-detail": "Stop time. Take 1d4+1 turns alone. Spell ends if you affect others in any way.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You briefly stop the flow of time for everyone but yourself. No time passes for other creatures, while you take 1d4 + 1 turns in a row, during which you can use actions and move as normal.\n\nThis spell ends if one of the actions you use during this period, or any effects that you create during this period, affects a creature other than you or an object being worn or carried by someone other than you. In addition, the spell ends if you move to a place more than 1,000 feet form the location where you cast it."
		},
		{
			"name": "Tongues",
			"level": 3,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": true,
			"components": "clay model of a ziggurat",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "283",
			"additional-detail": "Target understands any spoken language and is understood by everyone else.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "This spell grants the creature you touch the ability to understand any spoken language it hears. Moreover, when the target speaks, any creature that knows at least one language and can hear the target understands what it says."
		},
		{
			"name": "Transport via Plants",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 10
			},
			"target-area": {
				"type": ">= Large plants, 1 in range",
				"size": 2
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "283",
			"additional-detail": "Enter one plant and emerge from another on same plane you've encountered.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell creates a magical link between a Large or larger inanimate plant within range and another plant, at any distance, on the same plane of existence. You must have seen or touched the destination plant at least once before. For the duration, any creature can step into the target plant and exit from the destination plant by using 5 feet of movement."
		},
		{
			"name": "Tree Stride",
			"level": 5,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "283",
			"additional-detail": "Enter one tree and emerge from another 500 ft. away. Use once per round.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": [
				"ancients"
			],
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You gain the ability to enter a tree and move from inside it to inside another tree of the same kind within 500 feet. Both trees must be living and at least the same size as you. You must use 5 feet of movement to enter a tree. You instantly know the location of all other trees of the same kind within 500 feet and, as part of the move used to enter the tree, can either pass into one of those trees or step out of the tree you're in. You appear in a spot of your choice within 5 feet of the destination tree, using another 5 feet of movement. If you have no movement left, you appear within 5 feet of the tree you entered. \n\nYou can use this transportation ability once per round for the duration. You must end each turn outside a tree."
		},
		{
			"name": "True Polymorph",
			"level": 9,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature or nonmagical object",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "mercury, gum arabic, smoke",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "283",
			"additional-detail": "Transform a creature/object into a different creature/object.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "Choose one creature or nonmagical object that you can see within range. You transform the creature into a different creature, the creature into an object or the object into a creature (the object must be neither worn nor carried by another creature). The transformation lasts for the duration, or until the target drops to 0 hit points or dies. If you concentrate on this spell for the full duration, the transformation becomes permanent.\n\nShapechangers aren't affected by this spell. An unwilling creature can make a Wisdom saving throw, and if it succeeds, it isn't affected by this spell.\n\n**Creature into Creature.** If you turn a creature into another kind of creature, the new form can be any kind you choose whose challenge rating is equal to or less than the target's (or its level, if the target doesn't have a challenge rating). The target's game statistics, including mental ability scores, are replaced by the statistics of the new form. It retains its alignment and personality.\n\nThe target assumes the hit points of its new form, and when it reverts to its normal form, the creature returns to the number of hit points it had before it transformed. If it reverts as a result of dropping to 0 hit points, any excess damage carries over to its normal form. As long as the excess damage doesn't reduce the creature's normal form to 0 hit points, it isn't knocked unconscious.\n\nThe creature is limited in the actions it can perform by the nature of its new form, and it can't speak, cast spells, or take any other action that requires hands or speech, unless its new form is capable of such actions.\n\nThe target's gear melds into the new form. The creature can't activate, use, wield, or otherwise benefit from any of its equipment.\n\n**Object into Creature.** You can turn an object into any kind of creature, as long as the creature's size is no larger than the object's size and the creature's challenge rating is 9 or lower. The creature is friendly to you and your companions. It acts on each of your turns. You decide what action it takes and how it moves. The DM has the creature's statistics and resolves all of its actions and movements.\n\nIf the spell becomes permanent, you no longer control the creature. It might remain friendly to you, depending on how you have treated it.\n\n**Creature into Object.** If you turn a creature into an object, it transforms along with whatever it is wearing and carrying into that form. The creature's statistics become those of the object, and the creature has no memory of time spent in this form, after the spell ends and it returns to its normal form."
		},
		{
			"name": "True Resurrection",
			"level": 9,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "hour",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "creature dead <= 200 years",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "holy water, DIAMONDS",
			"cost": "25000 gp",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "284",
			"additional-detail": "Resurrect creature that didn't die of old age. Heals all wounds, effects, etc.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You touch a creature that has been dead for no longer than 200 years and that died for any reason except old age. If the creature's soul is free and willing, the creature is restored to life with all its hit points.\n\nThis spell closes all wounds, neutralizes any poison, cures all diseases, and lifts any curses affecting the creature when it died. The spell replaces damaged or missing organs and limbs.\n\nThe spell can even provide a new body if the original no longer exists, in which case you must speak the creature's name. The creature then appears in an unoccupied space you choose within 10 feet of you."
		},
		{
			"name": "True Seeing",
			"level": 6,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "OINTMENT FOR EYES",
			"cost": "25 gp",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "284",
			"additional-detail": "Target creature gains truesight, sees secret doors, Ethereal Plane. Range 120 ft.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "This spell gives the willing creature you touch the ability to see things as they actually are. For the duration, the creature has truesight, notices secret doors hidden by magic, and can see into the Ethereal Plane, all out to a range of 120 feet."
		},
		{
			"name": "True Strike",
			"level": 0,
			"school": "Divination",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": false,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "round",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "284",
			"additional-detail": "Next turn you gain advantage on first attack against the target.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "You extend your hand and point a finger at a target in range. Your magic grants you a brief insight into the target's defenses. On your next turn, you gain advantage on your first attack roll against the target, provided that this spell hasn't ended."
		},
		{
			"name": "Tsunami",
			"level": 8,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "sight"
			},
			"target-area": {
				"type": "ft x 300 ft x 50 ft water",
				"size": 300
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "rounds",
				"size": 6
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "STR"
			},
			"damage-type": "Bludgeoning",
			"damage-heal": "DAM: 6d10",
			"sourcebook": "PHB",
			"page": "284",
			"additional-detail": "Creatures make STR save to avoid more damage (1d10 less DMG each round).",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A wall of water springs into existence at a point you choose within range. You can make the wall up to 300 feet long, 300 feet high, and 50 feet thick. The wall lasts for the duration.\n\nWhen the wall appears, each creature within its area must make a Strength saving throw. On a failed save, a creature takes 6d10 bludgeoning damage, or half as much damage on a successful save.\n\nAt the start of each of your turns after the wall appears, the wall, along with any creatures in it, moves 50 feet away from you. Any Huge or smaller creature inside the wall or whose space the wall enters when it moves must succeed on a Strength saving throw or take 5d10 bludgeoning damage. A creature can take this damage only once per round. At the end of the turn, the wall's height is reduced by 50 feet, and the damage creatures take from the the spell on subsequent rounds is reduced by 1d10. When the wall reaches 0 feet in height, the spell ends.\n\nA creature caught in the wall can move by swimming. Because of the force of the wave, though, the creature must make a successful Strength (Athletics) check against your spell save DC in order to move at all. If it fails the check, it can't move. A creature that moves out of the area falls to the ground."
		},
		{
			"name": "Unseen Servant",
			"level": 1,
			"school": "Conjuration",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": "",
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of string, bit of wood",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "284",
			"additional-detail": "Create invisible force that can perform simple, menial tasks for you.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "This spell creates an invisible, mindless, shapeless force that performs simple tasks at your command until the spell ends. The servant springs into existence in an unoccupied space on the ground within range. It has AC 10, 1 hit point, and a Strength of 2, and it can't attack. If it drops to 0 hit points, the spell ends.\n\nOnce on each of your turns as a bonus action, you can mentally command the servant to move up to 15 feet and interact with an object. The servant can perform simple tasks that a human servant could do, such as fetching things, cleaning, mending, folding clothes, lighting fires, serving food, and pouring wine. Once you give the command, the servant performs the task to the best of its ability until it completes the task, then waits for your next command.\n\nIf you command the servant to perform a task that would move it more than 60 feet away from you, the spell ends."
		},
		{
			"name": "Vampiric Touch",
			"level": 3,
			"school": "Necromancy",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-spell"
			},
			"damage-type": "Necrotic",
			"damage-heal": "DAM: 3d6",
			"sourcebook": "PHB",
			"page": "285",
			"additional-detail": "Each time you hit a target, you also HEAL half of the DAM you cause.",
			"per-higher-spell-level": "Extra 1d6 DAM.",
			"bard": false,
			"cleric": [
				"death"
			],
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": true,
			"wizard": true,
			"original-description": "The touch of your shadow-wreathed hand can siphon life force from others to heal your wounds. Make a melee spell attack against a creature within your reach. On a hit, the target takes 3d6 necrotic damage, and you regain hit points equal to half the amount of necrotic damage dealt. Until the spell ends, you can make the attack again on each of your turns as an action. \n\n**At Higher Levels.** When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot level above 3rd."
		},
		{
			"name": "Vicious Mockery",
			"level": 0,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 1d4",
			"sourcebook": "PHB",
			"page": "285",
			"additional-detail": "Disadvantage to attack.DAM increase.5th level:2d4,11th level:3d4,17th level:4d4",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You unleash a string of insults laced with subtle enchantments at a creature you can see within range. If the target can hear you (though it need not understand you), it must succeed on a Wisdom saving throw or take 1d4 psychic damage and have disadvantage on the next attack roll it makes before the end of its next turn.\n\nThis spell's damage increases by 1d4 when you reach 5th level (2d4), 11th level (3d4), and 17th level (4d4)."
		},
		{
			"name": "Wall of Fire",
			"level": 4,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small piece of phosphorous",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Fire",
			"damage-heal": "DAM: 5d8",
			"sourcebook": "PHB",
			"page": "285",
			"additional-detail": "Those entering or ending turn on one side of the wall take 5d8 fire DAM. ",
			"per-higher-spell-level": "Extra 1d8 DAM.",
			"bard": false,
			"cleric": [
				"light"
			],
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a wall of fire on a solid surface within range. You can make the wall up to 60 feet long, 20 feet high, and 1 foot thick, or a ringed wall up to 20 feet in diameter, 20 feet high, and 1 foot thick. The wall is opaque and lasts for the duration.\n\nWhen the wall appears, each creature within its area must make a Dexterity saving throw. On a failed save, a creature takes 5d8 fire damage, or half as much damage on a successful save.\n\nOne side of the wall, selected by you when you cast this spell, deals 5d8 fire damage to each creature that ends its turn within 10 feet of that side or inside the wall. A creature takes the same damage when it enters the wall for the first time on a turn or ends its turn there. The other side of the wall deals no damage.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 5th level or higher, the damage increases by 1d8 for each slot level above 4th."
		},
		{
			"name": "Wall of Force",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "powder from clear gemstone",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "285",
			"additional-detail": "Create impenetrable wall (even into Ethereal Plane) only unmade by Disintegrate.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "An invisible wall of force springs into existence at a point you choose within range. The wall appears in any orientation you choose, as a horizontal or vertical barrier or at an angle. It can be free floating or resting on a solid surface. You can form it into a hemispherical dome or a sphere with a radius of up to 10 feet, or you can shape a flat surface made up of ten 10-foot-by-10-foot panels. Each panel must be contiguous with another panel. In any form, the wall is 1/4 inch thick. It lasts for the duration. If the wall cuts through a creature’s space when it appears, the creature is pushed to one side of the wall (your choice which side).\n\nNothing can physically pass through the wall. It is immune to all damage and can’t be dispelled by *[dispel magic](../dispel-magic/ \"dispel magic (lvl 3)\")*. A *[disintegrate](../disintegrate/ \"disintegrate (lvl 6)\")* spell destroys the wall instantly, however. The wall also extends into the Ethereal Plane, blocking ethereal travel through the wall."
		},
		{
			"name": "Wall of Ice",
			"level": 6,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small piece of quartz",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Cold",
			"damage-heal": "DAM: 10d6",
			"sourcebook": "PHB",
			"page": "285",
			"additional-detail": "Ice:AC 12, 30 HP. Moving through ice:take 5d6 cold DAM or CON save for half.",
			"per-higher-spell-level": "Extra DAM:2d6,1d6 moving",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "You create a wall of ice on a solid surface within range. You can form it into a hemispherical dome or a sphere with a radius of up to 10 feet, or you can shape a flat surface made up of ten 10-foot-square panels. Each panel must be contiguous with another panel. In any form, the wall is 1 foot thick and lasts for the duration.\n\nIf the wall cuts through a creature’s space when it appears, the creature within its area is pushed to one side of the wall and must make a Dexterity saving throw. On a failed save, the creature takes 10d6 cold damage, or half as much damage on a successful save.\n\nThe wall is an object that can be damaged and thus breached. It has AC 12 and 30 hit points per 10-foot section, and it is vulnerable to fire damage. Reducing a 10-foot section of wall to 0 hit points destroys it and leaves behind a sheet of frigid air in the space the wall occupied. A creature moving through the sheet of frigid air for the first time on a turn must make a Constitution saving throw. That creature takes 5d6 cold damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels**. When you cast this spell using a spell slot of 7th level or higher, the damage the wall deals when it appears increases by 2d6, and the damage from passing through the sheet of frigid air increases by 1d6, for each slot level above 6th."
		},
		{
			"name": "Wall of Stone",
			"level": 5,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "small block of granite",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "unknown",
				"text": "DEX (Move away, not trapped)"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "287",
			"additional-detail": "Create wall of stone or other stone structure.  See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "A nonmagical wall of solid stone springs into existence at a point you choose within range. The wall is 6 inches thick and is composed of ten 10-foot-by-10-foot panels. Each panel must be contiguous with at least one other panel. Alternatively, you can create 10-foot-by-20-foot panels that are only 3 inches thick.\n\nIf the wall cuts through a creature's space when it appears, the creature is pushed to one side of the wall (your choice). If a creature would be surrounded on all sides by the wall (or the wall and another solid surface), that creature can make a Dexterity saving throw. On a success, it can use its reaction to move up to its speed so that it is no longer enclosed by the wall.\n\nThe wall can have any shape you desire, though it can't occupy the same space as a creature or object. The wall doesn't need to be vertical or rest on any firm foundation. It must, however, merge with and be solidly supported by existing stone. Thus, you can use this spell to bridge a chasm or create a ramp.\n\nIf you create a span greater than 20 feet in length, you must halve the size of each panel to create supports. You can crudely shape the wall to create crenellations, battlements, and so on.\n\nThe wall is an object made of stone that can be damaged and thus breached. Each panel has AC 15 and 30 hit points per inch of thickness. Reducing a panel to 0 hit points destroys it and might cause connected panels to collapse at the DM’s discretion.\n\nIf you maintain your concentration on this spell for its whole duration, the wall becomes permanent and can't be dispelled. Otherwise, the wall disappears when the spell ends."
		},
		{
			"name": "Wall of Thorns",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "handful of thorns",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "DEX"
			},
			"damage-type": "Piercing",
			"damage-heal": "DAM: 7d8",
			"sourcebook": "PHB",
			"page": "287",
			"additional-detail": "Move through wall at 1/4 speed and take 7d8 slashing DAM (DEX save for half).",
			"per-higher-spell-level": "Extra 1d8 DAM (both types).",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a wall of tough, pliable, tangled brush bristling with needle-sharp thorns. The wall appears within range on a solid surface and lasts for the duration. You choose to make the wall up to 60 feet long, 10 feet high, and 5 feet thick or a circle that has a 20-foot diameter and is up to 20 feet high and 5 feet thick. The wall blocks line of sight.\n\nWhen the wall appears, each creature within its area must make a Dexterity saving throw. On a failed save, a creature takes 7d8 piercing damage, or half as much damage on a successful save.\n\nA creature can move through the wall, albeit slowly and painfully. For every 1 foot a creature moves through the wall, it must spend 4 feet of movement. Furthermore, the first time a creature enters the wall on a turn or ends its turn there, the creature must make a Dexterity saving throw. It takes 7d8 slashing damage on a failed save, or half as much damage on a successful one.\n\n**At Higher Levels.** When you cast this spell using a spell slot o f 7th level or higher, both types of damage increase by 1d8 for each slot level above 6th."
		},
		{
			"name": "Warding Bond",
			"level": 2,
			"school": "Abjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "touch"
			},
			"target-area": {
				"type": "willing creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "pair of platinum rings",
			"cost": "50 gp",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "287",
			"additional-detail": "Target (60ft) has +1 AC and saves, resistance to all DAM, shares DAM with you.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell wards a willing creature you touch and creates a mystic connection between you and the target until the spell ends. While the target is within 60 feet of you, it gains a +1 bonus to AC and saving throws, and it has resistance to all damage. Also, each time it takes damage, you take the same amount of damage. \n\nThe spell ends if you drop to 0 hit points or if you and the  target become separated by more than 60 feet. It also ends if the spell is cast again on either of the connected creatures. You can also dismiss the spell as an action."
		},
		{
			"name": "Water Breathing",
			"level": 3,
			"school": "Transmutation",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "willing creatures-less-than",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "short reed or piece of straw",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 24
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "287",
			"additional-detail": "Creatures gain ability to breathe underwater using normal respiration.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "This spell grants up to ten willing creatures you can see within range the ability to breathe underwater until the spell ends. Affected creatures also retain their normal mode of respiration."
		},
		{
			"name": "Water Walk",
			"level": 3,
			"school": "Transmutation",
			"ritual": "Ritual",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "willing creatures-less-than",
				"size": 10
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "piece of cork",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "287",
			"additional-detail": "Creaturess walk on liquid, rise 60 ft. per round if under. Still take other damage.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": true,
			"warlock": false,
			"wizard": false,
			"original-description": "This spell grants the ability to move across any liquid surface--such as water, acid, mud, snow, quicksand, or lava--as if it were harmless solid ground (creatures crossing molten lava can still take damage from the heat). Up to ten willing creatures you can see within range gain this ability for the duration.\n\nIf you target a creature submerged in a liquid, the spell carries the target to the surface of the liquid at a rate of 60 feet per round."
		},
		{
			"name": "Web",
			"level": 2,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "ft. cube",
				"size": 20
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "bit of spiderweb",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "hour",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "DEX"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "287",
			"additional-detail": "Every turn:DEX save or restrain;STR save to escape.Burning webs:2d4 fire DAM.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": [
				"underdark"
			],
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "You conjure a mass of thick, sticky webbing at a point of your choice within range. The webs fill a 20-foot cube from that point for the duration. The webs are difficult terrain and lightly obscure their area.\n\nIf the webs aren't anchored between two solid masses (such as walls or trees) or layered across a floor, wall, or ceiling, the conjured web collapses on itself, and the spell ends at the start of your next turn. Webs layered over a flat surface have a depth of 5 feet.\n\nEach creature that starts its turn in the webs or that enters them during its turn must make a Dexterity saving throw. On a failed save, the creature is restrained as long as it remains in the webs or until it breaks free.\n\nA creature restrained by the webs can use its action to make a Strength cheek against your spell save DC. If it succeeds, it is no longer restrained.\n\nThe webs are flammable. Any 5-foot cube of webs exposed to fire burns away in 1 round, dealing 2d4 fire damage to any creature that starts its turn in the fire."
		},
		{
			"name": "Weird",
			"level": 9,
			"school": "Illusion",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "ft. radius",
				"size": 30
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "WIS"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 4d10",
			"sourcebook": "PHB",
			"page": "288",
			"additional-detail": "Affected creatures make WIS saves each turn and take DAM until they save.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": true,
			"original-description": "Drawing on the deepest fears of a group of creatures, you create illusory creatures in their minds, visible only to them. Each creature in a 30-foot-radius sphere centered on a point of your choice within range must make a Wisdom saving throw. On a failed save, a creature becomes frightened for the duration. The illusion calls on the creature's deepest fears, manifesting its worst nightmares as an implacable threat. At the start of each of the frightened creature's turns, it must succeed on a Wisdom saving throw or take 4d10 psychic damage. On a successful save, the spell ends for that creature."
		},
		{
			"name": "Wind Walk",
			"level": 6,
			"school": "Transmutation",
			"ritual": "",
			"casting-time": {
				"type": "minute",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "unknown",
				"text": "You and <= 10 willing creatures"
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "fire and holy water",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "hours",
				"size": 8
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "288",
			"additional-detail": "Fly speed: 300 ft. Resist weapons.Only Dash in cloud form. Can revert to normal.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": true,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You and up to ten willing creatures you can see within range assume a gaseous form for the duration, appearing as wisps of cloud. While in this cloud form, a creature has a flying speed of 300 feet and has resistance to damage from nonmagical weapons. The only actions a creature can take in this form are the Dash action or to revert to its normal form. Reverting takes 1 minute, during which time a creature is incapacitated and can’t move. Until the spell ends, a creature can revert to cloud form, which also requires the 1-minute transformation. \n\nIf a creature is in cloud form and flying when the effect ends, the creature descends 60 feet per round for 1 minute until it lands, which it does safely. If it can’t land after 1 minute, the creature falls the remaining distance."
		},
		{
			"name": "Wind Wall",
			"level": 3,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 120
			},
			"target-area": {
				"type": "unknown",
				"text": "See Sourcebook."
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "tiny fan and exotic feather",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw-half-damage",
				"stat": "STR"
			},
			"damage-type": "Bludgeoning",
			"damage-heal": "DAM: 3d8",
			"sourcebook": "PHB",
			"page": "288",
			"additional-detail": "Strong wind keeps gases, flying creatures, projectiles, gaseous creatures away.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": [
				"nature"
			],
			"druid": true,
			"paladin": false,
			"ranger": true,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "A wall of strong wind rises from the ground at a point you choose within range. You can make the wall up to 50 feet long, 15 feet high, and 1 foot thick. You can shape the wall in any way you choose so long as it makes one continuous path along the ground. The wall lasts for the duration.\n\nWhen the wall appears, each creature within its area must make a Strength saving throw. A creature takes 3d8 bludgeoning damage on a failed save, or half as much damage on a successful one.\n\nThe strong wind keeps fog, smoke, and other gases at bay. Small or smaller flying creatures or objects can't pass through the wall. Loose, lightweight materials brought into the wall fly upward. Arrows, bolts, and other ordinary projectiles launched at targets behind the wall are deflected upward and automatically miss. (Boulders hurled by giants or siege engines, and similar projectiles, are unaffected.) Creatures in gaseous form can’t pass through it."
		},
		{
			"name": "Wish",
			"level": 9,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "self"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "288",
			"additional-detail": "Replicate and spell <= 8th level or other powerful effect granted. See Sourcebook.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": false,
			"wizard": true,
			"original-description": "_Wish_ is the mightiest spell a mortal creature can cast. By simply speaking aloud, you can alter the very foundations of reality in accord with your desires.\n\nThe basic use of this spell is to duplicate any other spell of 8th level or lower. You don't need to meet any requirements in that spell, including costly components. The spell simply takes effect.\n\nAlternatively, you can create one of the following effects of your choice:\n\n* You create one object of up to 25,000 gp in value that isn't a magic item. The object can be no more than 300 feet in any dimension, and it appears in an unoccupied space you can see on the ground.\n\n* You allow up to twenty creatures that you can see to regain all hit points, and you end all effects on them described in the _greater restoration_ spell.\n\n* You grant up to ten creatures that you can see resistance to a damage type you choose.\n\n* You grant up to ten creatures you can see immunity to a single spell or other magical effect for 8 hours. For instance, you could make yourself and all your companions immune to a lich's life drain attack.\n\n* You undo a single recent event by forcing a reroll of any roll made within the last round (including your last turn). Reality reshapes itself to accommodate the new result. For example, a _wish_ spell could undo an opponent's successful save, a foe's critical hit, or a friend's failed save. You can force the reroll to be made with advantage or disadvantage, and you can choose whether to use the reroll or the original roll.\n\nYou might be able to achieve something beyond the scope of the above examples. State your wish to the DM as precisely as possible. The DM has great latitude in ruling what occurs in such an instance; the greater the wish, the greater the likelihood that something goes wrong. This spell might simply fail, the effect you desire might only be partly achieved, or you might suffer some unforeseen consequence as a result of how you worded the wish. For example, wishing that a villain were dead might propel you forward in time to a period when that villain is no longer alive, effectively removing you from the game. Similarly, wishing for a legendary magic item or artifact might instantly transport you to the presence of the item's current owner.\n\nThe stress of casting this spell to produce any effect other than duplicating another spell weakens you. After enduring that stress, each time you cast a spell until you finish a long rest, you take 1d10 necrotic damage per level of that spell. This damage can't be reduced or prevented in any way. In addition, you Strength drops to 3 if it isn't 3 or lower already, for 2d4 days. For each of those days that you spend resting and doing nothing more than light activity, your remaining recovery time decreases by 2 days. Finally, there is a 33 percent chance that you are unable to cast _wish_ ever again if you suffer this stress."
		},
		{
			"name": "Witch Bolt",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 30
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": true,
			"m": true,
			"components": "twig from tree struck by lightning",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "ranged-spell"
			},
			"damage-type": "Lightning",
			"damage-heal": "DAM: 1d12",
			"sourcebook": "PHB",
			"page": "289",
			"additional-detail": "Use action to auto hit target hit last round for 1d12 lightning DAM if in range.",
			"per-higher-spell-level": "Extra 1d12 DAM.",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": true,
			"warlock": true,
			"wizard": true,
			"original-description": "A beam of crackling, blue energy lances out toward a creature within range, forming a sustained arc of lightning between you and the target. Make a ranged spell attack against that creature. On a hit, the target takes 1d12 lightning damage, and on each of your turns for the duration, you can use your action to deal 1d12 lightning damage to the target automatically. The spell ends if you use your action to do anything else. The spell also ends if the target is ever outside the spell's range or if it has total cover from you.\n\n**At Higher Levels.** When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d12 for each slot level above 1st."
		},
		{
			"name": "Word of Recall",
			"level": 6,
			"school": "Conjuration",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 5
			},
			"target-area": {
				"type": "unknown",
				"text": "You and <= 5 willing creatures"
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "instant"
			},
			"attack-saving-throw-effect": "",
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "289",
			"additional-detail": "Instantly teleport to sanctuary you select during prep associated with your deity.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": true,
			"druid": false,
			"paladin": false,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You and up to five willing creatures within 5 feet of you instantly teleport to a previously designated sanctuary. You and any creatures that teleport with you appear in the nearest unoccupied space to the spot you designated when you prepared your sanctuary (see below). If you cast this spell without first preparing a sanctuary, the spell has no effect.\n\nYou must designate a sanctuary by casting this spell within a location, such as a temple, dedicated to or strongly linked to your deity. If you attempt to cast the spell in this manner in an area that isn’t dedicated to your deity, the spell has no effect."
		},
		{
			"name": "Wrathful Smite",
			"level": 1,
			"school": "Evocation",
			"ritual": "",
			"casting-time": {
				"type": "bonus",
				"size": 1
			},
			"range": {
				"type": "self"
			},
			"target-area": {
				"type": "creature",
				"size": 1
			},
			"v": true,
			"s": false,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": true,
			"duration": {
				"type": "minute",
				"size": 1
			},
			"attack-saving-throw-effect": {
				"type": "melee-weapon"
			},
			"damage-type": "Psychic",
			"damage-heal": "DAM: 1d6",
			"sourcebook": "PHB",
			"page": "289",
			"additional-detail": "Target hit also makes WIS save or is frightened. WIS save to end effect.",
			"per-higher-spell-level": "",
			"bard": false,
			"cleric": false,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "The next time you hit with a melee weapon attack during this spell's duration, your attack deals an extra 1d6 psychic damage. Additionally, if the target is a creature, it must make a Wisdom saving throw or be frightened of you until the spell ends. As an action, the creature can make a Wisdom check against your spell save DC to steel its resolve and end this spell."
		},
		{
			"name": "Zone of Truth",
			"level": 2,
			"school": "Enchantment",
			"ritual": "",
			"casting-time": {
				"type": "action",
				"size": 1
			},
			"range": {
				"type": "feet",
				"size": 60
			},
			"target-area": {
				"type": "sphere",
				"size": 15
			},
			"v": true,
			"s": true,
			"m": false,
			"components": "",
			"cost": "",
			"concentration": false,
			"duration": {
				"type": "minutes",
				"size": 10
			},
			"attack-saving-throw-effect": {
				"type": "saving-throw",
				"stat": "CHA"
			},
			"damage-type": "",
			"damage-heal": "",
			"sourcebook": "PHB",
			"page": "289",
			"additional-detail": "You know which fail saves. They can't lie but know of spell and can be evasive.",
			"per-higher-spell-level": "",
			"bard": true,
			"cleric": true,
			"druid": false,
			"paladin": true,
			"ranger": false,
			"sorceror": false,
			"warlock": false,
			"wizard": false,
			"original-description": "You create a magical zone that guards against deception in a 15-foot-radius sphere centered on a point of your choice within range. Until the spell ends, a creature that enters the spell's area for the first time on turn or starts its turn there must make a Charisma saving throw. On a failed save, a creature can't speak a deliberate lie while in the radius. you know whether each creature succeeds or fails on its saving throw.\n\nAn affected creature is aware of the spell and can thus avoid answering questions to which it would normally respond with a lie. Such a creature can be evasive in its answers as long as it remains within the boundaries of the truth."
		}
	];

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 4.0.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var keys = __webpack_require__(137);

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	/**
	 * Creates a base function for methods like `_.forIn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null &&
	    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array constructors, and
	  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = baseEach;


/***/ },
/* 301 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.3 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	/**
	 * Creates a base function for methods like `_.forIn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = baseFor;


/***/ },
/* 302 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    symbolTag = '[object Symbol]';

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/,
	    reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Symbol = root.Symbol,
	    splice = arrayProto.splice;

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  string = toString(string);

	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 4.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseEach = __webpack_require__(300),
	    baseIteratee = __webpack_require__(136);

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Creates an array of values by running each element in `collection` through
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
	 * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
	 * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
	 * and `words`
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null &&
	    !(typeof value == 'function' && isFunction(value)) && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array constructors, and
	  // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = map;


/***/ },
/* 304 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    symbolTag = '[object Symbol]';

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/,
	    reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Symbol = root.Symbol,
	    splice = arrayProto.splice;

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject(objValue)
	          ? objValue
	          : (isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * The base implementation of `_.update`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to update.
	 * @param {Function} updater The function to produce the updated value.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseUpdate(object, path, updater, customizer) {
	  return baseSet(object, path, updater(baseGet(object, path)), customizer);
	}

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction(value) {
	  return typeof value == 'function' ? value : identity;
	}

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  string = toString(string);

	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	/**
	 * This method is like `_.set` except that accepts `updater` to produce the
	 * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
	 * is invoked with one argument: (value).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.6.0
	 * @category Object
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {Function} updater The function to produce the updated value.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.update(object, 'a[0].b.c', function(n) { return n * n; });
	 * console.log(object.a[0].b.c);
	 * // => 9
	 *
	 * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
	 * console.log(object.x[0].y.z);
	 * // => 0
	 */
	function update(object, path, updater) {
	  return object == null ? object : baseUpdate(object, path, castFunction(updater));
	}

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = update;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 305 */
/***/ function(module, exports) {

	/**
	 * Special language-specific overrides.
	 *
	 * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
	 *
	 * @type {Object}
	 */
	var LANGUAGES = {
	  tr: {
	    regexp: /\u0130|\u0049|\u0049\u0307/g,
	    map: {
	      '\u0130': '\u0069',
	      '\u0049': '\u0131',
	      '\u0049\u0307': '\u0069'
	    }
	  },
	  az: {
	    regexp: /[\u0130]/g,
	    map: {
	      '\u0130': '\u0069',
	      '\u0049': '\u0131',
	      '\u0049\u0307': '\u0069'
	    }
	  },
	  lt: {
	    regexp: /[\u0049\u004A\u012E\u00CC\u00CD\u0128]/g,
	    map: {
	      '\u0049': '\u0069\u0307',
	      '\u004A': '\u006A\u0307',
	      '\u012E': '\u012F\u0307',
	      '\u00CC': '\u0069\u0307\u0300',
	      '\u00CD': '\u0069\u0307\u0301',
	      '\u0128': '\u0069\u0307\u0303'
	    }
	  }
	}

	/**
	 * Lowercase a string.
	 *
	 * @param  {String} str
	 * @return {String}
	 */
	module.exports = function (str, locale) {
	  var lang = LANGUAGES[locale]

	  str = str == null ? '' : String(str)

	  if (lang) {
	    str = str.replace(lang.regexp, function (m) { return lang.map[m] })
	  }

	  return str.toLowerCase()
	}


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	// super simple module for the most common nodejs use case.
	exports.markdown = __webpack_require__(307);
	exports.parse = exports.markdown.toHTML;


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	// Released under MIT license
	// Copyright (c) 2009-2010 Dominic Baggott
	// Copyright (c) 2009-2010 Ash Berlin
	// Copyright (c) 2011 Christoph Dorn <christoph@christophdorn.com> (http://www.christophdorn.com)

	/*jshint browser:true, devel:true */

	(function( expose ) {

	/**
	 *  class Markdown
	 *
	 *  Markdown processing in Javascript done right. We have very particular views
	 *  on what constitutes 'right' which include:
	 *
	 *  - produces well-formed HTML (this means that em and strong nesting is
	 *    important)
	 *
	 *  - has an intermediate representation to allow processing of parsed data (We
	 *    in fact have two, both as [JsonML]: a markdown tree and an HTML tree).
	 *
	 *  - is easily extensible to add new dialects without having to rewrite the
	 *    entire parsing mechanics
	 *
	 *  - has a good test suite
	 *
	 *  This implementation fulfills all of these (except that the test suite could
	 *  do with expanding to automatically run all the fixtures from other Markdown
	 *  implementations.)
	 *
	 *  ##### Intermediate Representation
	 *
	 *  *TODO* Talk about this :) Its JsonML, but document the node names we use.
	 *
	 *  [JsonML]: http://jsonml.org/ "JSON Markup Language"
	 **/
	var Markdown = expose.Markdown = function(dialect) {
	  switch (typeof dialect) {
	    case "undefined":
	      this.dialect = Markdown.dialects.Gruber;
	      break;
	    case "object":
	      this.dialect = dialect;
	      break;
	    default:
	      if ( dialect in Markdown.dialects ) {
	        this.dialect = Markdown.dialects[dialect];
	      }
	      else {
	        throw new Error("Unknown Markdown dialect '" + String(dialect) + "'");
	      }
	      break;
	  }
	  this.em_state = [];
	  this.strong_state = [];
	  this.debug_indent = "";
	};

	/**
	 *  parse( markdown, [dialect] ) -> JsonML
	 *  - markdown (String): markdown string to parse
	 *  - dialect (String | Dialect): the dialect to use, defaults to gruber
	 *
	 *  Parse `markdown` and return a markdown document as a Markdown.JsonML tree.
	 **/
	expose.parse = function( source, dialect ) {
	  // dialect will default if undefined
	  var md = new Markdown( dialect );
	  return md.toTree( source );
	};

	/**
	 *  toHTML( markdown, [dialect]  ) -> String
	 *  toHTML( md_tree ) -> String
	 *  - markdown (String): markdown string to parse
	 *  - md_tree (Markdown.JsonML): parsed markdown tree
	 *
	 *  Take markdown (either as a string or as a JsonML tree) and run it through
	 *  [[toHTMLTree]] then turn it into a well-formated HTML fragment.
	 **/
	expose.toHTML = function toHTML( source , dialect , options ) {
	  var input = expose.toHTMLTree( source , dialect , options );

	  return expose.renderJsonML( input );
	};

	/**
	 *  toHTMLTree( markdown, [dialect] ) -> JsonML
	 *  toHTMLTree( md_tree ) -> JsonML
	 *  - markdown (String): markdown string to parse
	 *  - dialect (String | Dialect): the dialect to use, defaults to gruber
	 *  - md_tree (Markdown.JsonML): parsed markdown tree
	 *
	 *  Turn markdown into HTML, represented as a JsonML tree. If a string is given
	 *  to this function, it is first parsed into a markdown tree by calling
	 *  [[parse]].
	 **/
	expose.toHTMLTree = function toHTMLTree( input, dialect , options ) {
	  // convert string input to an MD tree
	  if ( typeof input ==="string" ) input = this.parse( input, dialect );

	  // Now convert the MD tree to an HTML tree

	  // remove references from the tree
	  var attrs = extract_attr( input ),
	      refs = {};

	  if ( attrs && attrs.references ) {
	    refs = attrs.references;
	  }

	  var html = convert_tree_to_html( input, refs , options );
	  merge_text_nodes( html );
	  return html;
	};

	// For Spidermonkey based engines
	function mk_block_toSource() {
	  return "Markdown.mk_block( " +
	          uneval(this.toString()) +
	          ", " +
	          uneval(this.trailing) +
	          ", " +
	          uneval(this.lineNumber) +
	          " )";
	}

	// node
	function mk_block_inspect() {
	  var util = __webpack_require__(443);
	  return "Markdown.mk_block( " +
	          util.inspect(this.toString()) +
	          ", " +
	          util.inspect(this.trailing) +
	          ", " +
	          util.inspect(this.lineNumber) +
	          " )";

	}

	var mk_block = Markdown.mk_block = function(block, trail, line) {
	  // Be helpful for default case in tests.
	  if ( arguments.length == 1 ) trail = "\n\n";

	  var s = new String(block);
	  s.trailing = trail;
	  // To make it clear its not just a string
	  s.inspect = mk_block_inspect;
	  s.toSource = mk_block_toSource;

	  if ( line != undefined )
	    s.lineNumber = line;

	  return s;
	};

	function count_lines( str ) {
	  var n = 0, i = -1;
	  while ( ( i = str.indexOf("\n", i + 1) ) !== -1 ) n++;
	  return n;
	}

	// Internal - split source into rough blocks
	Markdown.prototype.split_blocks = function splitBlocks( input, startLine ) {
	  input = input.replace(/(\r\n|\n|\r)/g, "\n");
	  // [\s\S] matches _anything_ (newline or space)
	  // [^] is equivalent but doesn't work in IEs.
	  var re = /([\s\S]+?)($|\n#|\n(?:\s*\n|$)+)/g,
	      blocks = [],
	      m;

	  var line_no = 1;

	  if ( ( m = /^(\s*\n)/.exec(input) ) != null ) {
	    // skip (but count) leading blank lines
	    line_no += count_lines( m[0] );
	    re.lastIndex = m[0].length;
	  }

	  while ( ( m = re.exec(input) ) !== null ) {
	    if (m[2] == "\n#") {
	      m[2] = "\n";
	      re.lastIndex--;
	    }
	    blocks.push( mk_block( m[1], m[2], line_no ) );
	    line_no += count_lines( m[0] );
	  }

	  return blocks;
	};

	/**
	 *  Markdown#processBlock( block, next ) -> undefined | [ JsonML, ... ]
	 *  - block (String): the block to process
	 *  - next (Array): the following blocks
	 *
	 * Process `block` and return an array of JsonML nodes representing `block`.
	 *
	 * It does this by asking each block level function in the dialect to process
	 * the block until one can. Succesful handling is indicated by returning an
	 * array (with zero or more JsonML nodes), failure by a false value.
	 *
	 * Blocks handlers are responsible for calling [[Markdown#processInline]]
	 * themselves as appropriate.
	 *
	 * If the blocks were split incorrectly or adjacent blocks need collapsing you
	 * can adjust `next` in place using shift/splice etc.
	 *
	 * If any of this default behaviour is not right for the dialect, you can
	 * define a `__call__` method on the dialect that will get invoked to handle
	 * the block processing.
	 */
	Markdown.prototype.processBlock = function processBlock( block, next ) {
	  var cbs = this.dialect.block,
	      ord = cbs.__order__;

	  if ( "__call__" in cbs ) {
	    return cbs.__call__.call(this, block, next);
	  }

	  for ( var i = 0; i < ord.length; i++ ) {
	    //D:this.debug( "Testing", ord[i] );
	    var res = cbs[ ord[i] ].call( this, block, next );
	    if ( res ) {
	      //D:this.debug("  matched");
	      if ( !isArray(res) || ( res.length > 0 && !( isArray(res[0]) ) ) )
	        this.debug(ord[i], "didn't return a proper array");
	      //D:this.debug( "" );
	      return res;
	    }
	  }

	  // Uhoh! no match! Should we throw an error?
	  return [];
	};

	Markdown.prototype.processInline = function processInline( block ) {
	  return this.dialect.inline.__call__.call( this, String( block ) );
	};

	/**
	 *  Markdown#toTree( source ) -> JsonML
	 *  - source (String): markdown source to parse
	 *
	 *  Parse `source` into a JsonML tree representing the markdown document.
	 **/
	// custom_tree means set this.tree to `custom_tree` and restore old value on return
	Markdown.prototype.toTree = function toTree( source, custom_root ) {
	  var blocks = source instanceof Array ? source : this.split_blocks( source );

	  // Make tree a member variable so its easier to mess with in extensions
	  var old_tree = this.tree;
	  try {
	    this.tree = custom_root || this.tree || [ "markdown" ];

	    blocks:
	    while ( blocks.length ) {
	      var b = this.processBlock( blocks.shift(), blocks );

	      // Reference blocks and the like won't return any content
	      if ( !b.length ) continue blocks;

	      this.tree.push.apply( this.tree, b );
	    }
	    return this.tree;
	  }
	  finally {
	    if ( custom_root ) {
	      this.tree = old_tree;
	    }
	  }
	};

	// Noop by default
	Markdown.prototype.debug = function () {
	  var args = Array.prototype.slice.call( arguments);
	  args.unshift(this.debug_indent);
	  if ( typeof print !== "undefined" )
	      print.apply( print, args );
	  if ( typeof console !== "undefined" && typeof console.log !== "undefined" )
	      console.log.apply( null, args );
	}

	Markdown.prototype.loop_re_over_block = function( re, block, cb ) {
	  // Dont use /g regexps with this
	  var m,
	      b = block.valueOf();

	  while ( b.length && (m = re.exec(b) ) != null ) {
	    b = b.substr( m[0].length );
	    cb.call(this, m);
	  }
	  return b;
	};

	/**
	 * Markdown.dialects
	 *
	 * Namespace of built-in dialects.
	 **/
	Markdown.dialects = {};

	/**
	 * Markdown.dialects.Gruber
	 *
	 * The default dialect that follows the rules set out by John Gruber's
	 * markdown.pl as closely as possible. Well actually we follow the behaviour of
	 * that script which in some places is not exactly what the syntax web page
	 * says.
	 **/
	Markdown.dialects.Gruber = {
	  block: {
	    atxHeader: function atxHeader( block, next ) {
	      var m = block.match( /^(#{1,6})\s*(.*?)\s*#*\s*(?:\n|$)/ );

	      if ( !m ) return undefined;

	      var header = [ "header", { level: m[ 1 ].length } ];
	      Array.prototype.push.apply(header, this.processInline(m[ 2 ]));

	      if ( m[0].length < block.length )
	        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );

	      return [ header ];
	    },

	    setextHeader: function setextHeader( block, next ) {
	      var m = block.match( /^(.*)\n([-=])\2\2+(?:\n|$)/ );

	      if ( !m ) return undefined;

	      var level = ( m[ 2 ] === "=" ) ? 1 : 2;
	      var header = [ "header", { level : level }, m[ 1 ] ];

	      if ( m[0].length < block.length )
	        next.unshift( mk_block( block.substr( m[0].length ), block.trailing, block.lineNumber + 2 ) );

	      return [ header ];
	    },

	    code: function code( block, next ) {
	      // |    Foo
	      // |bar
	      // should be a code block followed by a paragraph. Fun
	      //
	      // There might also be adjacent code block to merge.

	      var ret = [],
	          re = /^(?: {0,3}\t| {4})(.*)\n?/,
	          lines;

	      // 4 spaces + content
	      if ( !block.match( re ) ) return undefined;

	      block_search:
	      do {
	        // Now pull out the rest of the lines
	        var b = this.loop_re_over_block(
	                  re, block.valueOf(), function( m ) { ret.push( m[1] ); } );

	        if ( b.length ) {
	          // Case alluded to in first comment. push it back on as a new block
	          next.unshift( mk_block(b, block.trailing) );
	          break block_search;
	        }
	        else if ( next.length ) {
	          // Check the next block - it might be code too
	          if ( !next[0].match( re ) ) break block_search;

	          // Pull how how many blanks lines follow - minus two to account for .join
	          ret.push ( block.trailing.replace(/[^\n]/g, "").substring(2) );

	          block = next.shift();
	        }
	        else {
	          break block_search;
	        }
	      } while ( true );

	      return [ [ "code_block", ret.join("\n") ] ];
	    },

	    horizRule: function horizRule( block, next ) {
	      // this needs to find any hr in the block to handle abutting blocks
	      var m = block.match( /^(?:([\s\S]*?)\n)?[ \t]*([-_*])(?:[ \t]*\2){2,}[ \t]*(?:\n([\s\S]*))?$/ );

	      if ( !m ) {
	        return undefined;
	      }

	      var jsonml = [ [ "hr" ] ];

	      // if there's a leading abutting block, process it
	      if ( m[ 1 ] ) {
	        jsonml.unshift.apply( jsonml, this.processBlock( m[ 1 ], [] ) );
	      }

	      // if there's a trailing abutting block, stick it into next
	      if ( m[ 3 ] ) {
	        next.unshift( mk_block( m[ 3 ] ) );
	      }

	      return jsonml;
	    },

	    // There are two types of lists. Tight and loose. Tight lists have no whitespace
	    // between the items (and result in text just in the <li>) and loose lists,
	    // which have an empty line between list items, resulting in (one or more)
	    // paragraphs inside the <li>.
	    //
	    // There are all sorts weird edge cases about the original markdown.pl's
	    // handling of lists:
	    //
	    // * Nested lists are supposed to be indented by four chars per level. But
	    //   if they aren't, you can get a nested list by indenting by less than
	    //   four so long as the indent doesn't match an indent of an existing list
	    //   item in the 'nest stack'.
	    //
	    // * The type of the list (bullet or number) is controlled just by the
	    //    first item at the indent. Subsequent changes are ignored unless they
	    //    are for nested lists
	    //
	    lists: (function( ) {
	      // Use a closure to hide a few variables.
	      var any_list = "[*+-]|\\d+\\.",
	          bullet_list = /[*+-]/,
	          number_list = /\d+\./,
	          // Capture leading indent as it matters for determining nested lists.
	          is_list_re = new RegExp( "^( {0,3})(" + any_list + ")[ \t]+" ),
	          indent_re = "(?: {0,3}\\t| {4})";

	      // TODO: Cache this regexp for certain depths.
	      // Create a regexp suitable for matching an li for a given stack depth
	      function regex_for_depth( depth ) {

	        return new RegExp(
	          // m[1] = indent, m[2] = list_type
	          "(?:^(" + indent_re + "{0," + depth + "} {0,3})(" + any_list + ")\\s+)|" +
	          // m[3] = cont
	          "(^" + indent_re + "{0," + (depth-1) + "}[ ]{0,4})"
	        );
	      }
	      function expand_tab( input ) {
	        return input.replace( / {0,3}\t/g, "    " );
	      }

	      // Add inline content `inline` to `li`. inline comes from processInline
	      // so is an array of content
	      function add(li, loose, inline, nl) {
	        if ( loose ) {
	          li.push( [ "para" ].concat(inline) );
	          return;
	        }
	        // Hmmm, should this be any block level element or just paras?
	        var add_to = li[li.length -1] instanceof Array && li[li.length - 1][0] == "para"
	                   ? li[li.length -1]
	                   : li;

	        // If there is already some content in this list, add the new line in
	        if ( nl && li.length > 1 ) inline.unshift(nl);

	        for ( var i = 0; i < inline.length; i++ ) {
	          var what = inline[i],
	              is_str = typeof what == "string";
	          if ( is_str && add_to.length > 1 && typeof add_to[add_to.length-1] == "string" ) {
	            add_to[ add_to.length-1 ] += what;
	          }
	          else {
	            add_to.push( what );
	          }
	        }
	      }

	      // contained means have an indent greater than the current one. On
	      // *every* line in the block
	      function get_contained_blocks( depth, blocks ) {

	        var re = new RegExp( "^(" + indent_re + "{" + depth + "}.*?\\n?)*$" ),
	            replace = new RegExp("^" + indent_re + "{" + depth + "}", "gm"),
	            ret = [];

	        while ( blocks.length > 0 ) {
	          if ( re.exec( blocks[0] ) ) {
	            var b = blocks.shift(),
	                // Now remove that indent
	                x = b.replace( replace, "");

	            ret.push( mk_block( x, b.trailing, b.lineNumber ) );
	          }
	          else {
	            break;
	          }
	        }
	        return ret;
	      }

	      // passed to stack.forEach to turn list items up the stack into paras
	      function paragraphify(s, i, stack) {
	        var list = s.list;
	        var last_li = list[list.length-1];

	        if ( last_li[1] instanceof Array && last_li[1][0] == "para" ) {
	          return;
	        }
	        if ( i + 1 == stack.length ) {
	          // Last stack frame
	          // Keep the same array, but replace the contents
	          last_li.push( ["para"].concat( last_li.splice(1, last_li.length - 1) ) );
	        }
	        else {
	          var sublist = last_li.pop();
	          last_li.push( ["para"].concat( last_li.splice(1, last_li.length - 1) ), sublist );
	        }
	      }

	      // The matcher function
	      return function( block, next ) {
	        var m = block.match( is_list_re );
	        if ( !m ) return undefined;

	        function make_list( m ) {
	          var list = bullet_list.exec( m[2] )
	                   ? ["bulletlist"]
	                   : ["numberlist"];

	          stack.push( { list: list, indent: m[1] } );
	          return list;
	        }


	        var stack = [], // Stack of lists for nesting.
	            list = make_list( m ),
	            last_li,
	            loose = false,
	            ret = [ stack[0].list ],
	            i;

	        // Loop to search over block looking for inner block elements and loose lists
	        loose_search:
	        while ( true ) {
	          // Split into lines preserving new lines at end of line
	          var lines = block.split( /(?=\n)/ );

	          // We have to grab all lines for a li and call processInline on them
	          // once as there are some inline things that can span lines.
	          var li_accumulate = "";

	          // Loop over the lines in this block looking for tight lists.
	          tight_search:
	          for ( var line_no = 0; line_no < lines.length; line_no++ ) {
	            var nl = "",
	                l = lines[line_no].replace(/^\n/, function(n) { nl = n; return ""; });

	            // TODO: really should cache this
	            var line_re = regex_for_depth( stack.length );

	            m = l.match( line_re );
	            //print( "line:", uneval(l), "\nline match:", uneval(m) );

	            // We have a list item
	            if ( m[1] !== undefined ) {
	              // Process the previous list item, if any
	              if ( li_accumulate.length ) {
	                add( last_li, loose, this.processInline( li_accumulate ), nl );
	                // Loose mode will have been dealt with. Reset it
	                loose = false;
	                li_accumulate = "";
	              }

	              m[1] = expand_tab( m[1] );
	              var wanted_depth = Math.floor(m[1].length/4)+1;
	              //print( "want:", wanted_depth, "stack:", stack.length);
	              if ( wanted_depth > stack.length ) {
	                // Deep enough for a nested list outright
	                //print ( "new nested list" );
	                list = make_list( m );
	                last_li.push( list );
	                last_li = list[1] = [ "listitem" ];
	              }
	              else {
	                // We aren't deep enough to be strictly a new level. This is
	                // where Md.pl goes nuts. If the indent matches a level in the
	                // stack, put it there, else put it one deeper then the
	                // wanted_depth deserves.
	                var found = false;
	                for ( i = 0; i < stack.length; i++ ) {
	                  if ( stack[ i ].indent != m[1] ) continue;
	                  list = stack[ i ].list;
	                  stack.splice( i+1, stack.length - (i+1) );
	                  found = true;
	                  break;
	                }

	                if (!found) {
	                  //print("not found. l:", uneval(l));
	                  wanted_depth++;
	                  if ( wanted_depth <= stack.length ) {
	                    stack.splice(wanted_depth, stack.length - wanted_depth);
	                    //print("Desired depth now", wanted_depth, "stack:", stack.length);
	                    list = stack[wanted_depth-1].list;
	                    //print("list:", uneval(list) );
	                  }
	                  else {
	                    //print ("made new stack for messy indent");
	                    list = make_list(m);
	                    last_li.push(list);
	                  }
	                }

	                //print( uneval(list), "last", list === stack[stack.length-1].list );
	                last_li = [ "listitem" ];
	                list.push(last_li);
	              } // end depth of shenegains
	              nl = "";
	            }

	            // Add content
	            if ( l.length > m[0].length ) {
	              li_accumulate += nl + l.substr( m[0].length );
	            }
	          } // tight_search

	          if ( li_accumulate.length ) {
	            add( last_li, loose, this.processInline( li_accumulate ), nl );
	            // Loose mode will have been dealt with. Reset it
	            loose = false;
	            li_accumulate = "";
	          }

	          // Look at the next block - we might have a loose list. Or an extra
	          // paragraph for the current li
	          var contained = get_contained_blocks( stack.length, next );

	          // Deal with code blocks or properly nested lists
	          if ( contained.length > 0 ) {
	            // Make sure all listitems up the stack are paragraphs
	            forEach( stack, paragraphify, this);

	            last_li.push.apply( last_li, this.toTree( contained, [] ) );
	          }

	          var next_block = next[0] && next[0].valueOf() || "";

	          if ( next_block.match(is_list_re) || next_block.match( /^ / ) ) {
	            block = next.shift();

	            // Check for an HR following a list: features/lists/hr_abutting
	            var hr = this.dialect.block.horizRule( block, next );

	            if ( hr ) {
	              ret.push.apply(ret, hr);
	              break;
	            }

	            // Make sure all listitems up the stack are paragraphs
	            forEach( stack, paragraphify, this);

	            loose = true;
	            continue loose_search;
	          }
	          break;
	        } // loose_search

	        return ret;
	      };
	    })(),

	    blockquote: function blockquote( block, next ) {
	      if ( !block.match( /^>/m ) )
	        return undefined;

	      var jsonml = [];

	      // separate out the leading abutting block, if any. I.e. in this case:
	      //
	      //  a
	      //  > b
	      //
	      if ( block[ 0 ] != ">" ) {
	        var lines = block.split( /\n/ ),
	            prev = [],
	            line_no = block.lineNumber;

	        // keep shifting lines until you find a crotchet
	        while ( lines.length && lines[ 0 ][ 0 ] != ">" ) {
	            prev.push( lines.shift() );
	            line_no++;
	        }

	        var abutting = mk_block( prev.join( "\n" ), "\n", block.lineNumber );
	        jsonml.push.apply( jsonml, this.processBlock( abutting, [] ) );
	        // reassemble new block of just block quotes!
	        block = mk_block( lines.join( "\n" ), block.trailing, line_no );
	      }


	      // if the next block is also a blockquote merge it in
	      while ( next.length && next[ 0 ][ 0 ] == ">" ) {
	        var b = next.shift();
	        block = mk_block( block + block.trailing + b, b.trailing, block.lineNumber );
	      }

	      // Strip off the leading "> " and re-process as a block.
	      var input = block.replace( /^> ?/gm, "" ),
	          old_tree = this.tree,
	          processedBlock = this.toTree( input, [ "blockquote" ] ),
	          attr = extract_attr( processedBlock );

	      // If any link references were found get rid of them
	      if ( attr && attr.references ) {
	        delete attr.references;
	        // And then remove the attribute object if it's empty
	        if ( isEmpty( attr ) ) {
	          processedBlock.splice( 1, 1 );
	        }
	      }

	      jsonml.push( processedBlock );
	      return jsonml;
	    },

	    referenceDefn: function referenceDefn( block, next) {
	      var re = /^\s*\[(.*?)\]:\s*(\S+)(?:\s+(?:(['"])(.*?)\3|\((.*?)\)))?\n?/;
	      // interesting matches are [ , ref_id, url, , title, title ]

	      if ( !block.match(re) )
	        return undefined;

	      // make an attribute node if it doesn't exist
	      if ( !extract_attr( this.tree ) ) {
	        this.tree.splice( 1, 0, {} );
	      }

	      var attrs = extract_attr( this.tree );

	      // make a references hash if it doesn't exist
	      if ( attrs.references === undefined ) {
	        attrs.references = {};
	      }

	      var b = this.loop_re_over_block(re, block, function( m ) {

	        if ( m[2] && m[2][0] == "<" && m[2][m[2].length-1] == ">" )
	          m[2] = m[2].substring( 1, m[2].length - 1 );

	        var ref = attrs.references[ m[1].toLowerCase() ] = {
	          href: m[2]
	        };

	        if ( m[4] !== undefined )
	          ref.title = m[4];
	        else if ( m[5] !== undefined )
	          ref.title = m[5];

	      } );

	      if ( b.length )
	        next.unshift( mk_block( b, block.trailing ) );

	      return [];
	    },

	    para: function para( block, next ) {
	      // everything's a para!
	      return [ ["para"].concat( this.processInline( block ) ) ];
	    }
	  }
	};

	Markdown.dialects.Gruber.inline = {

	    __oneElement__: function oneElement( text, patterns_or_re, previous_nodes ) {
	      var m,
	          res,
	          lastIndex = 0;

	      patterns_or_re = patterns_or_re || this.dialect.inline.__patterns__;
	      var re = new RegExp( "([\\s\\S]*?)(" + (patterns_or_re.source || patterns_or_re) + ")" );

	      m = re.exec( text );
	      if (!m) {
	        // Just boring text
	        return [ text.length, text ];
	      }
	      else if ( m[1] ) {
	        // Some un-interesting text matched. Return that first
	        return [ m[1].length, m[1] ];
	      }

	      var res;
	      if ( m[2] in this.dialect.inline ) {
	        res = this.dialect.inline[ m[2] ].call(
	                  this,
	                  text.substr( m.index ), m, previous_nodes || [] );
	      }
	      // Default for now to make dev easier. just slurp special and output it.
	      res = res || [ m[2].length, m[2] ];
	      return res;
	    },

	    __call__: function inline( text, patterns ) {

	      var out = [],
	          res;

	      function add(x) {
	        //D:self.debug("  adding output", uneval(x));
	        if ( typeof x == "string" && typeof out[out.length-1] == "string" )
	          out[ out.length-1 ] += x;
	        else
	          out.push(x);
	      }

	      while ( text.length > 0 ) {
	        res = this.dialect.inline.__oneElement__.call(this, text, patterns, out );
	        text = text.substr( res.shift() );
	        forEach(res, add )
	      }

	      return out;
	    },

	    // These characters are intersting elsewhere, so have rules for them so that
	    // chunks of plain text blocks don't include them
	    "]": function () {},
	    "}": function () {},

	    __escape__ : /^\\[\\`\*_{}\[\]()#\+.!\-]/,

	    "\\": function escaped( text ) {
	      // [ length of input processed, node/children to add... ]
	      // Only esacape: \ ` * _ { } [ ] ( ) # * + - . !
	      if ( this.dialect.inline.__escape__.exec( text ) )
	        return [ 2, text.charAt( 1 ) ];
	      else
	        // Not an esacpe
	        return [ 1, "\\" ];
	    },

	    "![": function image( text ) {

	      // Unlike images, alt text is plain text only. no other elements are
	      // allowed in there

	      // ![Alt text](/path/to/img.jpg "Optional title")
	      //      1          2            3       4         <--- captures
	      var m = text.match( /^!\[(.*?)\][ \t]*\([ \t]*([^")]*?)(?:[ \t]+(["'])(.*?)\3)?[ \t]*\)/ );

	      if ( m ) {
	        if ( m[2] && m[2][0] == "<" && m[2][m[2].length-1] == ">" )
	          m[2] = m[2].substring( 1, m[2].length - 1 );

	        m[2] = this.dialect.inline.__call__.call( this, m[2], /\\/ )[0];

	        var attrs = { alt: m[1], href: m[2] || "" };
	        if ( m[4] !== undefined)
	          attrs.title = m[4];

	        return [ m[0].length, [ "img", attrs ] ];
	      }

	      // ![Alt text][id]
	      m = text.match( /^!\[(.*?)\][ \t]*\[(.*?)\]/ );

	      if ( m ) {
	        // We can't check if the reference is known here as it likely wont be
	        // found till after. Check it in md tree->hmtl tree conversion
	        return [ m[0].length, [ "img_ref", { alt: m[1], ref: m[2].toLowerCase(), original: m[0] } ] ];
	      }

	      // Just consume the '!['
	      return [ 2, "![" ];
	    },

	    "[": function link( text ) {

	      var orig = String(text);
	      // Inline content is possible inside `link text`
	      var res = Markdown.DialectHelpers.inline_until_char.call( this, text.substr(1), "]" );

	      // No closing ']' found. Just consume the [
	      if ( !res ) return [ 1, "[" ];

	      var consumed = 1 + res[ 0 ],
	          children = res[ 1 ],
	          link,
	          attrs;

	      // At this point the first [...] has been parsed. See what follows to find
	      // out which kind of link we are (reference or direct url)
	      text = text.substr( consumed );

	      // [link text](/path/to/img.jpg "Optional title")
	      //                 1            2       3         <--- captures
	      // This will capture up to the last paren in the block. We then pull
	      // back based on if there a matching ones in the url
	      //    ([here](/url/(test))
	      // The parens have to be balanced
	      var m = text.match( /^\s*\([ \t]*([^"']*)(?:[ \t]+(["'])(.*?)\2)?[ \t]*\)/ );
	      if ( m ) {
	        var url = m[1];
	        consumed += m[0].length;

	        if ( url && url[0] == "<" && url[url.length-1] == ">" )
	          url = url.substring( 1, url.length - 1 );

	        // If there is a title we don't have to worry about parens in the url
	        if ( !m[3] ) {
	          var open_parens = 1; // One open that isn't in the capture
	          for ( var len = 0; len < url.length; len++ ) {
	            switch ( url[len] ) {
	            case "(":
	              open_parens++;
	              break;
	            case ")":
	              if ( --open_parens == 0) {
	                consumed -= url.length - len;
	                url = url.substring(0, len);
	              }
	              break;
	            }
	          }
	        }

	        // Process escapes only
	        url = this.dialect.inline.__call__.call( this, url, /\\/ )[0];

	        attrs = { href: url || "" };
	        if ( m[3] !== undefined)
	          attrs.title = m[3];

	        link = [ "link", attrs ].concat( children );
	        return [ consumed, link ];
	      }

	      // [Alt text][id]
	      // [Alt text] [id]
	      m = text.match( /^\s*\[(.*?)\]/ );

	      if ( m ) {

	        consumed += m[ 0 ].length;

	        // [links][] uses links as its reference
	        attrs = { ref: ( m[ 1 ] || String(children) ).toLowerCase(),  original: orig.substr( 0, consumed ) };

	        link = [ "link_ref", attrs ].concat( children );

	        // We can't check if the reference is known here as it likely wont be
	        // found till after. Check it in md tree->hmtl tree conversion.
	        // Store the original so that conversion can revert if the ref isn't found.
	        return [ consumed, link ];
	      }

	      // [id]
	      // Only if id is plain (no formatting.)
	      if ( children.length == 1 && typeof children[0] == "string" ) {

	        attrs = { ref: children[0].toLowerCase(),  original: orig.substr( 0, consumed ) };
	        link = [ "link_ref", attrs, children[0] ];
	        return [ consumed, link ];
	      }

	      // Just consume the "["
	      return [ 1, "[" ];
	    },


	    "<": function autoLink( text ) {
	      var m;

	      if ( ( m = text.match( /^<(?:((https?|ftp|mailto):[^>]+)|(.*?@.*?\.[a-zA-Z]+))>/ ) ) != null ) {
	        if ( m[3] ) {
	          return [ m[0].length, [ "link", { href: "mailto:" + m[3] }, m[3] ] ];

	        }
	        else if ( m[2] == "mailto" ) {
	          return [ m[0].length, [ "link", { href: m[1] }, m[1].substr("mailto:".length ) ] ];
	        }
	        else
	          return [ m[0].length, [ "link", { href: m[1] }, m[1] ] ];
	      }

	      return [ 1, "<" ];
	    },

	    "`": function inlineCode( text ) {
	      // Inline code block. as many backticks as you like to start it
	      // Always skip over the opening ticks.
	      var m = text.match( /(`+)(([\s\S]*?)\1)/ );

	      if ( m && m[2] )
	        return [ m[1].length + m[2].length, [ "inlinecode", m[3] ] ];
	      else {
	        // TODO: No matching end code found - warn!
	        return [ 1, "`" ];
	      }
	    },

	    "  \n": function lineBreak( text ) {
	      return [ 3, [ "linebreak" ] ];
	    }

	};

	// Meta Helper/generator method for em and strong handling
	function strong_em( tag, md ) {

	  var state_slot = tag + "_state",
	      other_slot = tag == "strong" ? "em_state" : "strong_state";

	  function CloseTag(len) {
	    this.len_after = len;
	    this.name = "close_" + md;
	  }

	  return function ( text, orig_match ) {

	    if ( this[state_slot][0] == md ) {
	      // Most recent em is of this type
	      //D:this.debug("closing", md);
	      this[state_slot].shift();

	      // "Consume" everything to go back to the recrusion in the else-block below
	      return[ text.length, new CloseTag(text.length-md.length) ];
	    }
	    else {
	      // Store a clone of the em/strong states
	      var other = this[other_slot].slice(),
	          state = this[state_slot].slice();

	      this[state_slot].unshift(md);

	      //D:this.debug_indent += "  ";

	      // Recurse
	      var res = this.processInline( text.substr( md.length ) );
	      //D:this.debug_indent = this.debug_indent.substr(2);

	      var last = res[res.length - 1];

	      //D:this.debug("processInline from", tag + ": ", uneval( res ) );

	      var check = this[state_slot].shift();
	      if ( last instanceof CloseTag ) {
	        res.pop();
	        // We matched! Huzzah.
	        var consumed = text.length - last.len_after;
	        return [ consumed, [ tag ].concat(res) ];
	      }
	      else {
	        // Restore the state of the other kind. We might have mistakenly closed it.
	        this[other_slot] = other;
	        this[state_slot] = state;

	        // We can't reuse the processed result as it could have wrong parsing contexts in it.
	        return [ md.length, md ];
	      }
	    }
	  }; // End returned function
	}

	Markdown.dialects.Gruber.inline["**"] = strong_em("strong", "**");
	Markdown.dialects.Gruber.inline["__"] = strong_em("strong", "__");
	Markdown.dialects.Gruber.inline["*"]  = strong_em("em", "*");
	Markdown.dialects.Gruber.inline["_"]  = strong_em("em", "_");


	// Build default order from insertion order.
	Markdown.buildBlockOrder = function(d) {
	  var ord = [];
	  for ( var i in d ) {
	    if ( i == "__order__" || i == "__call__" ) continue;
	    ord.push( i );
	  }
	  d.__order__ = ord;
	};

	// Build patterns for inline matcher
	Markdown.buildInlinePatterns = function(d) {
	  var patterns = [];

	  for ( var i in d ) {
	    // __foo__ is reserved and not a pattern
	    if ( i.match( /^__.*__$/) ) continue;
	    var l = i.replace( /([\\.*+?|()\[\]{}])/g, "\\$1" )
	             .replace( /\n/, "\\n" );
	    patterns.push( i.length == 1 ? l : "(?:" + l + ")" );
	  }

	  patterns = patterns.join("|");
	  d.__patterns__ = patterns;
	  //print("patterns:", uneval( patterns ) );

	  var fn = d.__call__;
	  d.__call__ = function(text, pattern) {
	    if ( pattern != undefined ) {
	      return fn.call(this, text, pattern);
	    }
	    else
	    {
	      return fn.call(this, text, patterns);
	    }
	  };
	};

	Markdown.DialectHelpers = {};
	Markdown.DialectHelpers.inline_until_char = function( text, want ) {
	  var consumed = 0,
	      nodes = [];

	  while ( true ) {
	    if ( text.charAt( consumed ) == want ) {
	      // Found the character we were looking for
	      consumed++;
	      return [ consumed, nodes ];
	    }

	    if ( consumed >= text.length ) {
	      // No closing char found. Abort.
	      return null;
	    }

	    var res = this.dialect.inline.__oneElement__.call(this, text.substr( consumed ) );
	    consumed += res[ 0 ];
	    // Add any returned nodes.
	    nodes.push.apply( nodes, res.slice( 1 ) );
	  }
	}

	// Helper function to make sub-classing a dialect easier
	Markdown.subclassDialect = function( d ) {
	  function Block() {}
	  Block.prototype = d.block;
	  function Inline() {}
	  Inline.prototype = d.inline;

	  return { block: new Block(), inline: new Inline() };
	};

	Markdown.buildBlockOrder ( Markdown.dialects.Gruber.block );
	Markdown.buildInlinePatterns( Markdown.dialects.Gruber.inline );

	Markdown.dialects.Maruku = Markdown.subclassDialect( Markdown.dialects.Gruber );

	Markdown.dialects.Maruku.processMetaHash = function processMetaHash( meta_string ) {
	  var meta = split_meta_hash( meta_string ),
	      attr = {};

	  for ( var i = 0; i < meta.length; ++i ) {
	    // id: #foo
	    if ( /^#/.test( meta[ i ] ) ) {
	      attr.id = meta[ i ].substring( 1 );
	    }
	    // class: .foo
	    else if ( /^\./.test( meta[ i ] ) ) {
	      // if class already exists, append the new one
	      if ( attr["class"] ) {
	        attr["class"] = attr["class"] + meta[ i ].replace( /./, " " );
	      }
	      else {
	        attr["class"] = meta[ i ].substring( 1 );
	      }
	    }
	    // attribute: foo=bar
	    else if ( /\=/.test( meta[ i ] ) ) {
	      var s = meta[ i ].split( /\=/ );
	      attr[ s[ 0 ] ] = s[ 1 ];
	    }
	  }

	  return attr;
	}

	function split_meta_hash( meta_string ) {
	  var meta = meta_string.split( "" ),
	      parts = [ "" ],
	      in_quotes = false;

	  while ( meta.length ) {
	    var letter = meta.shift();
	    switch ( letter ) {
	      case " " :
	        // if we're in a quoted section, keep it
	        if ( in_quotes ) {
	          parts[ parts.length - 1 ] += letter;
	        }
	        // otherwise make a new part
	        else {
	          parts.push( "" );
	        }
	        break;
	      case "'" :
	      case '"' :
	        // reverse the quotes and move straight on
	        in_quotes = !in_quotes;
	        break;
	      case "\\" :
	        // shift off the next letter to be used straight away.
	        // it was escaped so we'll keep it whatever it is
	        letter = meta.shift();
	      default :
	        parts[ parts.length - 1 ] += letter;
	        break;
	    }
	  }

	  return parts;
	}

	Markdown.dialects.Maruku.block.document_meta = function document_meta( block, next ) {
	  // we're only interested in the first block
	  if ( block.lineNumber > 1 ) return undefined;

	  // document_meta blocks consist of one or more lines of `Key: Value\n`
	  if ( ! block.match( /^(?:\w+:.*\n)*\w+:.*$/ ) ) return undefined;

	  // make an attribute node if it doesn't exist
	  if ( !extract_attr( this.tree ) ) {
	    this.tree.splice( 1, 0, {} );
	  }

	  var pairs = block.split( /\n/ );
	  for ( p in pairs ) {
	    var m = pairs[ p ].match( /(\w+):\s*(.*)$/ ),
	        key = m[ 1 ].toLowerCase(),
	        value = m[ 2 ];

	    this.tree[ 1 ][ key ] = value;
	  }

	  // document_meta produces no content!
	  return [];
	};

	Markdown.dialects.Maruku.block.block_meta = function block_meta( block, next ) {
	  // check if the last line of the block is an meta hash
	  var m = block.match( /(^|\n) {0,3}\{:\s*((?:\\\}|[^\}])*)\s*\}$/ );
	  if ( !m ) return undefined;

	  // process the meta hash
	  var attr = this.dialect.processMetaHash( m[ 2 ] );

	  var hash;

	  // if we matched ^ then we need to apply meta to the previous block
	  if ( m[ 1 ] === "" ) {
	    var node = this.tree[ this.tree.length - 1 ];
	    hash = extract_attr( node );

	    // if the node is a string (rather than JsonML), bail
	    if ( typeof node === "string" ) return undefined;

	    // create the attribute hash if it doesn't exist
	    if ( !hash ) {
	      hash = {};
	      node.splice( 1, 0, hash );
	    }

	    // add the attributes in
	    for ( a in attr ) {
	      hash[ a ] = attr[ a ];
	    }

	    // return nothing so the meta hash is removed
	    return [];
	  }

	  // pull the meta hash off the block and process what's left
	  var b = block.replace( /\n.*$/, "" ),
	      result = this.processBlock( b, [] );

	  // get or make the attributes hash
	  hash = extract_attr( result[ 0 ] );
	  if ( !hash ) {
	    hash = {};
	    result[ 0 ].splice( 1, 0, hash );
	  }

	  // attach the attributes to the block
	  for ( a in attr ) {
	    hash[ a ] = attr[ a ];
	  }

	  return result;
	};

	Markdown.dialects.Maruku.block.definition_list = function definition_list( block, next ) {
	  // one or more terms followed by one or more definitions, in a single block
	  var tight = /^((?:[^\s:].*\n)+):\s+([\s\S]+)$/,
	      list = [ "dl" ],
	      i, m;

	  // see if we're dealing with a tight or loose block
	  if ( ( m = block.match( tight ) ) ) {
	    // pull subsequent tight DL blocks out of `next`
	    var blocks = [ block ];
	    while ( next.length && tight.exec( next[ 0 ] ) ) {
	      blocks.push( next.shift() );
	    }

	    for ( var b = 0; b < blocks.length; ++b ) {
	      var m = blocks[ b ].match( tight ),
	          terms = m[ 1 ].replace( /\n$/, "" ).split( /\n/ ),
	          defns = m[ 2 ].split( /\n:\s+/ );

	      // print( uneval( m ) );

	      for ( i = 0; i < terms.length; ++i ) {
	        list.push( [ "dt", terms[ i ] ] );
	      }

	      for ( i = 0; i < defns.length; ++i ) {
	        // run inline processing over the definition
	        list.push( [ "dd" ].concat( this.processInline( defns[ i ].replace( /(\n)\s+/, "$1" ) ) ) );
	      }
	    }
	  }
	  else {
	    return undefined;
	  }

	  return [ list ];
	};

	// splits on unescaped instances of @ch. If @ch is not a character the result
	// can be unpredictable

	Markdown.dialects.Maruku.block.table = function table (block, next) {

	    var _split_on_unescaped = function(s, ch) {
	        ch = ch || '\\s';
	        if (ch.match(/^[\\|\[\]{}?*.+^$]$/)) { ch = '\\' + ch; }
	        var res = [ ],
	            r = new RegExp('^((?:\\\\.|[^\\\\' + ch + '])*)' + ch + '(.*)'),
	            m;
	        while(m = s.match(r)) {
	            res.push(m[1]);
	            s = m[2];
	        }
	        res.push(s);
	        return res;
	    }

	    var leading_pipe = /^ {0,3}\|(.+)\n {0,3}\|\s*([\-:]+[\-| :]*)\n((?:\s*\|.*(?:\n|$))*)(?=\n|$)/,
	        // find at least an unescaped pipe in each line
	        no_leading_pipe = /^ {0,3}(\S(?:\\.|[^\\|])*\|.*)\n {0,3}([\-:]+\s*\|[\-| :]*)\n((?:(?:\\.|[^\\|])*\|.*(?:\n|$))*)(?=\n|$)/,
	        i, m;
	    if (m = block.match(leading_pipe)) {
	        // remove leading pipes in contents
	        // (header and horizontal rule already have the leading pipe left out)
	        m[3] = m[3].replace(/^\s*\|/gm, '');
	    } else if (! ( m = block.match(no_leading_pipe))) {
	        return undefined;
	    }

	    var table = [ "table", [ "thead", [ "tr" ] ], [ "tbody" ] ];

	    // remove trailing pipes, then split on pipes
	    // (no escaped pipes are allowed in horizontal rule)
	    m[2] = m[2].replace(/\|\s*$/, '').split('|');

	    // process alignment
	    var html_attrs = [ ];
	    forEach (m[2], function (s) {
	        if (s.match(/^\s*-+:\s*$/))       html_attrs.push({align: "right"});
	        else if (s.match(/^\s*:-+\s*$/))  html_attrs.push({align: "left"});
	        else if (s.match(/^\s*:-+:\s*$/)) html_attrs.push({align: "center"});
	        else                              html_attrs.push({});
	    });

	    // now for the header, avoid escaped pipes
	    m[1] = _split_on_unescaped(m[1].replace(/\|\s*$/, ''), '|');
	    for (i = 0; i < m[1].length; i++) {
	        table[1][1].push(['th', html_attrs[i] || {}].concat(
	            this.processInline(m[1][i].trim())));
	    }

	    // now for body contents
	    forEach (m[3].replace(/\|\s*$/mg, '').split('\n'), function (row) {
	        var html_row = ['tr'];
	        row = _split_on_unescaped(row, '|');
	        for (i = 0; i < row.length; i++) {
	            html_row.push(['td', html_attrs[i] || {}].concat(this.processInline(row[i].trim())));
	        }
	        table[2].push(html_row);
	    }, this);

	    return [table];
	}

	Markdown.dialects.Maruku.inline[ "{:" ] = function inline_meta( text, matches, out ) {
	  if ( !out.length ) {
	    return [ 2, "{:" ];
	  }

	  // get the preceeding element
	  var before = out[ out.length - 1 ];

	  if ( typeof before === "string" ) {
	    return [ 2, "{:" ];
	  }

	  // match a meta hash
	  var m = text.match( /^\{:\s*((?:\\\}|[^\}])*)\s*\}/ );

	  // no match, false alarm
	  if ( !m ) {
	    return [ 2, "{:" ];
	  }

	  // attach the attributes to the preceeding element
	  var meta = this.dialect.processMetaHash( m[ 1 ] ),
	      attr = extract_attr( before );

	  if ( !attr ) {
	    attr = {};
	    before.splice( 1, 0, attr );
	  }

	  for ( var k in meta ) {
	    attr[ k ] = meta[ k ];
	  }

	  // cut out the string and replace it with nothing
	  return [ m[ 0 ].length, "" ];
	};

	Markdown.dialects.Maruku.inline.__escape__ = /^\\[\\`\*_{}\[\]()#\+.!\-|:]/;

	Markdown.buildBlockOrder ( Markdown.dialects.Maruku.block );
	Markdown.buildInlinePatterns( Markdown.dialects.Maruku.inline );

	var isArray = Array.isArray || function(obj) {
	  return Object.prototype.toString.call(obj) == "[object Array]";
	};

	var forEach;
	// Don't mess with Array.prototype. Its not friendly
	if ( Array.prototype.forEach ) {
	  forEach = function( arr, cb, thisp ) {
	    return arr.forEach( cb, thisp );
	  };
	}
	else {
	  forEach = function(arr, cb, thisp) {
	    for (var i = 0; i < arr.length; i++) {
	      cb.call(thisp || arr, arr[i], i, arr);
	    }
	  }
	}

	var isEmpty = function( obj ) {
	  for ( var key in obj ) {
	    if ( hasOwnProperty.call( obj, key ) ) {
	      return false;
	    }
	  }

	  return true;
	}

	function extract_attr( jsonml ) {
	  return isArray(jsonml)
	      && jsonml.length > 1
	      && typeof jsonml[ 1 ] === "object"
	      && !( isArray(jsonml[ 1 ]) )
	      ? jsonml[ 1 ]
	      : undefined;
	}



	/**
	 *  renderJsonML( jsonml[, options] ) -> String
	 *  - jsonml (Array): JsonML array to render to XML
	 *  - options (Object): options
	 *
	 *  Converts the given JsonML into well-formed XML.
	 *
	 *  The options currently understood are:
	 *
	 *  - root (Boolean): wether or not the root node should be included in the
	 *    output, or just its children. The default `false` is to not include the
	 *    root itself.
	 */
	expose.renderJsonML = function( jsonml, options ) {
	  options = options || {};
	  // include the root element in the rendered output?
	  options.root = options.root || false;

	  var content = [];

	  if ( options.root ) {
	    content.push( render_tree( jsonml ) );
	  }
	  else {
	    jsonml.shift(); // get rid of the tag
	    if ( jsonml.length && typeof jsonml[ 0 ] === "object" && !( jsonml[ 0 ] instanceof Array ) ) {
	      jsonml.shift(); // get rid of the attributes
	    }

	    while ( jsonml.length ) {
	      content.push( render_tree( jsonml.shift() ) );
	    }
	  }

	  return content.join( "\n\n" );
	};

	function escapeHTML( text ) {
	  return text.replace( /&/g, "&amp;" )
	             .replace( /</g, "&lt;" )
	             .replace( />/g, "&gt;" )
	             .replace( /"/g, "&quot;" )
	             .replace( /'/g, "&#39;" );
	}

	function render_tree( jsonml ) {
	  // basic case
	  if ( typeof jsonml === "string" ) {
	    return escapeHTML( jsonml );
	  }

	  var tag = jsonml.shift(),
	      attributes = {},
	      content = [];

	  if ( jsonml.length && typeof jsonml[ 0 ] === "object" && !( jsonml[ 0 ] instanceof Array ) ) {
	    attributes = jsonml.shift();
	  }

	  while ( jsonml.length ) {
	    content.push( render_tree( jsonml.shift() ) );
	  }

	  var tag_attrs = "";
	  for ( var a in attributes ) {
	    tag_attrs += " " + a + '="' + escapeHTML( attributes[ a ] ) + '"';
	  }

	  // be careful about adding whitespace here for inline elements
	  if ( tag == "img" || tag == "br" || tag == "hr" ) {
	    return "<"+ tag + tag_attrs + "/>";
	  }
	  else {
	    return "<"+ tag + tag_attrs + ">" + content.join( "" ) + "</" + tag + ">";
	  }
	}

	function convert_tree_to_html( tree, references, options ) {
	  var i;
	  options = options || {};

	  // shallow clone
	  var jsonml = tree.slice( 0 );

	  if ( typeof options.preprocessTreeNode === "function" ) {
	      jsonml = options.preprocessTreeNode(jsonml, references);
	  }

	  // Clone attributes if they exist
	  var attrs = extract_attr( jsonml );
	  if ( attrs ) {
	    jsonml[ 1 ] = {};
	    for ( i in attrs ) {
	      jsonml[ 1 ][ i ] = attrs[ i ];
	    }
	    attrs = jsonml[ 1 ];
	  }

	  // basic case
	  if ( typeof jsonml === "string" ) {
	    return jsonml;
	  }

	  // convert this node
	  switch ( jsonml[ 0 ] ) {
	    case "header":
	      jsonml[ 0 ] = "h" + jsonml[ 1 ].level;
	      delete jsonml[ 1 ].level;
	      break;
	    case "bulletlist":
	      jsonml[ 0 ] = "ul";
	      break;
	    case "numberlist":
	      jsonml[ 0 ] = "ol";
	      break;
	    case "listitem":
	      jsonml[ 0 ] = "li";
	      break;
	    case "para":
	      jsonml[ 0 ] = "p";
	      break;
	    case "markdown":
	      jsonml[ 0 ] = "html";
	      if ( attrs ) delete attrs.references;
	      break;
	    case "code_block":
	      jsonml[ 0 ] = "pre";
	      i = attrs ? 2 : 1;
	      var code = [ "code" ];
	      code.push.apply( code, jsonml.splice( i, jsonml.length - i ) );
	      jsonml[ i ] = code;
	      break;
	    case "inlinecode":
	      jsonml[ 0 ] = "code";
	      break;
	    case "img":
	      jsonml[ 1 ].src = jsonml[ 1 ].href;
	      delete jsonml[ 1 ].href;
	      break;
	    case "linebreak":
	      jsonml[ 0 ] = "br";
	    break;
	    case "link":
	      jsonml[ 0 ] = "a";
	      break;
	    case "link_ref":
	      jsonml[ 0 ] = "a";

	      // grab this ref and clean up the attribute node
	      var ref = references[ attrs.ref ];

	      // if the reference exists, make the link
	      if ( ref ) {
	        delete attrs.ref;

	        // add in the href and title, if present
	        attrs.href = ref.href;
	        if ( ref.title ) {
	          attrs.title = ref.title;
	        }

	        // get rid of the unneeded original text
	        delete attrs.original;
	      }
	      // the reference doesn't exist, so revert to plain text
	      else {
	        return attrs.original;
	      }
	      break;
	    case "img_ref":
	      jsonml[ 0 ] = "img";

	      // grab this ref and clean up the attribute node
	      var ref = references[ attrs.ref ];

	      // if the reference exists, make the link
	      if ( ref ) {
	        delete attrs.ref;

	        // add in the href and title, if present
	        attrs.src = ref.href;
	        if ( ref.title ) {
	          attrs.title = ref.title;
	        }

	        // get rid of the unneeded original text
	        delete attrs.original;
	      }
	      // the reference doesn't exist, so revert to plain text
	      else {
	        return attrs.original;
	      }
	      break;
	  }

	  // convert all the children
	  i = 1;

	  // deal with the attribute node, if it exists
	  if ( attrs ) {
	    // if there are keys, skip over it
	    for ( var key in jsonml[ 1 ] ) {
	        i = 2;
	        break;
	    }
	    // if there aren't, remove it
	    if ( i === 1 ) {
	      jsonml.splice( i, 1 );
	    }
	  }

	  for ( ; i < jsonml.length; ++i ) {
	    jsonml[ i ] = convert_tree_to_html( jsonml[ i ], references, options );
	  }

	  return jsonml;
	}


	// merges adjacent text nodes into a single node
	function merge_text_nodes( jsonml ) {
	  // skip the tag name and attribute hash
	  var i = extract_attr( jsonml ) ? 2 : 1;

	  while ( i < jsonml.length ) {
	    // if it's a string check the next item too
	    if ( typeof jsonml[ i ] === "string" ) {
	      if ( i + 1 < jsonml.length && typeof jsonml[ i + 1 ] === "string" ) {
	        // merge the second string into the first and remove it
	        jsonml[ i ] += jsonml.splice( i + 1, 1 )[ 0 ];
	      }
	      else {
	        ++i;
	      }
	    }
	    // if it's not a string recurse
	    else {
	      merge_text_nodes( jsonml[ i ] );
	      ++i;
	    }
	  }
	}

	} )( (function() {
	  if ( false ) {
	    window.markdown = {};
	    return window.markdown;
	  }
	  else {
	    return exports;
	  }
	} )() );


/***/ },
/* 308 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 309 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 310 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(309);
	exports.encode = exports.stringify = __webpack_require__(310);


/***/ },
/* 312 */
/***/ function(module, exports) {

	'use strict';

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Simple query string parser.
	 *
	 * @param {String} query The query string that needs to be parsed.
	 * @returns {Object}
	 * @api public
	 */
	function querystring(query) {
	  var parser = /([^=?&]+)=([^&]*)/g
	    , result = {}
	    , part;

	  //
	  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
	  // the lastIndex property so we can continue executing this loop until we've
	  // parsed all results.
	  //
	  for (;
	    part = parser.exec(query);
	    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])
	  );

	  return result;
	}

	/**
	 * Transform a query string to an object.
	 *
	 * @param {Object} obj Object that should be transformed.
	 * @param {String} prefix Optional prefix.
	 * @returns {String}
	 * @api public
	 */
	function querystringify(obj, prefix) {
	  prefix = prefix || '';

	  var pairs = [];

	  //
	  // Optionally prefix with a '?' if needed
	  //
	  if ('string' !== typeof prefix) prefix = '?';

	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
	    }
	  }

	  return pairs.length ? prefix + pairs.join('&') : '';
	}

	//
	// Expose the module.
	//
	exports.stringify = querystringify;
	exports.parse = querystring;


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(148);


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var Typeahead = __webpack_require__(141);
	var Tokenizer = __webpack_require__(315);

	module.exports = {
	  Typeahead: Typeahead,
	  Tokenizer: Tokenizer
	};

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var Accessor = __webpack_require__(139);
	var React = __webpack_require__(2);
	var Token = __webpack_require__(316);
	var KeyEvent = __webpack_require__(140);
	var Typeahead = __webpack_require__(141);
	var classNames = __webpack_require__(38);

	function _arraysAreDifferent(array1, array2) {
	  if (array1.length != array2.length) {
	    return true;
	  }
	  for (var i = array2.length - 1; i >= 0; i--) {
	    if (array2[i] !== array1[i]) {
	      return true;
	    }
	  }
	}

	/**
	 * A typeahead that, when an option is selected, instead of simply filling
	 * the text entry widget, prepends a renderable "token", that may be deleted
	 * by pressing backspace on the beginning of the line with the keyboard.
	 */
	var TypeaheadTokenizer = React.createClass({
	  displayName: 'TypeaheadTokenizer',

	  propTypes: {
	    name: React.PropTypes.string,
	    options: React.PropTypes.array,
	    customClasses: React.PropTypes.object,
	    allowCustomValues: React.PropTypes.number,
	    defaultSelected: React.PropTypes.array,
	    initialValue: React.PropTypes.string,
	    placeholder: React.PropTypes.string,
	    disabled: React.PropTypes.bool,
	    inputProps: React.PropTypes.object,
	    onTokenRemove: React.PropTypes.func,
	    onKeyDown: React.PropTypes.func,
	    onKeyPress: React.PropTypes.func,
	    onKeyUp: React.PropTypes.func,
	    onTokenAdd: React.PropTypes.func,
	    onFocus: React.PropTypes.func,
	    onBlur: React.PropTypes.func,
	    filterOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    searchOptions: React.PropTypes.func,
	    displayOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    formInputOption: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.func]),
	    maxVisible: React.PropTypes.number,
	    resultsTruncatedMessage: React.PropTypes.string,
	    defaultClassNames: React.PropTypes.bool
	  },

	  getInitialState: function () {
	    return {
	      // We need to copy this to avoid incorrect sharing
	      // of state across instances (e.g., via getDefaultProps())
	      selected: this.props.defaultSelected.slice(0)
	    };
	  },

	  getDefaultProps: function () {
	    return {
	      options: [],
	      defaultSelected: [],
	      customClasses: {},
	      allowCustomValues: 0,
	      initialValue: "",
	      placeholder: "",
	      disabled: false,
	      inputProps: {},
	      defaultClassNames: true,
	      filterOption: null,
	      searchOptions: null,
	      displayOption: function (token) {
	        return token;
	      },
	      formInputOption: null,
	      onKeyDown: function (event) {},
	      onKeyPress: function (event) {},
	      onKeyUp: function (event) {},
	      onFocus: function (event) {},
	      onBlur: function (event) {},
	      onTokenAdd: function () {},
	      onTokenRemove: function () {}
	    };
	  },

	  componentWillReceiveProps: function (nextProps) {
	    // if we get new defaultProps, update selected
	    if (_arraysAreDifferent(this.props.defaultSelected, nextProps.defaultSelected)) {
	      this.setState({ selected: nextProps.defaultSelected.slice(0) });
	    }
	  },

	  focus: function () {
	    this.refs.typeahead.focus();
	  },

	  getSelectedTokens: function () {
	    return this.state.selected;
	  },

	  // TODO: Support initialized tokens
	  //
	  _renderTokens: function () {
	    var tokenClasses = {};
	    tokenClasses[this.props.customClasses.token] = !!this.props.customClasses.token;
	    var classList = classNames(tokenClasses);
	    var result = this.state.selected.map(function (selected) {
	      var displayString = Accessor.valueForOption(this.props.displayOption, selected);
	      var value = Accessor.valueForOption(this.props.formInputOption || this.props.displayOption, selected);
	      return React.createElement(
	        Token,
	        { key: displayString, className: classList,
	          onRemove: this._removeTokenForValue,
	          object: selected,
	          value: value,
	          name: this.props.name },
	        displayString
	      );
	    }, this);
	    return result;
	  },

	  _getOptionsForTypeahead: function () {
	    // return this.props.options without this.selected
	    return this.props.options;
	  },

	  _onKeyDown: function (event) {
	    // We only care about intercepting backspaces
	    if (event.keyCode === KeyEvent.DOM_VK_BACK_SPACE) {
	      return this._handleBackspace(event);
	    }
	    this.props.onKeyDown(event);
	  },

	  _handleBackspace: function (event) {
	    // No tokens
	    if (!this.state.selected.length) {
	      return;
	    }

	    // Remove token ONLY when bksp pressed at beginning of line
	    // without a selection
	    var entry = this.refs.typeahead.refs.entry;
	    if (entry.selectionStart == entry.selectionEnd && entry.selectionStart == 0) {
	      this._removeTokenForValue(this.state.selected[this.state.selected.length - 1]);
	      event.preventDefault();
	    }
	  },

	  _removeTokenForValue: function (value) {
	    var index = this.state.selected.indexOf(value);
	    if (index == -1) {
	      return;
	    }

	    this.state.selected.splice(index, 1);
	    this.setState({ selected: this.state.selected });
	    this.props.onTokenRemove(value);
	    return;
	  },

	  _addTokenForValue: function (value) {
	    if (this.state.selected.indexOf(value) != -1) {
	      return;
	    }
	    this.state.selected.push(value);
	    this.setState({ selected: this.state.selected });
	    this.refs.typeahead.setEntryText("");
	    this.props.onTokenAdd(value);
	  },

	  render: function () {
	    var classes = {};
	    classes[this.props.customClasses.typeahead] = !!this.props.customClasses.typeahead;
	    var classList = classNames(classes);
	    var tokenizerClasses = [this.props.defaultClassNames && "typeahead-tokenizer"];
	    tokenizerClasses[this.props.className] = !!this.props.className;
	    var tokenizerClassList = classNames(tokenizerClasses);

	    return React.createElement(
	      'div',
	      { className: tokenizerClassList },
	      this._renderTokens(),
	      React.createElement(Typeahead, { ref: 'typeahead',
	        className: classList,
	        placeholder: this.props.placeholder,
	        disabled: this.props.disabled,
	        inputProps: this.props.inputProps,
	        allowCustomValues: this.props.allowCustomValues,
	        customClasses: this.props.customClasses,
	        options: this._getOptionsForTypeahead(),
	        initialValue: this.props.initialValue,
	        maxVisible: this.props.maxVisible,
	        resultsTruncatedMessage: this.props.resultsTruncatedMessage,
	        onOptionSelected: this._addTokenForValue,
	        onKeyDown: this._onKeyDown,
	        onKeyPress: this.props.onKeyPress,
	        onKeyUp: this.props.onKeyUp,
	        onFocus: this.props.onFocus,
	        onBlur: this.props.onBlur,
	        displayOption: this.props.displayOption,
	        defaultClassNames: this.props.defaultClassNames,
	        filterOption: this.props.filterOption,
	        searchOptions: this.props.searchOptions })
	    );
	  }
	});

	module.exports = TypeaheadTokenizer;

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var classNames = __webpack_require__(38);

	/**
	 * Encapsulates the rendering of an option that has been "selected" in a
	 * TypeaheadTokenizer
	 */
	var Token = React.createClass({
	  displayName: 'Token',

	  propTypes: {
	    className: React.PropTypes.string,
	    name: React.PropTypes.string,
	    children: React.PropTypes.string,
	    object: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.object]),
	    onRemove: React.PropTypes.func,
	    value: React.PropTypes.string
	  },

	  render: function () {
	    var className = classNames(["typeahead-token", this.props.className]);

	    return React.createElement(
	      'div',
	      { className: className },
	      this._renderHiddenInput(),
	      this.props.children,
	      this._renderCloseButton()
	    );
	  },

	  _renderHiddenInput: function () {
	    // If no name was set, don't create a hidden input
	    if (!this.props.name) {
	      return null;
	    }

	    return React.createElement('input', {
	      type: 'hidden',
	      name: this.props.name + '[]',
	      value: this.props.value || this.props.object
	    });
	  },

	  _renderCloseButton: function () {
	    if (!this.props.onRemove) {
	      return "";
	    }
	    return React.createElement(
	      'a',
	      { className: 'typeahead-token-close', href: '#', onClick: function (event) {
	          this.props.onRemove(this.props.object);
	          event.preventDefault();
	        }.bind(this) },
	      '×'
	    );
	  }
	});

	module.exports = Token;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var classNames = __webpack_require__(38);

	/**
	 * A single option within the TypeaheadSelector
	 */
	var TypeaheadOption = React.createClass({
	  displayName: 'TypeaheadOption',

	  propTypes: {
	    customClasses: React.PropTypes.object,
	    customValue: React.PropTypes.string,
	    onClick: React.PropTypes.func,
	    children: React.PropTypes.string,
	    hover: React.PropTypes.bool
	  },

	  getDefaultProps: function () {
	    return {
	      customClasses: {},
	      onClick: function (event) {
	        event.preventDefault();
	      }
	    };
	  },

	  render: function () {
	    var classes = {};
	    classes[this.props.customClasses.hover || "hover"] = !!this.props.hover;
	    classes[this.props.customClasses.listItem] = !!this.props.customClasses.listItem;

	    if (this.props.customValue) {
	      classes[this.props.customClasses.customAdd] = !!this.props.customClasses.customAdd;
	    }

	    var classList = classNames(classes);

	    return React.createElement(
	      'li',
	      { className: classList, onClick: this._onClick },
	      React.createElement(
	        'a',
	        { href: 'javascript: void 0;', className: this._getClasses(), ref: 'anchor' },
	        this.props.children
	      )
	    );
	  },

	  _getClasses: function () {
	    var classes = {
	      "typeahead-option": true
	    };
	    classes[this.props.customClasses.listAnchor] = !!this.props.customClasses.listAnchor;

	    return classNames(classes);
	  },

	  _onClick: function (event) {
	    event.preventDefault();
	    return this.props.onClick(event);
	  }
	});

	module.exports = TypeaheadOption;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var TypeaheadOption = __webpack_require__(317);
	var classNames = __webpack_require__(38);

	/**
	 * Container for the options rendered as part of the autocompletion process
	 * of the typeahead
	 */
	var TypeaheadSelector = React.createClass({
	  displayName: 'TypeaheadSelector',

	  propTypes: {
	    options: React.PropTypes.array,
	    allowCustomValues: React.PropTypes.number,
	    customClasses: React.PropTypes.object,
	    customValue: React.PropTypes.string,
	    selectionIndex: React.PropTypes.number,
	    onOptionSelected: React.PropTypes.func,
	    displayOption: React.PropTypes.func.isRequired,
	    defaultClassNames: React.PropTypes.bool,
	    areResultsTruncated: React.PropTypes.bool,
	    resultsTruncatedMessage: React.PropTypes.string
	  },

	  getDefaultProps: function () {
	    return {
	      selectionIndex: null,
	      customClasses: {},
	      allowCustomValues: 0,
	      customValue: null,
	      onOptionSelected: function (option) {},
	      defaultClassNames: true
	    };
	  },

	  render: function () {
	    // Don't render if there are no options to display
	    if (!this.props.options.length && this.props.allowCustomValues <= 0) {
	      return false;
	    }

	    var classes = {
	      "typeahead-selector": this.props.defaultClassNames
	    };
	    classes[this.props.customClasses.results] = this.props.customClasses.results;
	    var classList = classNames(classes);

	    // CustomValue should be added to top of results list with different class name
	    var customValue = null;
	    var customValueOffset = 0;
	    if (this.props.customValue !== null) {
	      customValueOffset++;
	      customValue = React.createElement(
	        TypeaheadOption,
	        { ref: this.props.customValue, key: this.props.customValue,
	          hover: this.props.selectionIndex === 0,
	          customClasses: this.props.customClasses,
	          customValue: this.props.customValue,
	          onClick: this._onClick.bind(this, this.props.customValue) },
	        this.props.customValue
	      );
	    }

	    var results = this.props.options.map(function (result, i) {
	      var displayString = this.props.displayOption(result, i);
	      var uniqueKey = displayString + '_' + i;
	      return React.createElement(
	        TypeaheadOption,
	        { ref: uniqueKey, key: uniqueKey,
	          hover: this.props.selectionIndex === i + customValueOffset,
	          customClasses: this.props.customClasses,
	          onClick: this._onClick.bind(this, result) },
	        displayString
	      );
	    }, this);

	    if (this.props.areResultsTruncated && this.props.resultsTruncatedMessage !== null) {
	      var resultsTruncatedClasses = {
	        "results-truncated": this.props.defaultClassNames
	      };
	      resultsTruncatedClasses[this.props.customClasses.resultsTruncated] = this.props.customClasses.resultsTruncated;
	      var resultsTruncatedClassList = classNames(resultsTruncatedClasses);

	      results.push(React.createElement(
	        'li',
	        { key: 'results-truncated', className: resultsTruncatedClassList },
	        this.props.resultsTruncatedMessage
	      ));
	    }

	    return React.createElement(
	      'ul',
	      { className: classList },
	      customValue,
	      results
	    );
	  },

	  _onClick: function (result, event) {
	    return this.props.onOptionSelected(result, event);
	  }

	});

	module.exports = TypeaheadSelector;

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactMount = __webpack_require__(9);

	var findDOMNode = __webpack_require__(89);
	var focusNode = __webpack_require__(129);

	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};

	var AutoFocusUtils = {
	  Mixin: Mixin,

	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};

	module.exports = AutoFocusUtils;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPropagators = __webpack_require__(42);
	var ExecutionEnvironment = __webpack_require__(8);
	var FallbackCompositionState = __webpack_require__(328);
	var SyntheticCompositionEvent = __webpack_require__(360);
	var SyntheticInputEvent = __webpack_require__(363);

	var keyOf = __webpack_require__(23);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}

	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};

	module.exports = BeforeInputEventPlugin;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(142);
	var ExecutionEnvironment = __webpack_require__(8);
	var ReactPerf = __webpack_require__(13);

	var camelizeStyleName = __webpack_require__(269);
	var dangerousStyleValue = __webpack_require__(368);
	var hyphenateStyleName = __webpack_require__(274);
	var memoizeStringOnly = __webpack_require__(278);
	var warning = __webpack_require__(6);

	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});

	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});

	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPluginHub = __webpack_require__(41);
	var EventPropagators = __webpack_require__(42);
	var ExecutionEnvironment = __webpack_require__(8);
	var ReactUpdates = __webpack_require__(15);
	var SyntheticEvent = __webpack_require__(33);

	var getEventTarget = __webpack_require__(92);
	var isEventSupported = __webpack_require__(95);
	var isTextInputElement = __webpack_require__(169);
	var keyOf = __webpack_require__(23);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}

	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}

	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }

	};

	module.exports = ChangeEventPlugin;

/***/ },
/* 323 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var createNodesFromMarkup = __webpack_require__(271);
	var emptyFunction = __webpack_require__(17);
	var getMarkupWrap = __webpack_require__(131);
	var invariant = __webpack_require__(3);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(23);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

	module.exports = DefaultEventPluginOrder;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPropagators = __webpack_require__(42);
	var SyntheticMouseEvent = __webpack_require__(56);

	var ReactMount = __webpack_require__(9);
	var keyOf = __webpack_require__(23);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var ReactErrorUtils = __webpack_require__(157);

	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}

	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}

	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,

	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },

	  injection: injection
	};

	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(24);

	var assign = __webpack_require__(5);
	var getTextContentAccessor = __webpack_require__(168);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },

	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(31);
	var ExecutionEnvironment = __webpack_require__(8);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}

	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,

	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	'use strict';

	var ReactDOM = __webpack_require__(148);
	var ReactDOMServer = __webpack_require__(340);
	var ReactIsomorphic = __webpack_require__(347);

	var assign = __webpack_require__(5);
	var deprecated = __webpack_require__(369);

	// `version` will be added here by ReactIsomorphic.
	var React = {};

	assign(React, ReactIsomorphic);

	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});

	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;

	module.exports = React;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var ReactInstanceMap = __webpack_require__(43);

	var findDOMNode = __webpack_require__(89);
	var warning = __webpack_require__(6);

	var didWarnKey = '_getDOMNodeDidWarn';

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(32);

	var instantiateReactComponent = __webpack_require__(94);
	var shouldUpdateReactComponent = __webpack_require__(97);
	var traverseAllChildren = __webpack_require__(98);
	var warning = __webpack_require__(6);

	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }

	};

	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactCurrentOwner = __webpack_require__(20);
	var ReactElement = __webpack_require__(12);
	var ReactInstanceMap = __webpack_require__(43);
	var ReactPerf = __webpack_require__(13);
	var ReactPropTypeLocations = __webpack_require__(55);
	var ReactPropTypeLocationNames = __webpack_require__(54);
	var ReactReconciler = __webpack_require__(32);
	var ReactUpdateQueue = __webpack_require__(87);

	var assign = __webpack_require__(5);
	var emptyObject = __webpack_require__(40);
	var invariant = __webpack_require__(3);
	var shouldUpdateReactComponent = __webpack_require__(97);
	var warning = __webpack_require__(6);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);

	    var Component = this._currentElement.type;

	    // Initialize the public class
	    var inst;
	    var renderedElement;

	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);

	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }

	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }

	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }

	    this._renderedComponent = this._instantiateReactComponent(renderedElement);

	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;

	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;

	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;

	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 334 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,

	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }

	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }

	    return nativeProps;
	  }
	};

	module.exports = ReactDOMButton;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var AutoFocusUtils = __webpack_require__(319);
	var CSSPropertyOperations = __webpack_require__(321);
	var DOMProperty = __webpack_require__(31);
	var DOMPropertyOperations = __webpack_require__(82);
	var EventConstants = __webpack_require__(19);
	var ReactBrowserEventEmitter = __webpack_require__(53);
	var ReactComponentBrowserEnvironment = __webpack_require__(84);
	var ReactDOMButton = __webpack_require__(334);
	var ReactDOMInput = __webpack_require__(337);
	var ReactDOMOption = __webpack_require__(338);
	var ReactDOMSelect = __webpack_require__(150);
	var ReactDOMTextarea = __webpack_require__(341);
	var ReactMount = __webpack_require__(9);
	var ReactMultiChild = __webpack_require__(348);
	var ReactPerf = __webpack_require__(13);
	var ReactUpdateQueue = __webpack_require__(87);

	var assign = __webpack_require__(5);
	var canDefineProperty = __webpack_require__(58);
	var escapeTextContentForBrowser = __webpack_require__(59);
	var invariant = __webpack_require__(3);
	var isEventSupported = __webpack_require__(95);
	var keyOf = __webpack_require__(23);
	var setInnerHTML = __webpack_require__(60);
	var setTextContent = __webpack_require__(96);
	var shallowEqual = __webpack_require__(132);
	var validateDOMNesting = __webpack_require__(99);
	var warning = __webpack_require__(6);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };

	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });

	var ELEMENT_NODE_TYPE = 1;

	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}

	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}

	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}

	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}

	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}

	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}

	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}

	var styleMutationWarning = {};

	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }

	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }

	  var hash = ownerName + '|' + componentName;

	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }

	  styleMutationWarning[hash] = true;

	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}

	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}

	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}

	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}

	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};

	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':

	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }

	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}

	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}

	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};

	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};

	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);

	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}

	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}

	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function (element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;

	    var props = this._currentElement.props;

	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }

	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }

	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }

	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }

	    return mountImage;
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },

	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },

	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;

	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }

	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);

	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }

	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }

	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },

	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);

	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;

	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }

	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(12);
	var ReactElementValidator = __webpack_require__(154);

	var mapObject = __webpack_require__(277);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(86);
	var LinkedValueUtils = __webpack_require__(83);
	var ReactMount = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(15);

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);

	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },

	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;

	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }

	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;

	  var returnValue = LinkedValueUtils.executeOnChange(props, event);

	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);

	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }

	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }

	  return returnValue;
	}

	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactChildren = __webpack_require__(145);
	var ReactDOMSelect = __webpack_require__(150);

	var assign = __webpack_require__(5);
	var warning = __webpack_require__(6);

	var valueContextKey = ReactDOMSelect.valueContextKey;

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }

	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];

	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }

	    inst._wrapperState = { selected: selected };
	  },

	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);

	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }

	    var content = '';

	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });

	    if (content) {
	      nativeProps.children = content;
	    }

	    return nativeProps;
	  }

	};

	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(8);

	var getNodeForCharacterOffset = __webpack_require__(372);
	var getTextContentAccessor = __webpack_require__(168);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */

	'use strict';

	var ReactDefaultInjection = __webpack_require__(153);
	var ReactServerRendering = __webpack_require__(353);
	var ReactVersion = __webpack_require__(88);

	ReactDefaultInjection.inject();

	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};

	module.exports = ReactDOMServer;

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var LinkedValueUtils = __webpack_require__(83);
	var ReactDOMIDOperations = __webpack_require__(86);
	var ReactUpdates = __webpack_require__(15);

	var assign = __webpack_require__(5);
	var invariant = __webpack_require__(3);
	var warning = __webpack_require__(6);

	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });

	    return nativeProps;
	  },

	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }

	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);

	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },

	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};

	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}

	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(31);
	var ReactDefaultPerfAnalysis = __webpack_require__(343);
	var ReactMount = __webpack_require__(9);
	var ReactPerf = __webpack_require__(13);

	var performanceNow = __webpack_require__(280);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },

	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {

	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	'use strict';

	var assign = __webpack_require__(5);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(41);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(127);
	var ExecutionEnvironment = __webpack_require__(8);
	var PooledClass = __webpack_require__(24);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMount = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(15);

	var assign = __webpack_require__(5);
	var getEventTarget = __webpack_require__(92);
	var getUnboundedScrollPosition = __webpack_require__(272);

	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }

	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}

	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);

	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },

	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },

	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(31);
	var EventPluginHub = __webpack_require__(41);
	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactClass = __webpack_require__(146);
	var ReactEmptyComponent = __webpack_require__(155);
	var ReactBrowserEventEmitter = __webpack_require__(53);
	var ReactNativeComponent = __webpack_require__(161);
	var ReactPerf = __webpack_require__(13);
	var ReactRootIndex = __webpack_require__(164);
	var ReactUpdates = __webpack_require__(15);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */

	'use strict';

	var ReactChildren = __webpack_require__(145);
	var ReactComponent = __webpack_require__(147);
	var ReactClass = __webpack_require__(146);
	var ReactDOMFactories = __webpack_require__(336);
	var ReactElement = __webpack_require__(12);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(163);
	var ReactVersion = __webpack_require__(88);

	var assign = __webpack_require__(5);
	var onlyChild = __webpack_require__(373);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(85);
	var ReactMultiChildUpdateTypes = __webpack_require__(160);

	var ReactCurrentOwner = __webpack_require__(20);
	var ReactReconciler = __webpack_require__(32);
	var ReactChildReconciler = __webpack_require__(332);

	var flattenChildren = __webpack_require__(370);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },

	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(3);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(81);
	var PooledClass = __webpack_require__(24);
	var ReactBrowserEventEmitter = __webpack_require__(53);
	var ReactDOMFeatureFlags = __webpack_require__(149);
	var ReactInputSelection = __webpack_require__(158);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(5);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(349);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;

	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;

/***/ },
/* 352 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */

	'use strict';

	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};

	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactDefaultBatchingStrategy = __webpack_require__(152);
	var ReactElement = __webpack_require__(12);
	var ReactInstanceHandles = __webpack_require__(34);
	var ReactMarkupChecksum = __webpack_require__(159);
	var ReactServerBatchingStrategy = __webpack_require__(352);
	var ReactServerRenderingTransaction = __webpack_require__(354);
	var ReactUpdates = __webpack_require__(15);

	var emptyObject = __webpack_require__(40);
	var instantiateReactComponent = __webpack_require__(94);
	var invariant = __webpack_require__(3);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(24);
	var CallbackQueue = __webpack_require__(81);
	var Transaction = __webpack_require__(57);

	var assign = __webpack_require__(5);
	var emptyFunction = __webpack_require__(17);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};

	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	'use strict';

	var DOMProperty = __webpack_require__(31);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};

	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventPropagators = __webpack_require__(42);
	var ExecutionEnvironment = __webpack_require__(8);
	var ReactInputSelection = __webpack_require__(158);
	var SyntheticEvent = __webpack_require__(33);

	var getActiveElement = __webpack_require__(130);
	var isTextInputElement = __webpack_require__(169);
	var keyOf = __webpack_require__(23);
	var shallowEqual = __webpack_require__(132);

	var topLevelTypes = EventConstants.topLevelTypes;

	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }

	  return null;
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }

	    return null;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};

	module.exports = SelectEventPlugin;

/***/ },
/* 357 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(19);
	var EventListener = __webpack_require__(127);
	var EventPropagators = __webpack_require__(42);
	var ReactMount = __webpack_require__(9);
	var SyntheticClipboardEvent = __webpack_require__(359);
	var SyntheticEvent = __webpack_require__(33);
	var SyntheticFocusEvent = __webpack_require__(362);
	var SyntheticKeyboardEvent = __webpack_require__(364);
	var SyntheticMouseEvent = __webpack_require__(56);
	var SyntheticDragEvent = __webpack_require__(361);
	var SyntheticTouchEvent = __webpack_require__(365);
	var SyntheticUIEvent = __webpack_require__(44);
	var SyntheticWheelEvent = __webpack_require__(366);

	var emptyFunction = __webpack_require__(17);
	var getEventCharCode = __webpack_require__(90);
	var invariant = __webpack_require__(3);
	var keyOf = __webpack_require__(23);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },

	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },

	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }

	};

	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(33);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(33);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

	module.exports = SyntheticCompositionEvent;

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(56);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(44);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(33);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

	module.exports = SyntheticInputEvent;

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(44);

	var getEventCharCode = __webpack_require__(90);
	var getEventKey = __webpack_require__(371);
	var getEventModifierState = __webpack_require__(91);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(44);

	var getEventModifierState = __webpack_require__(91);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(56);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;

/***/ },
/* 367 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	'use strict';

	var MOD = 65521;

	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}

	module.exports = adler32;

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(142);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */

	'use strict';

	var assign = __webpack_require__(5);
	var warning = __webpack_require__(6);

	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }

	  return fn;
	}

	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(98);
	var warning = __webpack_require__(6);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(90);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;

/***/ },
/* 372 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(12);

	var invariant = __webpack_require__(3);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(59);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/

	'use strict';

	var ReactMount = __webpack_require__(9);

	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 376 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Check if we're required to add a port number.
	 *
	 * @see https://url.spec.whatwg.org/#default-port
	 * @param {Number|String} port Port number we need to check
	 * @param {String} protocol Protocol we need to check against.
	 * @returns {Boolean} Is it a default port for the given protocol
	 * @api private
	 */
	module.exports = function required(port, protocol) {
	  protocol = protocol.split(':')[0];
	  port = +port;

	  if (!port) return false;

	  switch (protocol) {
	    case 'http':
	    case 'ws':
	    return port !== 80;

	    case 'https':
	    case 'wss':
	    return port !== 443;

	    case 'ftp':
	    return port !== 21;

	    case 'gopher':
	    return port !== 70;

	    case 'file':
	    return false;
	  }

	  return port !== 0;
	};


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var lowerCase = __webpack_require__(305)

	var NON_WORD_REGEXP = __webpack_require__(379)
	var CAMEL_CASE_REGEXP = __webpack_require__(378)
	var TRAILING_DIGIT_REGEXP = __webpack_require__(380)

	/**
	 * Sentence case a string.
	 *
	 * @param  {String} str
	 * @param  {String} locale
	 * @param  {String} replacement
	 * @return {String}
	 */
	module.exports = function (str, locale, replacement) {
	  if (str == null) {
	    return ''
	  }

	  replacement = replacement || ' '

	  function replace (match, index, string) {
	    if (index === 0 || index === (string.length - match.length)) {
	      return ''
	    }

	    return replacement
	  }

	  str = String(str)
	    // Support camel case ("camelCase" -> "camel Case").
	    .replace(CAMEL_CASE_REGEXP, '$1 $2')
	    // Support digit groups ("test2012" -> "test 2012").
	    .replace(TRAILING_DIGIT_REGEXP, '$1 $2')
	    // Remove all non-word characters and replace with a single space.
	    .replace(NON_WORD_REGEXP, replace)

	  // Lower case the entire string.
	  return lowerCase(str, locale)
	}


/***/ },
/* 378 */
/***/ function(module, exports) {

	module.exports = /([\u0061-\u007A\u00B5\u00DF-\u00F6\u00F8-\u00FF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A])([\u0041-\u005A\u00C0-\u00D6\u00D8-\u00DE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])/g


/***/ },
/* 379 */
/***/ function(module, exports) {

	module.exports = /[^\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]+/g


/***/ },
/* 380 */
/***/ function(module, exports) {

	module.exports = /([\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])([^\u0030-\u0039\u00B2\u00B3\u00B9\u00BC-\u00BE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19])/g


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var transportList = __webpack_require__(390);

	module.exports = __webpack_require__(388)(transportList);

	// TODO can't get rid of this until all servers do
	if ('_sockjs_onload' in global) {
	  setTimeout(global._sockjs_onload, 1);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , Event = __webpack_require__(100)
	  ;

	function CloseEvent() {
	  Event.call(this);
	  this.initEvent('close', false, false);
	  this.wasClean = false;
	  this.code = 0;
	  this.reason = '';
	}

	inherits(CloseEvent, Event);

	module.exports = CloseEvent;


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , Event = __webpack_require__(100)
	  ;

	function TransportMessageEvent(data) {
	  Event.call(this);
	  this.initEvent('message', false, false);
	  this.data = data;
	}

	inherits(TransportMessageEvent, Event);

	module.exports = TransportMessageEvent;


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var JSON3 = __webpack_require__(18)
	  , iframeUtils = __webpack_require__(47)
	  ;

	function FacadeJS(transport) {
	  this._transport = transport;
	  transport.on('message', this._transportMessage.bind(this));
	  transport.on('close', this._transportClose.bind(this));
	}

	FacadeJS.prototype._transportClose = function(code, reason) {
	  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
	};
	FacadeJS.prototype._transportMessage = function(frame) {
	  iframeUtils.postMessage('t', frame);
	};
	FacadeJS.prototype._send = function(data) {
	  this._transport.send(data);
	};
	FacadeJS.prototype._close = function() {
	  this._transport.close();
	  this._transport.removeAllListeners();
	};

	module.exports = FacadeJS;


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var urlUtils = __webpack_require__(14)
	  , eventUtils = __webpack_require__(25)
	  , JSON3 = __webpack_require__(18)
	  , FacadeJS = __webpack_require__(384)
	  , InfoIframeReceiver = __webpack_require__(172)
	  , iframeUtils = __webpack_require__(47)
	  , loc = __webpack_require__(173)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:iframe-bootstrap');
	}

	module.exports = function(SockJS, availableTransports) {
	  var transportMap = {};
	  availableTransports.forEach(function(at) {
	    if (at.facadeTransport) {
	      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
	    }
	  });

	  // hard-coded for the info iframe
	  // TODO see if we can make this more dynamic
	  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
	  var parentOrigin;

	  /* eslint-disable camelcase */
	  SockJS.bootstrap_iframe = function() {
	    /* eslint-enable camelcase */
	    var facade;
	    iframeUtils.currentWindowId = loc.hash.slice(1);
	    var onMessage = function(e) {
	      if (e.source !== parent) {
	        return;
	      }
	      if (typeof parentOrigin === 'undefined') {
	        parentOrigin = e.origin;
	      }
	      if (e.origin !== parentOrigin) {
	        return;
	      }

	      var iframeMessage;
	      try {
	        iframeMessage = JSON3.parse(e.data);
	      } catch (ignored) {
	        debug('bad json', e.data);
	        return;
	      }

	      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
	        return;
	      }
	      switch (iframeMessage.type) {
	      case 's':
	        var p;
	        try {
	          p = JSON3.parse(iframeMessage.data);
	        } catch (ignored) {
	          debug('bad json', iframeMessage.data);
	          break;
	        }
	        var version = p[0];
	        var transport = p[1];
	        var transUrl = p[2];
	        var baseUrl = p[3];
	        debug(version, transport, transUrl, baseUrl);
	        // change this to semver logic
	        if (version !== SockJS.version) {
	          throw new Error('Incompatibile SockJS! Main site uses:' +
	                    ' "' + version + '", the iframe:' +
	                    ' "' + SockJS.version + '".');
	        }

	        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
	            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
	          throw new Error('Can\'t connect to different domain from within an ' +
	                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
	        }
	        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
	        break;
	      case 'm':
	        facade._send(iframeMessage.data);
	        break;
	      case 'c':
	        if (facade) {
	          facade._close();
	        }
	        facade = null;
	        break;
	      }
	    };

	    eventUtils.attachEvent('message', onMessage);

	    // Start
	    iframeUtils.postMessage('s');
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var EventEmitter = __webpack_require__(10).EventEmitter
	  , inherits = __webpack_require__(4)
	  , JSON3 = __webpack_require__(18)
	  , utils = __webpack_require__(25)
	  , IframeTransport = __webpack_require__(178)
	  , InfoReceiverIframe = __webpack_require__(172)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:info-iframe');
	}

	function InfoIframe(baseUrl, url) {
	  var self = this;
	  EventEmitter.call(this);

	  var go = function() {
	    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

	    ifr.once('message', function(msg) {
	      if (msg) {
	        var d;
	        try {
	          d = JSON3.parse(msg);
	        } catch (e) {
	          debug('bad json', msg);
	          self.emit('finish');
	          self.close();
	          return;
	        }

	        var info = d[0], rtt = d[1];
	        self.emit('finish', info, rtt);
	      }
	      self.close();
	    });

	    ifr.once('close', function() {
	      self.emit('finish');
	      self.close();
	    });
	  };

	  // TODO this seems the same as the 'needBody' from transports
	  if (!global.document.body) {
	    utils.attachEvent('load', go);
	  } else {
	    go();
	  }
	}

	inherits(InfoIframe, EventEmitter);

	InfoIframe.enabled = function() {
	  return IframeTransport.enabled();
	};

	InfoIframe.prototype.close = function() {
	  if (this.ifr) {
	    this.ifr.close();
	  }
	  this.removeAllListeners();
	  this.ifr = null;
	};

	module.exports = InfoIframe;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var EventEmitter = __webpack_require__(10).EventEmitter
	  , inherits = __webpack_require__(4)
	  , urlUtils = __webpack_require__(14)
	  , XDR = __webpack_require__(102)
	  , XHRCors = __webpack_require__(62)
	  , XHRLocal = __webpack_require__(45)
	  , XHRFake = __webpack_require__(399)
	  , InfoIframe = __webpack_require__(386)
	  , InfoAjax = __webpack_require__(171)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:info-receiver');
	}

	function InfoReceiver(baseUrl, urlInfo) {
	  debug(baseUrl);
	  var self = this;
	  EventEmitter.call(this);

	  setTimeout(function() {
	    self.doXhr(baseUrl, urlInfo);
	  }, 0);
	}

	inherits(InfoReceiver, EventEmitter);

	// TODO this is currently ignoring the list of available transports and the whitelist

	InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
	  // determine method of CORS support (if needed)
	  if (urlInfo.sameOrigin) {
	    return new InfoAjax(url, XHRLocal);
	  }
	  if (XHRCors.enabled) {
	    return new InfoAjax(url, XHRCors);
	  }
	  if (XDR.enabled && urlInfo.sameScheme) {
	    return new InfoAjax(url, XDR);
	  }
	  if (InfoIframe.enabled()) {
	    return new InfoIframe(baseUrl, url);
	  }
	  return new InfoAjax(url, XHRFake);
	};

	InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
	  var self = this
	    , url = urlUtils.addPath(baseUrl, '/info')
	    ;
	  debug('doXhr', url);

	  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

	  this.timeoutRef = setTimeout(function() {
	    debug('timeout');
	    self._cleanup(false);
	    self.emit('finish');
	  }, InfoReceiver.timeout);

	  this.xo.once('finish', function(info, rtt) {
	    debug('finish', info, rtt);
	    self._cleanup(true);
	    self.emit('finish', info, rtt);
	  });
	};

	InfoReceiver.prototype._cleanup = function(wasClean) {
	  debug('_cleanup');
	  clearTimeout(this.timeoutRef);
	  this.timeoutRef = null;
	  if (!wasClean && this.xo) {
	    this.xo.close();
	  }
	  this.xo = null;
	};

	InfoReceiver.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  this._cleanup(false);
	};

	InfoReceiver.timeout = 8000;

	module.exports = InfoReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	__webpack_require__(389);

	var URL = __webpack_require__(112)
	  , inherits = __webpack_require__(4)
	  , JSON3 = __webpack_require__(18)
	  , random = __webpack_require__(36)
	  , escape = __webpack_require__(404)
	  , urlUtils = __webpack_require__(14)
	  , eventUtils = __webpack_require__(25)
	  , transport = __webpack_require__(406)
	  , objectUtils = __webpack_require__(103)
	  , browser = __webpack_require__(46)
	  , log = __webpack_require__(405)
	  , Event = __webpack_require__(100)
	  , EventTarget = __webpack_require__(170)
	  , loc = __webpack_require__(173)
	  , CloseEvent = __webpack_require__(382)
	  , TransportMessageEvent = __webpack_require__(383)
	  , InfoReceiver = __webpack_require__(387)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  // Make debug module available globally so you can enable via the console easily
	  global.dbg = __webpack_require__(7);
	  debug = global.dbg('sockjs-client:main');
	}

	var transports;

	// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
	function SockJS(url, protocols, options) {
	  if (!(this instanceof SockJS)) {
	    return new SockJS(url, protocols, options);
	  }
	  if (arguments.length < 1) {
	    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
	  }
	  EventTarget.call(this);

	  this.readyState = SockJS.CONNECTING;
	  this.extensions = '';
	  this.protocol = '';

	  // non-standard extension
	  options = options || {};
	  if (options.protocols_whitelist) {
	    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
	  }
	  this._transportsWhitelist = options.transports;

	  var sessionId = options.sessionId || 8;
	  if (typeof sessionId === 'function') {
	    this._generateSessionId = sessionId;
	  } else if (typeof sessionId === 'number') {
	    this._generateSessionId = function() {
	      return random.string(sessionId);
	    };
	  } else {
	    throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");
	  }

	  this._server = options.server || random.numberString(1000);

	  // Step 1 of WS spec - parse and validate the url. Issue #8
	  var parsedUrl = new URL(url);
	  if (!parsedUrl.host || !parsedUrl.protocol) {
	    throw new SyntaxError("The URL '" + url + "' is invalid");
	  } else if (parsedUrl.hash) {
	    throw new SyntaxError('The URL must not contain a fragment');
	  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
	    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
	  }

	  var secure = parsedUrl.protocol === 'https:';
	  // Step 2 - don't allow secure origin with an insecure protocol
	  if (loc.protocol === 'https' && !secure) {
	    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
	  }

	  // Step 3 - check port access - no need here
	  // Step 4 - parse protocols argument
	  if (!protocols) {
	    protocols = [];
	  } else if (!Array.isArray(protocols)) {
	    protocols = [protocols];
	  }

	  // Step 5 - check protocols argument
	  var sortedProtocols = protocols.sort();
	  sortedProtocols.forEach(function(proto, i) {
	    if (!proto) {
	      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
	    }
	    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
	      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
	    }
	  });

	  // Step 6 - convert origin
	  var o = urlUtils.getOrigin(loc.href);
	  this._origin = o ? o.toLowerCase() : null;

	  // remove the trailing slash
	  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

	  // store the sanitized url
	  this.url = parsedUrl.href;
	  debug('using url', this.url);

	  // Step 7 - start connection in background
	  // obtain server info
	  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
	  this._urlInfo = {
	    nullOrigin: !browser.hasDomain()
	  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
	  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
	  };

	  this._ir = new InfoReceiver(this.url, this._urlInfo);
	  this._ir.once('finish', this._receiveInfo.bind(this));
	}

	inherits(SockJS, EventTarget);

	function userSetCode(code) {
	  return code === 1000 || (code >= 3000 && code <= 4999);
	}

	SockJS.prototype.close = function(code, reason) {
	  // Step 1
	  if (code && !userSetCode(code)) {
	    throw new Error('InvalidAccessError: Invalid code');
	  }
	  // Step 2.4 states the max is 123 bytes, but we are just checking length
	  if (reason && reason.length > 123) {
	    throw new SyntaxError('reason argument has an invalid length');
	  }

	  // Step 3.1
	  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
	    return;
	  }

	  // TODO look at docs to determine how to set this
	  var wasClean = true;
	  this._close(code || 1000, reason || 'Normal closure', wasClean);
	};

	SockJS.prototype.send = function(data) {
	  // #13 - convert anything non-string to string
	  // TODO this currently turns objects into [object Object]
	  if (typeof data !== 'string') {
	    data = '' + data;
	  }
	  if (this.readyState === SockJS.CONNECTING) {
	    throw new Error('InvalidStateError: The connection has not been established yet');
	  }
	  if (this.readyState !== SockJS.OPEN) {
	    return;
	  }
	  this._transport.send(escape.quote(data));
	};

	SockJS.version = __webpack_require__(182);

	SockJS.CONNECTING = 0;
	SockJS.OPEN = 1;
	SockJS.CLOSING = 2;
	SockJS.CLOSED = 3;

	SockJS.prototype._receiveInfo = function(info, rtt) {
	  debug('_receiveInfo', rtt);
	  this._ir = null;
	  if (!info) {
	    this._close(1002, 'Cannot connect to server');
	    return;
	  }

	  // establish a round-trip timeout (RTO) based on the
	  // round-trip time (RTT)
	  this._rto = this.countRTO(rtt);
	  // allow server to override url used for the actual transport
	  this._transUrl = info.base_url ? info.base_url : this.url;
	  info = objectUtils.extend(info, this._urlInfo);
	  debug('info', info);
	  // determine list of desired and supported transports
	  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
	  this._transports = enabledTransports.main;
	  debug(this._transports.length + ' enabled transports');

	  this._connect();
	};

	SockJS.prototype._connect = function() {
	  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
	    debug('attempt', Transport.transportName);
	    if (Transport.needBody) {
	      if (!global.document.body ||
	          (typeof global.document.readyState !== 'undefined' &&
	            global.document.readyState !== 'complete' &&
	            global.document.readyState !== 'interactive')) {
	        debug('waiting for body');
	        this._transports.unshift(Transport);
	        eventUtils.attachEvent('load', this._connect.bind(this));
	        return;
	      }
	    }

	    // calculate timeout based on RTO and round trips. Default to 5s
	    var timeoutMs = (this._rto * Transport.roundTrips) || 5000;
	    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
	    debug('using timeout', timeoutMs);

	    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
	    debug('transport url', transportUrl);
	    var transportObj = new Transport(transportUrl, this._transUrl);
	    transportObj.on('message', this._transportMessage.bind(this));
	    transportObj.once('close', this._transportClose.bind(this));
	    transportObj.transportName = Transport.transportName;
	    this._transport = transportObj;

	    return;
	  }
	  this._close(2000, 'All transports failed', false);
	};

	SockJS.prototype._transportTimeout = function() {
	  debug('_transportTimeout');
	  if (this.readyState === SockJS.CONNECTING) {
	    this._transportClose(2007, 'Transport timed out');
	  }
	};

	SockJS.prototype._transportMessage = function(msg) {
	  debug('_transportMessage', msg);
	  var self = this
	    , type = msg.slice(0, 1)
	    , content = msg.slice(1)
	    , payload
	    ;

	  // first check for messages that don't need a payload
	  switch (type) {
	    case 'o':
	      this._open();
	      return;
	    case 'h':
	      this.dispatchEvent(new Event('heartbeat'));
	      debug('heartbeat', this.transport);
	      return;
	  }

	  if (content) {
	    try {
	      payload = JSON3.parse(content);
	    } catch (e) {
	      debug('bad json', content);
	    }
	  }

	  if (typeof payload === 'undefined') {
	    debug('empty payload', content);
	    return;
	  }

	  switch (type) {
	    case 'a':
	      if (Array.isArray(payload)) {
	        payload.forEach(function(p) {
	          debug('message', self.transport, p);
	          self.dispatchEvent(new TransportMessageEvent(p));
	        });
	      }
	      break;
	    case 'm':
	      debug('message', this.transport, payload);
	      this.dispatchEvent(new TransportMessageEvent(payload));
	      break;
	    case 'c':
	      if (Array.isArray(payload) && payload.length === 2) {
	        this._close(payload[0], payload[1], true);
	      }
	      break;
	  }
	};

	SockJS.prototype._transportClose = function(code, reason) {
	  debug('_transportClose', this.transport, code, reason);
	  if (this._transport) {
	    this._transport.removeAllListeners();
	    this._transport = null;
	    this.transport = null;
	  }

	  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
	    this._connect();
	    return;
	  }

	  this._close(code, reason);
	};

	SockJS.prototype._open = function() {
	  debug('_open', this._transport.transportName, this.readyState);
	  if (this.readyState === SockJS.CONNECTING) {
	    if (this._transportTimeoutId) {
	      clearTimeout(this._transportTimeoutId);
	      this._transportTimeoutId = null;
	    }
	    this.readyState = SockJS.OPEN;
	    this.transport = this._transport.transportName;
	    this.dispatchEvent(new Event('open'));
	    debug('connected', this.transport);
	  } else {
	    // The server might have been restarted, and lost track of our
	    // connection.
	    this._close(1006, 'Server lost session');
	  }
	};

	SockJS.prototype._close = function(code, reason, wasClean) {
	  debug('_close', this.transport, code, reason, wasClean, this.readyState);
	  var forceFail = false;

	  if (this._ir) {
	    forceFail = true;
	    this._ir.close();
	    this._ir = null;
	  }
	  if (this._transport) {
	    this._transport.close();
	    this._transport = null;
	    this.transport = null;
	  }

	  if (this.readyState === SockJS.CLOSED) {
	    throw new Error('InvalidStateError: SockJS has already been closed');
	  }

	  this.readyState = SockJS.CLOSING;
	  setTimeout(function() {
	    this.readyState = SockJS.CLOSED;

	    if (forceFail) {
	      this.dispatchEvent(new Event('error'));
	    }

	    var e = new CloseEvent('close');
	    e.wasClean = wasClean || false;
	    e.code = code || 1000;
	    e.reason = reason;

	    this.dispatchEvent(e);
	    this.onmessage = this.onclose = this.onerror = null;
	    debug('disconnected');
	  }.bind(this), 0);
	};

	// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
	// and RFC 2988.
	SockJS.prototype.countRTO = function(rtt) {
	  // In a local environment, when using IE8/9 and the `jsonp-polling`
	  // transport the time needed to establish a connection (the time that pass
	  // from the opening of the transport to the call of `_dispatchOpen`) is
	  // around 200msec (the lower bound used in the article above) and this
	  // causes spurious timeouts. For this reason we calculate a value slightly
	  // larger than that used in the article.
	  if (rtt > 100) {
	    return 4 * rtt; // rto > 400msec
	  }
	  return 300 + rtt; // 300msec < rto <= 400msec
	};

	module.exports = function(availableTransports) {
	  transports = transport(availableTransports);
	  __webpack_require__(385)(SockJS, availableTransports);
	  return SockJS;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 389 */
/***/ function(module, exports) {

	/* eslint-disable */
	/* jscs: disable */
	'use strict';

	// pulled specific shims from https://github.com/es-shims/es5-shim

	var ArrayPrototype = Array.prototype;
	var ObjectPrototype = Object.prototype;
	var FunctionPrototype = Function.prototype;
	var StringPrototype = String.prototype;
	var array_slice = ArrayPrototype.slice;

	var _toString = ObjectPrototype.toString;
	var isFunction = function (val) {
	    return ObjectPrototype.toString.call(val) === '[object Function]';
	};
	var isArray = function isArray(obj) {
	    return _toString.call(obj) === '[object Array]';
	};
	var isString = function isString(obj) {
	    return _toString.call(obj) === '[object String]';
	};

	var supportsDescriptors = Object.defineProperty && (function () {
	    try {
	        Object.defineProperty({}, 'x', {});
	        return true;
	    } catch (e) { /* this is ES3 */
	        return false;
	    }
	}());

	// Define configurable, writable and non-enumerable props
	// if they don't exist.
	var defineProperty;
	if (supportsDescriptors) {
	    defineProperty = function (object, name, method, forceAssign) {
	        if (!forceAssign && (name in object)) { return; }
	        Object.defineProperty(object, name, {
	            configurable: true,
	            enumerable: false,
	            writable: true,
	            value: method
	        });
	    };
	} else {
	    defineProperty = function (object, name, method, forceAssign) {
	        if (!forceAssign && (name in object)) { return; }
	        object[name] = method;
	    };
	}
	var defineProperties = function (object, map, forceAssign) {
	    for (var name in map) {
	        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
	          defineProperty(object, name, map[name], forceAssign);
	        }
	    }
	};

	var toObject = function (o) {
	    if (o == null) { // this matches both null and undefined
	        throw new TypeError("can't convert " + o + ' to object');
	    }
	    return Object(o);
	};

	//
	// Util
	// ======
	//

	// ES5 9.4
	// http://es5.github.com/#x9.4
	// http://jsperf.com/to-integer

	function toInteger(num) {
	    var n = +num;
	    if (n !== n) { // isNaN
	        n = 0;
	    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
	        n = (n > 0 || -1) * Math.floor(Math.abs(n));
	    }
	    return n;
	}

	function ToUint32(x) {
	    return x >>> 0;
	}

	//
	// Function
	// ========
	//

	// ES-5 15.3.4.5
	// http://es5.github.com/#x15.3.4.5

	function Empty() {}

	defineProperties(FunctionPrototype, {
	    bind: function bind(that) { // .length is 1
	        // 1. Let Target be the this value.
	        var target = this;
	        // 2. If IsCallable(Target) is false, throw a TypeError exception.
	        if (!isFunction(target)) {
	            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
	        }
	        // 3. Let A be a new (possibly empty) internal list of all of the
	        //   argument values provided after thisArg (arg1, arg2 etc), in order.
	        // XXX slicedArgs will stand in for "A" if used
	        var args = array_slice.call(arguments, 1); // for normal call
	        // 4. Let F be a new native ECMAScript object.
	        // 11. Set the [[Prototype]] internal property of F to the standard
	        //   built-in Function prototype object as specified in 15.3.3.1.
	        // 12. Set the [[Call]] internal property of F as described in
	        //   15.3.4.5.1.
	        // 13. Set the [[Construct]] internal property of F as described in
	        //   15.3.4.5.2.
	        // 14. Set the [[HasInstance]] internal property of F as described in
	        //   15.3.4.5.3.
	        var binder = function () {

	            if (this instanceof bound) {
	                // 15.3.4.5.2 [[Construct]]
	                // When the [[Construct]] internal method of a function object,
	                // F that was created using the bind function is called with a
	                // list of arguments ExtraArgs, the following steps are taken:
	                // 1. Let target be the value of F's [[TargetFunction]]
	                //   internal property.
	                // 2. If target has no [[Construct]] internal method, a
	                //   TypeError exception is thrown.
	                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Construct]] internal
	                //   method of target providing args as the arguments.

	                var result = target.apply(
	                    this,
	                    args.concat(array_slice.call(arguments))
	                );
	                if (Object(result) === result) {
	                    return result;
	                }
	                return this;

	            } else {
	                // 15.3.4.5.1 [[Call]]
	                // When the [[Call]] internal method of a function object, F,
	                // which was created using the bind function is called with a
	                // this value and a list of arguments ExtraArgs, the following
	                // steps are taken:
	                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 2. Let boundThis be the value of F's [[BoundThis]] internal
	                //   property.
	                // 3. Let target be the value of F's [[TargetFunction]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Call]] internal method
	                //   of target providing boundThis as the this value and
	                //   providing args as the arguments.

	                // equiv: target.call(this, ...boundArgs, ...args)
	                return target.apply(
	                    that,
	                    args.concat(array_slice.call(arguments))
	                );

	            }

	        };

	        // 15. If the [[Class]] internal property of Target is "Function", then
	        //     a. Let L be the length property of Target minus the length of A.
	        //     b. Set the length own property of F to either 0 or L, whichever is
	        //       larger.
	        // 16. Else set the length own property of F to 0.

	        var boundLength = Math.max(0, target.length - args.length);

	        // 17. Set the attributes of the length own property of F to the values
	        //   specified in 15.3.5.1.
	        var boundArgs = [];
	        for (var i = 0; i < boundLength; i++) {
	            boundArgs.push('$' + i);
	        }

	        // XXX Build a dynamic function with desired amount of arguments is the only
	        // way to set the length property of a function.
	        // In environments where Content Security Policies enabled (Chrome extensions,
	        // for ex.) all use of eval or Function costructor throws an exception.
	        // However in all of these environments Function.prototype.bind exists
	        // and so this code will never be executed.
	        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

	        if (target.prototype) {
	            Empty.prototype = target.prototype;
	            bound.prototype = new Empty();
	            // Clean up dangling references.
	            Empty.prototype = null;
	        }

	        // TODO
	        // 18. Set the [[Extensible]] internal property of F to true.

	        // TODO
	        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
	        // 20. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
	        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
	        //   false.
	        // 21. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
	        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
	        //   and false.

	        // TODO
	        // NOTE Function objects created using Function.prototype.bind do not
	        // have a prototype property or the [[Code]], [[FormalParameters]], and
	        // [[Scope]] internal properties.
	        // XXX can't delete prototype in pure-js.

	        // 22. Return F.
	        return bound;
	    }
	});

	//
	// Array
	// =====
	//

	// ES5 15.4.3.2
	// http://es5.github.com/#x15.4.3.2
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
	defineProperties(Array, { isArray: isArray });


	var boxedString = Object('a');
	var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

	var properlyBoxesContext = function properlyBoxed(method) {
	    // Check node 0.6.21 bug where third parameter is not boxed
	    var properlyBoxesNonStrict = true;
	    var properlyBoxesStrict = true;
	    if (method) {
	        method.call('foo', function (_, __, context) {
	            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
	        });

	        method.call([1], function () {
	            'use strict';
	            properlyBoxesStrict = typeof this === 'string';
	        }, 'x');
	    }
	    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
	};

	defineProperties(ArrayPrototype, {
	    forEach: function forEach(fun /*, thisp*/) {
	        var object = toObject(this),
	            self = splitString && isString(this) ? this.split('') : object,
	            thisp = arguments[1],
	            i = -1,
	            length = self.length >>> 0;

	        // If no callback function or if callback is not a callable function
	        if (!isFunction(fun)) {
	            throw new TypeError(); // TODO message
	        }

	        while (++i < length) {
	            if (i in self) {
	                // Invoke the callback function with call, passing arguments:
	                // context, property value, property key, thisArg object
	                // context
	                fun.call(thisp, self[i], i, object);
	            }
	        }
	    }
	}, !properlyBoxesContext(ArrayPrototype.forEach));

	// ES5 15.4.4.14
	// http://es5.github.com/#x15.4.4.14
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
	var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
	defineProperties(ArrayPrototype, {
	    indexOf: function indexOf(sought /*, fromIndex */ ) {
	        var self = splitString && isString(this) ? this.split('') : toObject(this),
	            length = self.length >>> 0;

	        if (!length) {
	            return -1;
	        }

	        var i = 0;
	        if (arguments.length > 1) {
	            i = toInteger(arguments[1]);
	        }

	        // handle negative indices
	        i = i >= 0 ? i : Math.max(0, length + i);
	        for (; i < length; i++) {
	            if (i in self && self[i] === sought) {
	                return i;
	            }
	        }
	        return -1;
	    }
	}, hasFirefox2IndexOfBug);

	//
	// String
	// ======
	//

	// ES5 15.5.4.14
	// http://es5.github.com/#x15.5.4.14

	// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
	// Many browsers do not split properly with regular expressions or they
	// do not perform the split correctly under obscure conditions.
	// See http://blog.stevenlevithan.com/archives/cross-browser-split
	// I've tested in many browsers and this seems to cover the deviant ones:
	//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
	//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
	//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
	//       [undefined, "t", undefined, "e", ...]
	//    ''.split(/.?/) should be [], not [""]
	//    '.'.split(/()()/) should be ["."], not ["", "", "."]

	var string_split = StringPrototype.split;
	if (
	    'ab'.split(/(?:ab)*/).length !== 2 ||
	    '.'.split(/(.?)(.?)/).length !== 4 ||
	    'tesst'.split(/(s)*/)[1] === 't' ||
	    'test'.split(/(?:)/, -1).length !== 4 ||
	    ''.split(/.?/).length ||
	    '.'.split(/()()/).length > 1
	) {
	    (function () {
	        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

	        StringPrototype.split = function (separator, limit) {
	            var string = this;
	            if (separator === void 0 && limit === 0) {
	                return [];
	            }

	            // If `separator` is not a regex, use native split
	            if (_toString.call(separator) !== '[object RegExp]') {
	                return string_split.call(this, separator, limit);
	            }

	            var output = [],
	                flags = (separator.ignoreCase ? 'i' : '') +
	                        (separator.multiline  ? 'm' : '') +
	                        (separator.extended   ? 'x' : '') + // Proposed for ES6
	                        (separator.sticky     ? 'y' : ''), // Firefox 3+
	                lastLastIndex = 0,
	                // Make `global` and avoid `lastIndex` issues by working with a copy
	                separator2, match, lastIndex, lastLength;
	            separator = new RegExp(separator.source, flags + 'g');
	            string += ''; // Type-convert
	            if (!compliantExecNpcg) {
	                // Doesn't need flags gy, but they don't hurt
	                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
	            }
	            /* Values for `limit`, per the spec:
	             * If undefined: 4294967295 // Math.pow(2, 32) - 1
	             * If 0, Infinity, or NaN: 0
	             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
	             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
	             * If other: Type-convert, then use the above rules
	             */
	            limit = limit === void 0 ?
	                -1 >>> 0 : // Math.pow(2, 32) - 1
	                ToUint32(limit);
	            while (match = separator.exec(string)) {
	                // `separator.lastIndex` is not reliable cross-browser
	                lastIndex = match.index + match[0].length;
	                if (lastIndex > lastLastIndex) {
	                    output.push(string.slice(lastLastIndex, match.index));
	                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
	                    // nonparticipating capturing groups
	                    if (!compliantExecNpcg && match.length > 1) {
	                        match[0].replace(separator2, function () {
	                            for (var i = 1; i < arguments.length - 2; i++) {
	                                if (arguments[i] === void 0) {
	                                    match[i] = void 0;
	                                }
	                            }
	                        });
	                    }
	                    if (match.length > 1 && match.index < string.length) {
	                        ArrayPrototype.push.apply(output, match.slice(1));
	                    }
	                    lastLength = match[0].length;
	                    lastLastIndex = lastIndex;
	                    if (output.length >= limit) {
	                        break;
	                    }
	                }
	                if (separator.lastIndex === match.index) {
	                    separator.lastIndex++; // Avoid an infinite loop
	                }
	            }
	            if (lastLastIndex === string.length) {
	                if (lastLength || !separator.test('')) {
	                    output.push('');
	                }
	            } else {
	                output.push(string.slice(lastLastIndex));
	            }
	            return output.length > limit ? output.slice(0, limit) : output;
	        };
	    }());

	// [bugfix, chrome]
	// If separator is undefined, then the result array contains just one String,
	// which is the this value (converted to a String). If limit is not undefined,
	// then the output array is truncated so that it contains no more than limit
	// elements.
	// "0".split(undefined, 0) -> []
	} else if ('0'.split(void 0, 0).length) {
	    StringPrototype.split = function split(separator, limit) {
	        if (separator === void 0 && limit === 0) { return []; }
	        return string_split.call(this, separator, limit);
	    };
	}

	// ES5 15.5.4.20
	// whitespace from: http://es5.github.io/#x15.5.4.20
	var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
	    '\u2029\uFEFF';
	var zeroWidth = '\u200b';
	var wsRegexChars = '[' + ws + ']';
	var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
	var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
	var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
	defineProperties(StringPrototype, {
	    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
	    // http://perfectionkills.com/whitespace-deviations/
	    trim: function trim() {
	        if (this === void 0 || this === null) {
	            throw new TypeError("can't convert " + this + ' to object');
	        }
	        return String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
	    }
	}, hasTrimWhitespaceBug);

	// ECMA-262, 3rd B.2.3
	// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
	// non-normative section suggesting uniform semantics and it should be
	// normalized across all browsers
	// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
	var string_substr = StringPrototype.substr;
	var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
	defineProperties(StringPrototype, {
	    substr: function substr(start, length) {
	        return string_substr.call(
	            this,
	            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
	            length
	        );
	    }
	}, hasNegativeSubstrBug);


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  // streaming transports
	  __webpack_require__(400)
	, __webpack_require__(402)
	, __webpack_require__(180)
	, __webpack_require__(176)
	, __webpack_require__(101)(__webpack_require__(176))

	  // polling transports
	, __webpack_require__(177)
	, __webpack_require__(101)(__webpack_require__(177))
	, __webpack_require__(181)
	, __webpack_require__(401)
	, __webpack_require__(101)(__webpack_require__(181))
	, __webpack_require__(392)
	];


/***/ },
/* 391 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global.WebSocket || global.MozWebSocket;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// The simplest and most robust transport, using the well-know cross
	// domain hack - JSONP. This transport is quite inefficient - one
	// message could use up to one http request. But at least it works almost
	// everywhere.
	// Known limitations:
	//   o you will get a spinning cursor
	//   o for Konqueror a dumb timer is needed to detect errors

	var inherits = __webpack_require__(4)
	  , SenderReceiver = __webpack_require__(179)
	  , JsonpReceiver = __webpack_require__(397)
	  , jsonpSender = __webpack_require__(398)
	  ;

	function JsonPTransport(transUrl) {
	  if (!JsonPTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
	}

	inherits(JsonPTransport, SenderReceiver);

	JsonPTransport.enabled = function() {
	  return !!global.document;
	};

	JsonPTransport.transportName = 'jsonp-polling';
	JsonPTransport.roundTrips = 1;
	JsonPTransport.needBody = true;

	module.exports = JsonPTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:buffered-sender');
	}

	function BufferedSender(url, sender) {
	  debug(url);
	  EventEmitter.call(this);
	  this.sendBuffer = [];
	  this.sender = sender;
	  this.url = url;
	}

	inherits(BufferedSender, EventEmitter);

	BufferedSender.prototype.send = function(message) {
	  debug('send', message);
	  this.sendBuffer.push(message);
	  if (!this.sendStop) {
	    this.sendSchedule();
	  }
	};

	// For polling transports in a situation when in the message callback,
	// new message is being send. If the sending connection was started
	// before receiving one, it is possible to saturate the network and
	// timeout due to the lack of receiving socket. To avoid that we delay
	// sending messages by some small time, in order to let receiving
	// connection be started beforehand. This is only a halfmeasure and
	// does not fix the big problem, but it does make the tests go more
	// stable on slow networks.
	BufferedSender.prototype.sendScheduleWait = function() {
	  debug('sendScheduleWait');
	  var self = this;
	  var tref;
	  this.sendStop = function() {
	    debug('sendStop');
	    self.sendStop = null;
	    clearTimeout(tref);
	  };
	  tref = setTimeout(function() {
	    debug('timeout');
	    self.sendStop = null;
	    self.sendSchedule();
	  }, 25);
	};

	BufferedSender.prototype.sendSchedule = function() {
	  debug('sendSchedule', this.sendBuffer.length);
	  var self = this;
	  if (this.sendBuffer.length > 0) {
	    var payload = '[' + this.sendBuffer.join(',') + ']';
	    this.sendStop = this.sender(this.url, payload, function(err) {
	      self.sendStop = null;
	      if (err) {
	        debug('error', err);
	        self.emit('close', err.code || 1006, 'Sending error: ' + err);
	        self._cleanup();
	      } else {
	        self.sendScheduleWait();
	      }
	    });
	    this.sendBuffer = [];
	  }
	};

	BufferedSender.prototype._cleanup = function() {
	  debug('_cleanup');
	  this.removeAllListeners();
	};

	BufferedSender.prototype.stop = function() {
	  debug('stop');
	  this._cleanup();
	  if (this.sendStop) {
	    this.sendStop();
	    this.sendStop = null;
	  }
	};

	module.exports = BufferedSender;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:polling');
	}

	function Polling(Receiver, receiveUrl, AjaxObject) {
	  debug(receiveUrl);
	  EventEmitter.call(this);
	  this.Receiver = Receiver;
	  this.receiveUrl = receiveUrl;
	  this.AjaxObject = AjaxObject;
	  this._scheduleReceiver();
	}

	inherits(Polling, EventEmitter);

	Polling.prototype._scheduleReceiver = function() {
	  debug('_scheduleReceiver');
	  var self = this;
	  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

	  poll.on('message', function(msg) {
	    debug('message', msg);
	    self.emit('message', msg);
	  });

	  poll.once('close', function(code, reason) {
	    debug('close', code, reason, self.pollIsClosing);
	    self.poll = poll = null;

	    if (!self.pollIsClosing) {
	      if (reason === 'network') {
	        self._scheduleReceiver();
	      } else {
	        self.emit('close', code || 1006, reason);
	        self.removeAllListeners();
	      }
	    }
	  });
	};

	Polling.prototype.abort = function() {
	  debug('abort');
	  this.removeAllListeners();
	  this.pollIsClosing = true;
	  if (this.poll) {
	    this.poll.abort();
	  }
	};

	module.exports = Polling;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  , EventSourceDriver = __webpack_require__(175)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:receiver:eventsource');
	}

	function EventSourceReceiver(url) {
	  debug(url);
	  EventEmitter.call(this);

	  var self = this;
	  var es = this.es = new EventSourceDriver(url);
	  es.onmessage = function(e) {
	    debug('message', e.data);
	    self.emit('message', decodeURI(e.data));
	  };
	  es.onerror = function(e) {
	    debug('error', es.readyState, e);
	    // ES on reconnection has readyState = 0 or 1.
	    // on network error it's CLOSED = 2
	    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
	    self._cleanup();
	    self._close(reason);
	  };
	}

	inherits(EventSourceReceiver, EventEmitter);

	EventSourceReceiver.prototype.abort = function() {
	  debug('abort');
	  this._cleanup();
	  this._close('user');
	};

	EventSourceReceiver.prototype._cleanup = function() {
	  debug('cleanup');
	  var es = this.es;
	  if (es) {
	    es.onmessage = es.onerror = null;
	    es.close();
	    this.es = null;
	  }
	};

	EventSourceReceiver.prototype._close = function(reason) {
	  debug('close', reason);
	  var self = this;
	  // Safari and chrome < 15 crash if we close window before
	  // waiting for ES cleanup. See:
	  // https://code.google.com/p/chromium/issues/detail?id=89155
	  setTimeout(function() {
	    self.emit('close', null, reason);
	    self.removeAllListeners();
	  }, 200);
	};

	module.exports = EventSourceReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var inherits = __webpack_require__(4)
	  , iframeUtils = __webpack_require__(47)
	  , urlUtils = __webpack_require__(14)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  , random = __webpack_require__(36)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:receiver:htmlfile');
	}

	function HtmlfileReceiver(url) {
	  debug(url);
	  EventEmitter.call(this);
	  var self = this;
	  iframeUtils.polluteGlobalNamespace();

	  this.id = 'a' + random.string(6);
	  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

	  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
	  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
	      iframeUtils.createHtmlfile : iframeUtils.createIframe;

	  global[iframeUtils.WPrefix][this.id] = {
	    start: function() {
	      debug('start');
	      self.iframeObj.loaded();
	    }
	  , message: function(data) {
	      debug('message', data);
	      self.emit('message', data);
	    }
	  , stop: function() {
	      debug('stop');
	      self._cleanup();
	      self._close('network');
	    }
	  };
	  this.iframeObj = constructFunc(url, function() {
	    debug('callback');
	    self._cleanup();
	    self._close('permanent');
	  });
	}

	inherits(HtmlfileReceiver, EventEmitter);

	HtmlfileReceiver.prototype.abort = function() {
	  debug('abort');
	  this._cleanup();
	  this._close('user');
	};

	HtmlfileReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  if (this.iframeObj) {
	    this.iframeObj.cleanup();
	    this.iframeObj = null;
	  }
	  delete global[iframeUtils.WPrefix][this.id];
	};

	HtmlfileReceiver.prototype._close = function(reason) {
	  debug('_close', reason);
	  this.emit('close', null, reason);
	  this.removeAllListeners();
	};

	HtmlfileReceiver.htmlfileEnabled = false;

	// obfuscate to avoid firewalls
	var axo = ['Active'].concat('Object').join('X');
	if (axo in global) {
	  try {
	    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
	  } catch (x) {}
	}

	HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

	module.exports = HtmlfileReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var utils = __webpack_require__(47)
	  , random = __webpack_require__(36)
	  , browser = __webpack_require__(46)
	  , urlUtils = __webpack_require__(14)
	  , inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:receiver:jsonp');
	}

	function JsonpReceiver(url) {
	  debug(url);
	  var self = this;
	  EventEmitter.call(this);

	  utils.polluteGlobalNamespace();

	  this.id = 'a' + random.string(6);
	  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

	  global[utils.WPrefix][this.id] = this._callback.bind(this);
	  this._createScript(urlWithId);

	  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
	  this.timeoutId = setTimeout(function() {
	    debug('timeout');
	    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
	  }, JsonpReceiver.timeout);
	}

	inherits(JsonpReceiver, EventEmitter);

	JsonpReceiver.prototype.abort = function() {
	  debug('abort');
	  if (global[utils.WPrefix][this.id]) {
	    var err = new Error('JSONP user aborted read');
	    err.code = 1000;
	    this._abort(err);
	  }
	};

	JsonpReceiver.timeout = 35000;
	JsonpReceiver.scriptErrorTimeout = 1000;

	JsonpReceiver.prototype._callback = function(data) {
	  debug('_callback', data);
	  this._cleanup();

	  if (this.aborting) {
	    return;
	  }

	  if (data) {
	    debug('message', data);
	    this.emit('message', data);
	  }
	  this.emit('close', null, 'network');
	  this.removeAllListeners();
	};

	JsonpReceiver.prototype._abort = function(err) {
	  debug('_abort', err);
	  this._cleanup();
	  this.aborting = true;
	  this.emit('close', err.code, err.message);
	  this.removeAllListeners();
	};

	JsonpReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  clearTimeout(this.timeoutId);
	  if (this.script2) {
	    this.script2.parentNode.removeChild(this.script2);
	    this.script2 = null;
	  }
	  if (this.script) {
	    var script = this.script;
	    // Unfortunately, you can't really abort script loading of
	    // the script.
	    script.parentNode.removeChild(script);
	    script.onreadystatechange = script.onerror =
	        script.onload = script.onclick = null;
	    this.script = null;
	  }
	  delete global[utils.WPrefix][this.id];
	};

	JsonpReceiver.prototype._scriptError = function() {
	  debug('_scriptError');
	  var self = this;
	  if (this.errorTimer) {
	    return;
	  }

	  this.errorTimer = setTimeout(function() {
	    if (!self.loadedOkay) {
	      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
	    }
	  }, JsonpReceiver.scriptErrorTimeout);
	};

	JsonpReceiver.prototype._createScript = function(url) {
	  debug('_createScript', url);
	  var self = this;
	  var script = this.script = global.document.createElement('script');
	  var script2;  // Opera synchronous load trick.

	  script.id = 'a' + random.string(8);
	  script.src = url;
	  script.type = 'text/javascript';
	  script.charset = 'UTF-8';
	  script.onerror = this._scriptError.bind(this);
	  script.onload = function() {
	    debug('onload');
	    self._abort(new Error('JSONP script loaded abnormally (onload)'));
	  };

	  // IE9 fires 'error' event after onreadystatechange or before, in random order.
	  // Use loadedOkay to determine if actually errored
	  script.onreadystatechange = function() {
	    debug('onreadystatechange', script.readyState);
	    if (/loaded|closed/.test(script.readyState)) {
	      if (script && script.htmlFor && script.onclick) {
	        self.loadedOkay = true;
	        try {
	          // In IE, actually execute the script.
	          script.onclick();
	        } catch (x) {}
	      }
	      if (script) {
	        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
	      }
	    }
	  };
	  // IE: event/htmlFor/onclick trick.
	  // One can't rely on proper order for onreadystatechange. In order to
	  // make sure, set a 'htmlFor' and 'event' properties, so that
	  // script code will be installed as 'onclick' handler for the
	  // script object. Later, onreadystatechange, manually execute this
	  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
	  // set. For reference see:
	  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	  // Also, read on that about script ordering:
	  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
	  if (typeof script.async === 'undefined' && global.document.attachEvent) {
	    // According to mozilla docs, in recent browsers script.async defaults
	    // to 'true', so we may use it to detect a good browser:
	    // https://developer.mozilla.org/en/HTML/Element/script
	    if (!browser.isOpera()) {
	      // Naively assume we're in IE
	      try {
	        script.htmlFor = script.id;
	        script.event = 'onclick';
	      } catch (x) {}
	      script.async = true;
	    } else {
	      // Opera, second sync script hack
	      script2 = this.script2 = global.document.createElement('script');
	      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
	      script.async = script2.async = false;
	    }
	  }
	  if (typeof script.async !== 'undefined') {
	    script.async = true;
	  }

	  var head = global.document.getElementsByTagName('head')[0];
	  head.insertBefore(script, head.firstChild);
	  if (script2) {
	    head.insertBefore(script2, head.firstChild);
	  }
	};

	module.exports = JsonpReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var random = __webpack_require__(36)
	  , urlUtils = __webpack_require__(14)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:sender:jsonp');
	}

	var form, area;

	function createIframe(id) {
	  debug('createIframe', id);
	  try {
	    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	    return global.document.createElement('<iframe name="' + id + '">');
	  } catch (x) {
	    var iframe = global.document.createElement('iframe');
	    iframe.name = id;
	    return iframe;
	  }
	}

	function createForm() {
	  debug('createForm');
	  form = global.document.createElement('form');
	  form.style.display = 'none';
	  form.style.position = 'absolute';
	  form.method = 'POST';
	  form.enctype = 'application/x-www-form-urlencoded';
	  form.acceptCharset = 'UTF-8';

	  area = global.document.createElement('textarea');
	  area.name = 'd';
	  form.appendChild(area);

	  global.document.body.appendChild(form);
	}

	module.exports = function(url, payload, callback) {
	  debug(url, payload);
	  if (!form) {
	    createForm();
	  }
	  var id = 'a' + random.string(8);
	  form.target = id;
	  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

	  var iframe = createIframe(id);
	  iframe.id = id;
	  iframe.style.display = 'none';
	  form.appendChild(iframe);

	  try {
	    area.value = payload;
	  } catch (e) {
	    // seriously broken browsers get here
	  }
	  form.submit();

	  var completed = function(err) {
	    debug('completed', id, err);
	    if (!iframe.onerror) {
	      return;
	    }
	    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
	    // Opera mini doesn't like if we GC iframe
	    // immediately, thus this timeout.
	    setTimeout(function() {
	      debug('cleaning up', id);
	      iframe.parentNode.removeChild(iframe);
	      iframe = null;
	    }, 500);
	    area.value = '';
	    // It is not possible to detect if the iframe succeeded or
	    // failed to submit our form.
	    callback(err);
	  };
	  iframe.onerror = function() {
	    debug('onerror', id);
	    completed();
	  };
	  iframe.onload = function() {
	    debug('onload', id);
	    completed();
	  };
	  iframe.onreadystatechange = function(e) {
	    debug('onreadystatechange', id, iframe.readyState, e);
	    if (iframe.readyState === 'complete') {
	      completed();
	    }
	  };
	  return function() {
	    debug('aborted', id);
	    completed(new Error('Aborted'));
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), (function() { return this; }())))

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var EventEmitter = __webpack_require__(10).EventEmitter
	  , inherits = __webpack_require__(4)
	  ;

	function XHRFake(/* method, url, payload, opts */) {
	  var self = this;
	  EventEmitter.call(this);

	  this.to = setTimeout(function() {
	    self.emit('finish', 200, '{}');
	  }, XHRFake.timeout);
	}

	inherits(XHRFake, EventEmitter);

	XHRFake.prototype.close = function() {
	  clearTimeout(this.to);
	};

	XHRFake.timeout = 2000;

	module.exports = XHRFake;


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(25)
	  , urlUtils = __webpack_require__(14)
	  , inherits = __webpack_require__(4)
	  , EventEmitter = __webpack_require__(10).EventEmitter
	  , WebsocketDriver = __webpack_require__(391)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:websocket');
	}

	function WebSocketTransport(transUrl) {
	  if (!WebSocketTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }

	  EventEmitter.call(this);
	  debug('constructor', transUrl);

	  var self = this;
	  var url = urlUtils.addPath(transUrl, '/websocket');
	  if (url.slice(0, 5) === 'https') {
	    url = 'wss' + url.slice(5);
	  } else {
	    url = 'ws' + url.slice(4);
	  }
	  this.url = url;

	  this.ws = new WebsocketDriver(this.url);
	  this.ws.onmessage = function(e) {
	    debug('message event', e.data);
	    self.emit('message', e.data);
	  };
	  // Firefox has an interesting bug. If a websocket connection is
	  // created after onunload, it stays alive even when user
	  // navigates away from the page. In such situation let's lie -
	  // let's not open the ws connection at all. See:
	  // https://github.com/sockjs/sockjs-client/issues/28
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
	  this.unloadRef = utils.unloadAdd(function() {
	    debug('unload');
	    self.ws.close();
	  });
	  this.ws.onclose = function(e) {
	    debug('close event', e.code, e.reason);
	    self.emit('close', e.code, e.reason);
	    self._cleanup();
	  };
	  this.ws.onerror = function(e) {
	    debug('error event', e);
	    self.emit('close', 1006, 'WebSocket connection broken');
	    self._cleanup();
	  };
	}

	inherits(WebSocketTransport, EventEmitter);

	WebSocketTransport.prototype.send = function(data) {
	  var msg = '[' + data + ']';
	  debug('send', msg);
	  this.ws.send(msg);
	};

	WebSocketTransport.prototype.close = function() {
	  debug('close');
	  if (this.ws) {
	    this.ws.close();
	  }
	  this._cleanup();
	};

	WebSocketTransport.prototype._cleanup = function() {
	  debug('_cleanup');
	  var ws = this.ws;
	  if (ws) {
	    ws.onmessage = ws.onclose = ws.onerror = null;
	  }
	  utils.unloadDel(this.unloadRef);
	  this.unloadRef = this.ws = null;
	  this.removeAllListeners();
	};

	WebSocketTransport.enabled = function() {
	  debug('enabled');
	  return !!WebsocketDriver;
	};
	WebSocketTransport.transportName = 'websocket';

	// In theory, ws should require 1 round trip. But in chrome, this is
	// not very stable over SSL. Most likely a ws connection requires a
	// separate SSL connection, in which case 2 round trips are an
	// absolute minumum.
	WebSocketTransport.roundTrips = 2;

	module.exports = WebSocketTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(4)
	  , AjaxBasedTransport = __webpack_require__(35)
	  , XdrStreamingTransport = __webpack_require__(180)
	  , XhrReceiver = __webpack_require__(61)
	  , XDRObject = __webpack_require__(102)
	  ;

	function XdrPollingTransport(transUrl) {
	  if (!XDRObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
	}

	inherits(XdrPollingTransport, AjaxBasedTransport);

	XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
	XdrPollingTransport.transportName = 'xdr-polling';
	XdrPollingTransport.roundTrips = 2; // preflight, ajax

	module.exports = XdrPollingTransport;


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var inherits = __webpack_require__(4)
	  , AjaxBasedTransport = __webpack_require__(35)
	  , XhrReceiver = __webpack_require__(61)
	  , XHRCorsObject = __webpack_require__(62)
	  , XHRLocalObject = __webpack_require__(45)
	  , browser = __webpack_require__(46)
	  ;

	function XhrStreamingTransport(transUrl) {
	  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
	}

	inherits(XhrStreamingTransport, AjaxBasedTransport);

	XhrStreamingTransport.enabled = function(info) {
	  if (info.nullOrigin) {
	    return false;
	  }
	  // Opera doesn't support xhr-streaming #60
	  // But it might be able to #92
	  if (browser.isOpera()) {
	    return false;
	  }

	  return XHRCorsObject.enabled;
	};

	XhrStreamingTransport.transportName = 'xhr-streaming';
	XhrStreamingTransport.roundTrips = 2; // preflight, ajax

	// Safari gets confused when a streaming ajax request is started
	// before onload. This causes the load indicator to spin indefinetely.
	// Only require body when used in a browser
	XhrStreamingTransport.needBody = !!global.document;

	module.exports = XhrStreamingTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 403 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	if (global.crypto && global.crypto.getRandomValues) {
	  module.exports.randomBytes = function(length) {
	    var bytes = new Uint8Array(length);
	    global.crypto.getRandomValues(bytes);
	    return bytes;
	  };
	} else {
	  module.exports.randomBytes = function(length) {
	    var bytes = new Array(length);
	    for (var i = 0; i < length; i++) {
	      bytes[i] = Math.floor(Math.random() * 256);
	    }
	    return bytes;
	  };
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var JSON3 = __webpack_require__(18);

	// Some extra characters that Chrome gets wrong, and substitutes with
	// something else on the wire.
	var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
	  , extraLookup;

	// This may be quite slow, so let's delay until user actually uses bad
	// characters.
	var unrollLookup = function(escapable) {
	  var i;
	  var unrolled = {};
	  var c = [];
	  for (i = 0; i < 65536; i++) {
	    c.push( String.fromCharCode(i) );
	  }
	  escapable.lastIndex = 0;
	  c.join('').replace(escapable, function(a) {
	    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    return '';
	  });
	  escapable.lastIndex = 0;
	  return unrolled;
	};

	// Quote string, also taking care of unicode characters that browsers
	// often break. Especially, take care of unicode surrogates:
	// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
	module.exports = {
	  quote: function(string) {
	    var quoted = JSON3.stringify(string);

	    // In most cases this should be very fast and good enough.
	    extraEscapable.lastIndex = 0;
	    if (!extraEscapable.test(quoted)) {
	      return quoted;
	    }

	    if (!extraLookup) {
	      extraLookup = unrollLookup(extraEscapable);
	    }

	    return quoted.replace(extraEscapable, function(a) {
	      return extraLookup[a];
	    });
	  }
	};


/***/ },
/* 405 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var logObject = {};
	['log', 'debug', 'warn'].forEach(function (level) {
	  var levelExists = global.console && global.console[level] && global.console[level].apply;
	  logObject[level] = levelExists ? function () {
	    return global.console[level].apply(global.console, arguments);
	  } : (level === 'log' ? function () {} : logObject.log);
	});

	module.exports = logObject;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(7)('sockjs-client:utils:transport');
	}

	module.exports = function(availableTransports) {
	  return {
	    filterToEnabled: function(transportsWhitelist, info) {
	      var transports = {
	        main: []
	      , facade: []
	      };
	      if (!transportsWhitelist) {
	        transportsWhitelist = [];
	      } else if (typeof transportsWhitelist === 'string') {
	        transportsWhitelist = [transportsWhitelist];
	      }

	      availableTransports.forEach(function(trans) {
	        if (!trans) {
	          return;
	        }

	        if (trans.transportName === 'websocket' && info.websocket === false) {
	          debug('disabled from server', 'websocket');
	          return;
	        }

	        if (transportsWhitelist.length &&
	            transportsWhitelist.indexOf(trans.transportName) === -1) {
	          debug('not in whitelist', trans.transportName);
	          return;
	        }

	        if (trans.enabled(info)) {
	          debug('enabled', trans.transportName);
	          transports.main.push(trans);
	          if (trans.facadeTransport) {
	            transports.facade.push(trans.facadeTransport);
	          }
	        } else {
	          debug('disabled', trans.transportName);
	        }
	      });
	      return transports;
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ansiRegex = __webpack_require__(203)();

	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _css = __webpack_require__(63);

	var _css2 = _interopRequireDefault(_css);

	var _GlobalStyle = __webpack_require__(183);

	var _GlobalStyle2 = _interopRequireDefault(_GlobalStyle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var babelPluginFlowReactPropTypes_proptype_Interpolation = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Interpolation || __webpack_require__(2).PropTypes.any;

	var injectGlobal = function injectGlobal(strings) {
	  for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    interpolations[_key - 1] = arguments[_key];
	  }

	  var globalStyle = new _GlobalStyle2.default(_css2.default.apply(undefined, [strings].concat(interpolations)));
	  globalStyle.generateAndInject();
	};

	exports.default = injectGlobal;
	module.exports = exports['default'];

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _hash = __webpack_require__(133);

	var _hash2 = _interopRequireDefault(_hash);

	var _css = __webpack_require__(63);

	var _css2 = _interopRequireDefault(_css);

	var _GlobalStyle = __webpack_require__(183);

	var _GlobalStyle2 = _interopRequireDefault(_GlobalStyle);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var babelPluginFlowReactPropTypes_proptype_NameGenerator = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_NameGenerator || __webpack_require__(2).PropTypes.any;

	var babelPluginFlowReactPropTypes_proptype_Interpolation = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Interpolation || __webpack_require__(2).PropTypes.any;

	var replaceWhitespace = function replaceWhitespace(str) {
	  return str.replace(/\s|\\n/g, '');
	};

	exports.default = function (nameGenerator) {
	  return function (strings) {
	    for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      interpolations[_key - 1] = arguments[_key];
	    }

	    var rules = _css2.default.apply(undefined, [strings].concat(interpolations));
	    var hash = (0, _hash2.default)(replaceWhitespace(JSON.stringify(rules)));
	    var name = nameGenerator(hash);
	    var keyframes = new _GlobalStyle2.default(rules, '@keyframes ' + name);
	    keyframes.generateAndInject();
	    return name;
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _css = __webpack_require__(63);

	var _css2 = _interopRequireDefault(_css);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var babelPluginFlowReactPropTypes_proptype_Target = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Target || __webpack_require__(2).PropTypes.any;

	var babelPluginFlowReactPropTypes_proptype_Interpolation = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Interpolation || __webpack_require__(2).PropTypes.any;

	exports.default = function (styledComponent) {
	  var styled = function styled(tag) {
	    return function (strings) {
	      for (var _len = arguments.length, interpolations = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        interpolations[_key - 1] = arguments[_key];
	      }

	      return styledComponent(tag, _css2.default.apply(undefined, [strings].concat(interpolations)));
	    };
	  };

	  /* Shorthands for all valid HTML Elements */
	  // Thanks to ReactDOMFactories for this handy list!
	  styled.a = styled('a');
	  styled.abbr = styled('abbr');
	  styled.address = styled('address');
	  styled.area = styled('area');
	  styled.article = styled('article');
	  styled.aside = styled('aside');
	  styled.audio = styled('audio');
	  styled.b = styled('b');
	  styled.base = styled('base');
	  styled.bdi = styled('bdi');
	  styled.bdo = styled('bdo');
	  styled.big = styled('big');
	  styled.blockquote = styled('blockquote');
	  styled.body = styled('body');
	  styled.br = styled('br');
	  styled.button = styled('button');
	  styled.canvas = styled('canvas');
	  styled.caption = styled('caption');
	  styled.cite = styled('cite');
	  styled.code = styled('code');
	  styled.col = styled('col');
	  styled.colgroup = styled('colgroup');
	  styled.data = styled('data');
	  styled.datalist = styled('datalist');
	  styled.dd = styled('dd');
	  styled.del = styled('del');
	  styled.details = styled('details');
	  styled.dfn = styled('dfn');
	  styled.dialog = styled('dialog');
	  styled.div = styled('div');
	  styled.dl = styled('dl');
	  styled.dt = styled('dt');
	  styled.em = styled('em');
	  styled.embed = styled('embed');
	  styled.fieldset = styled('fieldset');
	  styled.figcaption = styled('figcaption');
	  styled.figure = styled('figure');
	  styled.footer = styled('footer');
	  styled.form = styled('form');
	  styled.h1 = styled('h1');
	  styled.h2 = styled('h2');
	  styled.h3 = styled('h3');
	  styled.h4 = styled('h4');
	  styled.h5 = styled('h5');
	  styled.h6 = styled('h6');
	  styled.head = styled('head');
	  styled.header = styled('header');
	  styled.hgroup = styled('hgroup');
	  styled.hr = styled('hr');
	  styled.html = styled('html');
	  styled.i = styled('i');
	  styled.iframe = styled('iframe');
	  styled.img = styled('img');
	  styled.input = styled('input');
	  styled.ins = styled('ins');
	  styled.kbd = styled('kbd');
	  styled.keygen = styled('keygen');
	  styled.label = styled('label');
	  styled.legend = styled('legend');
	  styled.li = styled('li');
	  styled.link = styled('link');
	  styled.main = styled('main');
	  styled.map = styled('map');
	  styled.mark = styled('mark');
	  styled.menu = styled('menu');
	  styled.menuitem = styled('menuitem');
	  styled.meta = styled('meta');
	  styled.meter = styled('meter');
	  styled.nav = styled('nav');
	  styled.noscript = styled('noscript');
	  styled.object = styled('object');
	  styled.ol = styled('ol');
	  styled.optgroup = styled('optgroup');
	  styled.option = styled('option');
	  styled.output = styled('output');
	  styled.p = styled('p');
	  styled.param = styled('param');
	  styled.picture = styled('picture');
	  styled.pre = styled('pre');
	  styled.progress = styled('progress');
	  styled.q = styled('q');
	  styled.rp = styled('rp');
	  styled.rt = styled('rt');
	  styled.ruby = styled('ruby');
	  styled.s = styled('s');
	  styled.samp = styled('samp');
	  styled.script = styled('script');
	  styled.section = styled('section');
	  styled.select = styled('select');
	  styled.small = styled('small');
	  styled.source = styled('source');
	  styled.span = styled('span');
	  styled.strong = styled('strong');
	  styled.style = styled('style');
	  styled.sub = styled('sub');
	  styled.summary = styled('summary');
	  styled.sup = styled('sup');
	  styled.table = styled('table');
	  styled.tbody = styled('tbody');
	  styled.td = styled('td');
	  styled.textarea = styled('textarea');
	  styled.tfoot = styled('tfoot');
	  styled.th = styled('th');
	  styled.thead = styled('thead');
	  styled.time = styled('time');
	  styled.title = styled('title');
	  styled.tr = styled('tr');
	  styled.track = styled('track');
	  styled.u = styled('u');
	  styled.ul = styled('ul');
	  styled.var = styled('var');
	  styled.video = styled('video');
	  styled.wbr = styled('wbr');

	  // SVG
	  styled.circle = styled('circle');
	  styled.clipPath = styled('clipPath');
	  styled.defs = styled('defs');
	  styled.ellipse = styled('ellipse');
	  styled.g = styled('g');
	  styled.image = styled('image');
	  styled.line = styled('line');
	  styled.linearGradient = styled('linearGradient');
	  styled.mask = styled('mask');
	  styled.path = styled('path');
	  styled.pattern = styled('pattern');
	  styled.polygon = styled('polygon');
	  styled.polyline = styled('polyline');
	  styled.radialGradient = styled('radialGradient');
	  styled.rect = styled('rect');
	  styled.stop = styled('stop');
	  styled.svg = styled('svg');
	  styled.text = styled('text');
	  styled.tspan = styled('tspan');

	  return styled;
	};

	module.exports = exports['default'];

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(2);

	var _ThemeProvider = __webpack_require__(64);

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var AbstractStyledComponent = function (_Component) {
	  _inherits(AbstractStyledComponent, _Component);

	  function AbstractStyledComponent() {
	    _classCallCheck(this, AbstractStyledComponent);

	    return _possibleConstructorReturn(this, (AbstractStyledComponent.__proto__ || Object.getPrototypeOf(AbstractStyledComponent)).apply(this, arguments));
	  }

	  return AbstractStyledComponent;
	}(_react.Component);

	exports.default = AbstractStyledComponent;


	AbstractStyledComponent.contextTypes = _defineProperty({}, _ThemeProvider.CHANNEL, _react.PropTypes.func);
	module.exports = exports['default'];

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _hash = __webpack_require__(133);

	var _hash2 = _interopRequireDefault(_hash);

	var _flatten = __webpack_require__(104);

	var _flatten2 = _interopRequireDefault(_flatten);

	var _parse = __webpack_require__(187);

	var _parse2 = _interopRequireDefault(_parse);

	var _postcssNested = __webpack_require__(186);

	var _postcssNested2 = _interopRequireDefault(_postcssNested);

	var _autoprefix = __webpack_require__(414);

	var _autoprefix2 = _interopRequireDefault(_autoprefix);

	var _StyleSheet = __webpack_require__(184);

	var _StyleSheet2 = _interopRequireDefault(_StyleSheet);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var babelPluginFlowReactPropTypes_proptype_NameGenerator = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_NameGenerator || __webpack_require__(2).PropTypes.any;

	var babelPluginFlowReactPropTypes_proptype_RuleSet = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_RuleSet || __webpack_require__(2).PropTypes.any;

	/*
	 ComponentStyle is all the CSS-specific stuff, not
	 the React-specific stuff.
	 */
	exports.default = function (nameGenerator) {
	  var inserted = {};

	  var ComponentStyle = function () {
	    function ComponentStyle(rules) {
	      _classCallCheck(this, ComponentStyle);

	      this.rules = rules;
	      if (!_StyleSheet2.default.injected) _StyleSheet2.default.inject();
	      this.insertedRule = _StyleSheet2.default.insert('');
	    }

	    /*
	     * Flattens a rule set into valid CSS
	     * Hashes it, wraps the whole chunk in a ._hashName {}
	     * Parses that with PostCSS then runs PostCSS-Nested on it
	     * Returns the hash to be injected on render()
	     * */


	    _createClass(ComponentStyle, [{
	      key: 'generateAndInjectStyles',
	      value: function generateAndInjectStyles(executionContext) {
	        var flatCSS = (0, _flatten2.default)(this.rules, executionContext).join('').replace(/^\s*\/\/.*$/gm, ''); // replace JS comments
	        var hash = (0, _hash2.default)(flatCSS);
	        if (!inserted[hash]) {
	          var selector = nameGenerator(hash);
	          inserted[hash] = selector;
	          var root = (0, _parse2.default)('.' + selector + ' { ' + flatCSS + ' }');
	          (0, _postcssNested2.default)(root);
	          (0, _autoprefix2.default)(root);
	          this.insertedRule.appendRule(root.toResult().css);
	        }
	        return inserted[hash];
	      }
	    }]);

	    return ComponentStyle;
	  }();

	  return ComponentStyle;
	};

	module.exports = exports['default'];

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(2);

	var _validAttr = __webpack_require__(418);

	var _validAttr2 = _interopRequireDefault(_validAttr);

	var _isTag = __webpack_require__(417);

	var _isTag2 = _interopRequireDefault(_isTag);

	var _AbstractStyledComponent = __webpack_require__(411);

	var _AbstractStyledComponent2 = _interopRequireDefault(_AbstractStyledComponent);

	var _ThemeProvider = __webpack_require__(64);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var babelPluginFlowReactPropTypes_proptype_Theme = __webpack_require__(64).babelPluginFlowReactPropTypes_proptype_Theme || __webpack_require__(2).PropTypes.any;

	var babelPluginFlowReactPropTypes_proptype_Target = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Target || __webpack_require__(2).PropTypes.any;

	var babelPluginFlowReactPropTypes_proptype_RuleSet = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_RuleSet || __webpack_require__(2).PropTypes.any;

	exports.default = function (ComponentStyle) {
	  // eslint-disable-next-line no-undef
	  var createStyledComponent = function createStyledComponent(target, rules, parent) {
	    /* Handle styled(OtherStyledComponent) differently */
	    var isStyledComponent = _AbstractStyledComponent2.default.isPrototypeOf(target);
	    if (!(0, _isTag2.default)(target) && isStyledComponent) {
	      return createStyledComponent(target.target, target.rules.concat(rules), target);
	    }

	    var componentStyle = new ComponentStyle(rules);
	    var ParentComponent = parent || _AbstractStyledComponent2.default;

	    var StyledComponent = function (_ParentComponent) {
	      _inherits(StyledComponent, _ParentComponent);

	      function StyledComponent() {
	        _classCallCheck(this, StyledComponent);

	        var _this = _possibleConstructorReturn(this, (StyledComponent.__proto__ || Object.getPrototypeOf(StyledComponent)).call(this));

	        _this.state = {
	          theme: null,
	          generatedClassName: ''
	        };
	        return _this;
	      }

	      _createClass(StyledComponent, [{
	        key: 'generateAndInjectStyles',
	        value: function generateAndInjectStyles(theme, props) {
	          var executionContext = _extends({}, props, { theme: theme });
	          return componentStyle.generateAndInjectStyles(executionContext);
	        }
	      }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	          var _this2 = this;

	          // If there is a theme in the context, subscribe to the event emitter. This
	          // is necessary due to pure components blocking context updates, this circumvents
	          // that by updating when an event is emitted
	          if (this.context[_ThemeProvider.CHANNEL]) {
	            var subscribe = this.context[_ThemeProvider.CHANNEL];
	            this.unsubscribe = subscribe(function (theme) {
	              // This will be called once immediately
	              var generatedClassName = _this2.generateAndInjectStyles(theme, _this2.props);
	              _this2.setState({ theme: theme, generatedClassName: generatedClassName });
	            });
	          } else {
	            var theme = this.props.theme || {};
	            var generatedClassName = this.generateAndInjectStyles(theme, this.props);
	            this.setState({ theme: theme, generatedClassName: generatedClassName });
	          }
	        }
	      }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	          var theme = nextProps.theme || this.state.theme;

	          var generatedClassName = this.generateAndInjectStyles(theme, nextProps);
	          this.setState({ theme: theme, generatedClassName: generatedClassName });
	        }
	      }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	          if (this.unsubscribe) {
	            this.unsubscribe();
	          }
	        }
	      }, {
	        key: 'render',
	        value: function render() {
	          var _this3 = this;

	          var _props = this.props,
	              className = _props.className,
	              children = _props.children,
	              innerRef = _props.innerRef;
	          var generatedClassName = this.state.generatedClassName;


	          var propsForElement = {};
	          /* Don't pass through non HTML tags through to HTML elements */
	          Object.keys(this.props).filter(function (propName) {
	            return !(0, _isTag2.default)(target) || (0, _validAttr2.default)(propName);
	          }).forEach(function (propName) {
	            propsForElement[propName] = _this3.props[propName];
	          });
	          propsForElement.className = [className, generatedClassName].filter(function (x) {
	            return x;
	          }).join(' ');
	          if (innerRef) {
	            propsForElement.ref = innerRef;
	          }

	          return (0, _react.createElement)(target, propsForElement, children);
	        }
	      }]);

	      return StyledComponent;
	    }(ParentComponent);

	    StyledComponent.target = target;
	    StyledComponent.rules = rules;

	    StyledComponent.displayName = (0, _isTag2.default)(target) ? 'styled.' + target : 'Styled(' + target.displayName + ')';

	    return StyledComponent;
	  };

	  return createStyledComponent;
	};

	module.exports = exports['default'];

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _camelizeStyleName = __webpack_require__(427);

	var _camelizeStyleName2 = _interopRequireDefault(_camelizeStyleName);

	var _hyphenateStyleName = __webpack_require__(195);

	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

	var _static = __webpack_require__(297);

	var _static2 = _interopRequireDefault(_static);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	// eslint-disable-next-line


	var babelPluginFlowReactPropTypes_proptype_Container = __webpack_require__(65).babelPluginFlowReactPropTypes_proptype_Container || __webpack_require__(2).PropTypes.any;

	exports.default = function (root) {
	  root.walkDecls(function (decl) {
	    /* No point even checking custom props */
	    if (/^--/.test(decl.prop)) return;

	    var objStyle = _defineProperty({}, (0, _camelizeStyleName2.default)(decl.prop), decl.value);
	    var prefixed = (0, _static2.default)(objStyle);
	    Object.keys(prefixed).reverse().forEach(function (newProp) {
	      var newVals = prefixed[newProp];
	      var newValArray = Array.isArray(newVals) ? newVals : [newVals];
	      newValArray.forEach(function (newVal) {
	        decl.cloneBefore({
	          prop: (0, _hyphenateStyleName2.default)(newProp),
	          value: newVal
	        });
	      });
	    });
	    decl.remove();
	  });
	};

	module.exports = exports['default'];

/***/ },
/* 415 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');

	/* Some high number, usually 9-digit base-10. Map it to base-😎 */
	var generateAlphabeticName = function generateAlphabeticName(code) {
	  var lastDigit = chars[code % chars.length];
	  return code > chars.length ? '' + generateAlphabeticName(Math.floor(code / chars.length)) + lastDigit : lastDigit;
	};

	exports.default = generateAlphabeticName;
	module.exports = exports['default'];

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var babelPluginFlowReactPropTypes_proptype_Interpolation = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Interpolation || __webpack_require__(2).PropTypes.any;

	exports.default = function (strings, interpolations) {
	  return interpolations.reduce(function (array, interp, i) {
	    return array.concat(interp, strings[i + 1]);
	  }, [strings[0]]);
	};

	module.exports = exports['default'];

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = isTag;

	var babelPluginFlowReactPropTypes_proptype_Target = __webpack_require__(11).babelPluginFlowReactPropTypes_proptype_Target || __webpack_require__(2).PropTypes.any;

	function isTag(target) /* : %checks */{
	  return typeof target === 'string';
	}
	module.exports = exports['default'];

/***/ },
/* 418 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	/* Trying to avoid the unknown-prop errors on styled components
	 by filtering by React's attribute whitelist.
	 */

	/* Logic copied from ReactDOMUnknownPropertyHook */
	var reactProps = {
	  children: true,
	  dangerouslySetInnerHTML: true,
	  key: true,
	  ref: true,
	  autoFocus: true,
	  defaultValue: true,
	  valueLink: true,
	  defaultChecked: true,
	  checkedLink: true,
	  innerHTML: true,
	  suppressContentEditableWarning: true,
	  onFocusIn: true,
	  onFocusOut: true,
	  className: true,

	  /* List copied from https://facebook.github.io/react/docs/events.html */
	  onCopy: true,
	  onCut: true,
	  onPaste: true,
	  onCompositionEnd: true,
	  onCompositionStart: true,
	  onCompositionUpdate: true,
	  onKeyDown: true,
	  onKeyPress: true,
	  onKeyUp: true,
	  onFocus: true,
	  onBlur: true,
	  onChange: true,
	  onInput: true,
	  onSubmit: true,
	  onClick: true,
	  onContextMenu: true,
	  onDoubleClick: true,
	  onDrag: true,
	  onDragEnd: true,
	  onDragEnter: true,
	  onDragExit: true,
	  onDragLeave: true,
	  onDragOver: true,
	  onDragStart: true,
	  onDrop: true,
	  onMouseDown: true,
	  onMouseEnter: true,
	  onMouseLeave: true,
	  onMouseMove: true,
	  onMouseOut: true,
	  onMouseOver: true,
	  onMouseUp: true,
	  onSelect: true,
	  onTouchCancel: true,
	  onTouchEnd: true,
	  onTouchMove: true,
	  onTouchStart: true,
	  onScroll: true,
	  onWheel: true,
	  onAbort: true,
	  onCanPlay: true,
	  onCanPlayThrough: true,
	  onDurationChange: true,
	  onEmptied: true,
	  onEncrypted: true,
	  onEnded: true,
	  onError: true,
	  onLoadedData: true,
	  onLoadedMetadata: true,
	  onLoadStart: true,
	  onPause: true,
	  onPlay: true,
	  onPlaying: true,
	  onProgress: true,
	  onRateChange: true,
	  onSeeked: true,
	  onSeeking: true,
	  onStalled: true,
	  onSuspend: true,
	  onTimeUpdate: true,
	  onVolumeChange: true,
	  onWaiting: true,
	  onLoad: true,
	  onAnimationStart: true,
	  onAnimationEnd: true,
	  onAnimationIteration: true,
	  onTransitionEnd: true,

	  onCopyCapture: true,
	  onCutCapture: true,
	  onPasteCapture: true,
	  onCompositionEndCapture: true,
	  onCompositionStartCapture: true,
	  onCompositionUpdateCapture: true,
	  onKeyDownCapture: true,
	  onKeyPressCapture: true,
	  onKeyUpCapture: true,
	  onFocusCapture: true,
	  onBlurCapture: true,
	  onChangeCapture: true,
	  onInputCapture: true,
	  onSubmitCapture: true,
	  onClickCapture: true,
	  onContextMenuCapture: true,
	  onDoubleClickCapture: true,
	  onDragCapture: true,
	  onDragEndCapture: true,
	  onDragEnterCapture: true,
	  onDragExitCapture: true,
	  onDragLeaveCapture: true,
	  onDragOverCapture: true,
	  onDragStartCapture: true,
	  onDropCapture: true,
	  onMouseDownCapture: true,
	  onMouseEnterCapture: true,
	  onMouseLeaveCapture: true,
	  onMouseMoveCapture: true,
	  onMouseOutCapture: true,
	  onMouseOverCapture: true,
	  onMouseUpCapture: true,
	  onSelectCapture: true,
	  onTouchCancelCapture: true,
	  onTouchEndCapture: true,
	  onTouchMoveCapture: true,
	  onTouchStartCapture: true,
	  onScrollCapture: true,
	  onWheelCapture: true,
	  onAbortCapture: true,
	  onCanPlayCapture: true,
	  onCanPlayThroughCapture: true,
	  onDurationChangeCapture: true,
	  onEmptiedCapture: true,
	  onEncryptedCapture: true,
	  onEndedCapture: true,
	  onErrorCapture: true,
	  onLoadedDataCapture: true,
	  onLoadedMetadataCapture: true,
	  onLoadStartCapture: true,
	  onPauseCapture: true,
	  onPlayCapture: true,
	  onPlayingCapture: true,
	  onProgressCapture: true,
	  onRateChangeCapture: true,
	  onSeekedCapture: true,
	  onSeekingCapture: true,
	  onStalledCapture: true,
	  onSuspendCapture: true,
	  onTimeUpdateCapture: true,
	  onVolumeChangeCapture: true,
	  onWaitingCapture: true,
	  onLoadCapture: true,
	  onAnimationStartCapture: true,
	  onAnimationEndCapture: true,
	  onAnimationIterationCapture: true,
	  onTransitionEndCapture: true
	};

	/* From HTMLDOMPropertyConfig */
	var htmlProps = {
	  /**
	   * Standard Properties
	   */
	  accept: true,
	  acceptCharset: true,
	  accessKey: true,
	  action: true,
	  allowFullScreen: true,
	  allowTransparency: true,
	  alt: true,
	  // specifies target context for links with `preload` type
	  as: true,
	  async: true,
	  autoComplete: true,
	  // autoFocus is polyfilled/normalized by AutoFocusUtils
	  // autoFocus: true,
	  autoPlay: true,
	  capture: true,
	  cellPadding: true,
	  cellSpacing: true,
	  charSet: true,
	  challenge: true,
	  checked: true,
	  cite: true,
	  classID: true,
	  className: true,
	  cols: true,
	  colSpan: true,
	  content: true,
	  contentEditable: true,
	  contextMenu: true,
	  controls: true,
	  coords: true,
	  crossOrigin: true,
	  data: true, // For `<object />` acts as `src`.
	  dateTime: true,
	  default: true,
	  defer: true,
	  dir: true,
	  disabled: true,
	  download: true,
	  draggable: true,
	  encType: true,
	  form: true,
	  formAction: true,
	  formEncType: true,
	  formMethod: true,
	  formNoValidate: true,
	  formTarget: true,
	  frameBorder: true,
	  headers: true,
	  height: true,
	  hidden: true,
	  high: true,
	  href: true,
	  hrefLang: true,
	  htmlFor: true,
	  httpEquiv: true,
	  icon: true,
	  id: true,
	  inputMode: true,
	  integrity: true,
	  is: true,
	  keyParams: true,
	  keyType: true,
	  kind: true,
	  label: true,
	  lang: true,
	  list: true,
	  loop: true,
	  low: true,
	  manifest: true,
	  marginHeight: true,
	  marginWidth: true,
	  max: true,
	  maxLength: true,
	  media: true,
	  mediaGroup: true,
	  method: true,
	  min: true,
	  minLength: true,
	  // Caution; `option.selected` is not updated if `select.multiple` is
	  // disabled with `removeAttribute`.
	  multiple: true,
	  muted: true,
	  name: true,
	  nonce: true,
	  noValidate: true,
	  open: true,
	  optimum: true,
	  pattern: true,
	  placeholder: true,
	  playsInline: true,
	  poster: true,
	  preload: true,
	  profile: true,
	  radioGroup: true,
	  readOnly: true,
	  referrerPolicy: true,
	  rel: true,
	  required: true,
	  reversed: true,
	  role: true,
	  rows: true,
	  rowSpan: true,
	  sandbox: true,
	  scope: true,
	  scoped: true,
	  scrolling: true,
	  seamless: true,
	  selected: true,
	  shape: true,
	  size: true,
	  sizes: true,
	  span: true,
	  spellCheck: true,
	  src: true,
	  srcDoc: true,
	  srcLang: true,
	  srcSet: true,
	  start: true,
	  step: true,
	  style: true,
	  summary: true,
	  tabIndex: true,
	  target: true,
	  title: true,
	  // Setting .type throws on non-<input> tags
	  type: true,
	  useMap: true,
	  value: true,
	  width: true,
	  wmode: true,
	  wrap: true,

	  /**
	   * RDFa Properties
	   */
	  about: true,
	  datatype: true,
	  inlist: true,
	  prefix: true,
	  // property is also supported for OpenGraph in meta tags.
	  property: true,
	  resource: true,
	  typeof: true,
	  vocab: true,

	  /**
	   * Non-standard Properties
	   */
	  // autoCapitalize and autoCorrect are supported in Mobile Safari for
	  // keyboard hints.
	  autoCapitalize: true,
	  autoCorrect: true,
	  // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	  autoSave: true,
	  // color is for Safari mask-icon link
	  color: true,
	  // itemProp, itemScope, itemType are for
	  // Microdata support. See http://schema.org/docs/gs.html
	  itemProp: true,
	  itemScope: true,
	  itemType: true,
	  // itemID and itemRef are for Microdata support as well but
	  // only specified in the WHATWG spec document. See
	  // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	  itemID: true,
	  itemRef: true,
	  // results show looking glass icon and recent searches on input
	  // search fields in WebKit/Blink
	  results: true,
	  // IE-only attribute that specifies security restrictions on an iframe
	  // as an alternative to the sandbox attribute on IE<10
	  security: true,
	  // IE-only attribute that controls focus behavior
	  unselectable: 0
	};

	var svgProps = {
	  accentHeight: true,
	  accumulate: true,
	  additive: true,
	  alignmentBaseline: true,
	  allowReorder: true,
	  alphabetic: true,
	  amplitude: true,
	  arabicForm: true,
	  ascent: true,
	  attributeName: true,
	  attributeType: true,
	  autoReverse: true,
	  azimuth: true,
	  baseFrequency: true,
	  baseProfile: true,
	  baselineShift: true,
	  bbox: true,
	  begin: true,
	  bias: true,
	  by: true,
	  calcMode: true,
	  capHeight: true,
	  clip: true,
	  clipPath: true,
	  clipRule: true,
	  clipPathUnits: true,
	  colorInterpolation: true,
	  colorInterpolationFilters: true,
	  colorProfile: true,
	  colorRendering: true,
	  contentScriptType: true,
	  contentStyleType: true,
	  cursor: true,
	  cx: true,
	  cy: true,
	  d: true,
	  decelerate: true,
	  descent: true,
	  diffuseConstant: true,
	  direction: true,
	  display: true,
	  divisor: true,
	  dominantBaseline: true,
	  dur: true,
	  dx: true,
	  dy: true,
	  edgeMode: true,
	  elevation: true,
	  enableBackground: true,
	  end: true,
	  exponent: true,
	  externalResourcesRequired: true,
	  fill: true,
	  fillOpacity: true,
	  fillRule: true,
	  filter: true,
	  filterRes: true,
	  filterUnits: true,
	  floodColor: true,
	  floodOpacity: true,
	  focusable: true,
	  fontFamily: true,
	  fontSize: true,
	  fontSizeAdjust: true,
	  fontStretch: true,
	  fontStyle: true,
	  fontVariant: true,
	  fontWeight: true,
	  format: true,
	  from: true,
	  fx: true,
	  fy: true,
	  g1: true,
	  g2: true,
	  glyphName: true,
	  glyphOrientationHorizontal: true,
	  glyphOrientationVertical: true,
	  glyphRef: true,
	  gradientTransform: true,
	  gradientUnits: true,
	  hanging: true,
	  horizAdvX: true,
	  horizOriginX: true,
	  ideographic: true,
	  imageRendering: true,
	  in: true,
	  in2: true,
	  intercept: true,
	  k: true,
	  k1: true,
	  k2: true,
	  k3: true,
	  k4: true,
	  kernelMatrix: true,
	  kernelUnitLength: true,
	  kerning: true,
	  keyPoints: true,
	  keySplines: true,
	  keyTimes: true,
	  lengthAdjust: true,
	  letterSpacing: true,
	  lightingColor: true,
	  limitingConeAngle: true,
	  local: true,
	  markerEnd: true,
	  markerMid: true,
	  markerStart: true,
	  markerHeight: true,
	  markerUnits: true,
	  markerWidth: true,
	  mask: true,
	  maskContentUnits: true,
	  maskUnits: true,
	  mathematical: true,
	  mode: true,
	  numOctaves: true,
	  offset: true,
	  opacity: true,
	  operator: true,
	  order: true,
	  orient: true,
	  orientation: true,
	  origin: true,
	  overflow: true,
	  overlinePosition: true,
	  overlineThickness: true,
	  paintOrder: true,
	  panose1: true,
	  pathLength: true,
	  patternContentUnits: true,
	  patternTransform: true,
	  patternUnits: true,
	  pointerEvents: true,
	  points: true,
	  pointsAtX: true,
	  pointsAtY: true,
	  pointsAtZ: true,
	  preserveAlpha: true,
	  preserveAspectRatio: true,
	  primitiveUnits: true,
	  r: true,
	  radius: true,
	  refX: true,
	  refY: true,
	  renderingIntent: true,
	  repeatCount: true,
	  repeatDur: true,
	  requiredExtensions: true,
	  requiredFeatures: true,
	  restart: true,
	  result: true,
	  rotate: true,
	  rx: true,
	  ry: true,
	  scale: true,
	  seed: true,
	  shapeRendering: true,
	  slope: true,
	  spacing: true,
	  specularConstant: true,
	  specularExponent: true,
	  speed: true,
	  spreadMethod: true,
	  startOffset: true,
	  stdDeviation: true,
	  stemh: true,
	  stemv: true,
	  stitchTiles: true,
	  stopColor: true,
	  stopOpacity: true,
	  strikethroughPosition: true,
	  strikethroughThickness: true,
	  string: true,
	  stroke: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeLinecap: true,
	  strokeLinejoin: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true,
	  surfaceScale: true,
	  systemLanguage: true,
	  tableValues: true,
	  targetX: true,
	  targetY: true,
	  textAnchor: true,
	  textDecoration: true,
	  textRendering: true,
	  textLength: true,
	  to: true,
	  transform: true,
	  u1: true,
	  u2: true,
	  underlinePosition: true,
	  underlineThickness: true,
	  unicode: true,
	  unicodeBidi: true,
	  unicodeRange: true,
	  unitsPerEm: true,
	  vAlphabetic: true,
	  vHanging: true,
	  vIdeographic: true,
	  vMathematical: true,
	  values: true,
	  vectorEffect: true,
	  version: true,
	  vertAdvY: true,
	  vertOriginX: true,
	  vertOriginY: true,
	  viewBox: true,
	  viewTarget: true,
	  visibility: true,
	  widths: true,
	  wordSpacing: true,
	  writingMode: true,
	  x: true,
	  xHeight: true,
	  x1: true,
	  x2: true,
	  xChannelSelector: true,
	  xlinkActuate: true,
	  xlinkArcrole: true,
	  xlinkHref: true,
	  xlinkRole: true,
	  xlinkShow: true,
	  xlinkTitle: true,
	  xlinkType: true,
	  xmlBase: true,
	  xmlns: true,
	  xmlnsXlink: true,
	  xmlLang: true,
	  xmlSpace: true,
	  y: true,
	  y1: true,
	  y2: true,
	  yChannelSelector: true,
	  z: true,
	  zoomAndPan: true
	};

	/* From DOMProperty */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
	var isCustomAttribute = RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$'));

	var hasOwnProperty = {}.hasOwnProperty;

	exports.default = function (name) {
	  return hasOwnProperty.call(htmlProps, name) || hasOwnProperty.call(svgProps, name) || isCustomAttribute(name.toLowerCase()) || hasOwnProperty.call(reactProps, name);
	};

	module.exports = exports['default'];

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/*

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance
	- 'polyfills' on server side


	// usage

	import StyleSheet from 'glamor/lib/sheet'
	let styleSheet = new StyleSheet()

	styleSheet.inject()
	- 'injects' the stylesheet into the page (or into memory if on server)

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents


	*/

	function last(arr) {
	  return arr[arr.length - 1];
	}

	function sheetForTag(tag) {
	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      return document.styleSheets[i];
	    }
	  }
	}

	var isBrowser = typeof document !== 'undefined';
	var isDev = function (x) {
	  return x === 'development' || !x;
	}(process.env.NODE_ENV);
	var isTest = process.env.NODE_ENV === 'test';

	var oldIE = function () {
	  if (isBrowser) {
	    var div = document.createElement('div');
	    div.innerHTML = '<!--[if lt IE 10]><i></i><![endif]-->';
	    return div.getElementsByTagName('i').length === 1;
	  }
	}();

	function makeStyleTag() {
	  var tag = document.createElement('style');
	  tag.type = 'text/css';
	  tag.appendChild(document.createTextNode(''));
	  (document.head || document.getElementsByTagName('head')[0]).appendChild(tag);
	  return tag;
	}

	var StyleSheet = exports.StyleSheet = function () {
	  function StyleSheet() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref$speedy = _ref.speedy,
	        speedy = _ref$speedy === undefined ? !isDev && !isTest : _ref$speedy,
	        _ref$maxLength = _ref.maxLength,
	        maxLength = _ref$maxLength === undefined ? isBrowser && oldIE ? 4000 : 65000 : _ref$maxLength;

	    _classCallCheck(this, StyleSheet);

	    this.isSpeedy = speedy; // the big drawback here is that the css won't be editable in devtools
	    this.sheet = undefined;
	    this.tags = [];
	    this.maxLength = maxLength;
	    this.ctr = 0;
	  }

	  _createClass(StyleSheet, [{
	    key: 'inject',
	    value: function inject() {
	      var _this = this;

	      if (this.injected) {
	        throw new Error('already injected stylesheet!');
	      }
	      if (isBrowser) {
	        // this section is just weird alchemy I found online off many sources
	        this.tags[0] = makeStyleTag();
	        // this weirdness brought to you by firefox
	        this.sheet = sheetForTag(this.tags[0]);
	      } else {
	        // server side 'polyfill'. just enough behavior to be useful.
	        this.sheet = {
	          cssRules: [],
	          insertRule: function insertRule(rule) {
	            // enough 'spec compliance' to be able to extract the rules later
	            // in other words, just the cssText field
	            var serverRule = { cssText: rule };
	            _this.sheet.cssRules.push(serverRule);
	            return { serverRule: serverRule, appendRule: function appendRule(newCss) {
	                return serverRule.cssText += newCss;
	              } };
	          }
	        };
	      }
	      this.injected = true;
	    }
	  }, {
	    key: 'speedy',
	    value: function speedy(bool) {
	      if (this.ctr !== 0) {
	        throw new Error('cannot change speedy mode after inserting any rule to sheet. Either call speedy(' + bool + ') earlier in your app, or call flush() before speedy(' + bool + ')');
	      }
	      this.isSpeedy = !!bool;
	    }
	  }, {
	    key: '_insert',
	    value: function _insert(rule) {
	      // this weirdness for perf, and chrome's weird bug
	      // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
	      try {
	        this.sheet.insertRule(rule, this.sheet.cssRules.length); // todo - correct index here
	      } catch (e) {
	        if (isDev) {
	          // might need beter dx for this
	          console.warn('whoops, illegal rule inserted', rule); //eslint-disable-line no-console
	        }
	      }
	    }
	  }, {
	    key: 'insert',
	    value: function insert(rule) {
	      var _this2 = this;

	      var insertedRule = void 0;

	      if (isBrowser) {
	        // this is the ultrafast version, works across browsers
	        if (this.isSpeedy && this.sheet.insertRule) {
	          this._insert(rule);
	        } else {
	          (function () {
	            var textNode = document.createTextNode(rule);
	            last(_this2.tags).appendChild(textNode);
	            insertedRule = { textNode: textNode, appendRule: function appendRule(newCss) {
	                return textNode.appendData(newCss);
	              } };

	            if (!_this2.isSpeedy) {
	              // sighhh
	              _this2.sheet = sheetForTag(last(_this2.tags));
	            }
	          })();
	        }
	      } else {
	        // server side is pretty simple
	        insertedRule = this.sheet.insertRule(rule);
	      }

	      this.ctr++;
	      if (isBrowser && this.ctr % this.maxLength === 0) {
	        this.tags.push(makeStyleTag());
	        this.sheet = sheetForTag(last(this.tags));
	      }
	      return insertedRule;
	    }
	  }, {
	    key: 'flush',
	    value: function flush() {
	      if (isBrowser) {
	        this.tags.forEach(function (tag) {
	          return tag.parentNode.removeChild(tag);
	        });
	        this.tags = [];
	        this.sheet = null;
	        this.ctr = 0;
	        // todo - look for remnants in document.styleSheets
	      } else {
	        // simpler on server
	        this.sheet.cssRules = [];
	      }
	      this.injected = false;
	    }
	  }, {
	    key: 'rules',
	    value: function rules() {
	      if (!isBrowser) {
	        return this.sheet.cssRules;
	      }
	      var arr = [];
	      this.tags.forEach(function (tag) {
	        return arr.splice.apply(arr, [arr.length, 0].concat(_toConsumableArray(Array.from(sheetForTag(tag).cssRules))));
	      });
	      return arr;
	    }
	  }]);

	  return StyleSheet;
	}();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _tokenize2 = __webpack_require__(111);

	var _tokenize3 = _interopRequireDefault(_tokenize2);

	var _comment = __webpack_require__(106);

	var _comment2 = _interopRequireDefault(_comment);

	var _parser = __webpack_require__(192);

	var _parser2 = _interopRequireDefault(_parser);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var SafeParser = function (_Parser) {
	    _inherits(SafeParser, _Parser);

	    function SafeParser() {
	        _classCallCheck(this, SafeParser);

	        return _possibleConstructorReturn(this, (SafeParser.__proto__ || Object.getPrototypeOf(SafeParser)).apply(this, arguments));
	    }

	    _createClass(SafeParser, [{
	        key: 'tokenize',
	        value: function tokenize() {
	            this.tokens = (0, _tokenize3.default)(this.input, { ignoreErrors: true });
	        }
	    }, {
	        key: 'comment',
	        value: function comment(token) {
	            var node = new _comment2.default();
	            this.init(node, token[2], token[3]);
	            node.source.end = { line: token[4], column: token[5] };

	            var text = token[1].slice(2);
	            if (text.slice(-2) === '*/') text = text.slice(0, -2);

	            if (/^\s*$/.test(text)) {
	                node.text = '';
	                node.raws.left = text;
	                node.raws.right = '';
	            } else {
	                var match = text.match(/^(\s*)([^]*[^\s])(\s*)$/);
	                node.text = match[2];
	                node.raws.left = match[1];
	                node.raws.right = match[3];
	            }
	        }
	    }, {
	        key: 'unclosedBracket',
	        value: function unclosedBracket() {}
	    }, {
	        key: 'unknownWord',
	        value: function unknownWord(start) {
	            var buffer = this.tokens.slice(start, this.pos + 1);
	            this.spaces += buffer.map(function (i) {
	                return i[1];
	            }).join('');
	        }
	    }, {
	        key: 'unexpectedClose',
	        value: function unexpectedClose() {
	            this.current.raws.after += '}';
	        }
	    }, {
	        key: 'doubleColon',
	        value: function doubleColon() {}
	    }, {
	        key: 'unnamedAtrule',
	        value: function unnamedAtrule(node) {
	            node.name = '';
	        }
	    }, {
	        key: 'precheckMissedSemicolon',
	        value: function precheckMissedSemicolon(tokens) {
	            var colon = this.colon(tokens);
	            if (colon === false) return;

	            var split = void 0;
	            for (split = colon - 1; split >= 0; split--) {
	                if (tokens[split][0] === 'word') break;
	            }
	            for (split -= 1; split >= 0; split--) {
	                if (tokens[split][0] !== 'space') {
	                    split += 1;
	                    break;
	                }
	            }
	            var other = tokens.splice(split, tokens.length - split);
	            this.decl(other);
	        }
	    }, {
	        key: 'checkMissedSemicolon',
	        value: function checkMissedSemicolon() {}
	    }, {
	        key: 'endFile',
	        value: function endFile() {
	            if (this.current.nodes && this.current.nodes.length) {
	                this.current.raws.semicolon = this.semicolon;
	            }
	            this.current.raws.after = (this.current.raws.after || '') + this.spaces;

	            while (this.current.parent) {
	                this.current = this.current.parent;
	                this.current.raws.after = '';
	            }
	        }
	    }]);

	    return SafeParser;
	}(_parser2.default);

	exports.default = SafeParser;
	module.exports = exports['default'];

/***/ },
/* 421 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * Contains helpers for safely splitting lists of CSS values,
	 * preserving parentheses and quotes.
	 *
	 * @example
	 * const list = postcss.list;
	 *
	 * @namespace list
	 */
	var list = {
	    split: function split(string, separators, last) {
	        var array = [];
	        var current = '';
	        var split = false;

	        var func = 0;
	        var quote = false;
	        var escape = false;

	        for (var i = 0; i < string.length; i++) {
	            var letter = string[i];

	            if (quote) {
	                if (escape) {
	                    escape = false;
	                } else if (letter === '\\') {
	                    escape = true;
	                } else if (letter === quote) {
	                    quote = false;
	                }
	            } else if (letter === '"' || letter === '\'') {
	                quote = letter;
	            } else if (letter === '(') {
	                func += 1;
	            } else if (letter === ')') {
	                if (func > 0) func -= 1;
	            } else if (func === 0) {
	                if (separators.indexOf(letter) !== -1) split = true;
	            }

	            if (split) {
	                if (current !== '') array.push(current.trim());
	                current = '';
	                split = false;
	            } else {
	                current += letter;
	            }
	        }

	        if (last || current !== '') array.push(current.trim());
	        return array;
	    },


	    /**
	     * Safely splits space-separated values (such as those for `background`,
	     * `border-radius`, and other shorthand properties).
	     *
	     * @param {string} string - space-separated values
	     *
	     * @return {string[]} splitted values
	     *
	     * @example
	     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']
	     */
	    space: function space(string) {
	        var spaces = [' ', '\n', '\t'];
	        return list.split(string, spaces);
	    },


	    /**
	     * Safely splits comma-separated values (such as those for `transition-*`
	     * and `background` properties).
	     *
	     * @param {string} string - comma-separated values
	     *
	     * @return {string[]} splitted values
	     *
	     * @example
	     * postcss.list.comma('black, linear-gradient(white, black)')
	     * //=> ['black', 'linear-gradient(white, black)']
	     */
	    comma: function comma(string) {
	        var comma = ',';
	        return list.split(string, [comma], true);
	    }
	};

	exports.default = list;
	module.exports = exports['default'];

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _lazyResult = __webpack_require__(190);

	var _lazyResult2 = _interopRequireDefault(_lazyResult);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @callback builder
	 * @param {string} part          - part of generated CSS connected to this node
	 * @param {Node}   node          - AST node
	 * @param {"start"|"end"} [type] - node’s part type
	 */

	/**
	 * @callback parser
	 *
	 * @param {string|toString} css   - string with input CSS or any object
	 *                                  with toString() method, like a Buffer
	 * @param {processOptions} [opts] - options with only `from` and `map` keys
	 *
	 * @return {Root} PostCSS AST
	 */

	/**
	 * @callback stringifier
	 *
	 * @param {Node} node       - start node for stringifing. Usually {@link Root}.
	 * @param {builder} builder - function to concatenate CSS from node’s parts
	 *                            or generate string and source map
	 *
	 * @return {void}
	 */

	/**
	 * @typedef {object} syntax
	 * @property {parser} parse          - function to generate AST by string
	 * @property {stringifier} stringify - function to generate string by AST
	 */

	/**
	 * @typedef {object} toString
	 * @property {function} toString
	 */

	/**
	 * @callback pluginFunction
	 * @param {Root} root     - parsed input CSS
	 * @param {Result} result - result to set warnings or check other plugins
	 */

	/**
	 * @typedef {object} Plugin
	 * @property {function} postcss - PostCSS plugin function
	 */

	/**
	 * @typedef {object} processOptions
	 * @property {string} from             - the path of the CSS source file.
	 *                                       You should always set `from`,
	 *                                       because it is used in source map
	 *                                       generation and syntax error messages.
	 * @property {string} to               - the path where you’ll put the output
	 *                                       CSS file. You should always set `to`
	 *                                       to generate correct source maps.
	 * @property {parser} parser           - function to generate AST by string
	 * @property {stringifier} stringifier - class to generate string by AST
	 * @property {syntax} syntax           - object with `parse` and `stringify`
	 * @property {object} map              - source map options
	 * @property {boolean} map.inline                    - does source map should
	 *                                                     be embedded in the output
	 *                                                     CSS as a base64-encoded
	 *                                                     comment
	 * @property {string|object|false|function} map.prev - source map content
	 *                                                     from a previous
	 *                                                     processing step
	 *                                                     (for example, Sass).
	 *                                                     PostCSS will try to find
	 *                                                     previous map
	 *                                                     automatically, so you
	 *                                                     could disable it by
	 *                                                     `false` value.
	 * @property {boolean} map.sourcesContent            - does PostCSS should set
	 *                                                     the origin content to map
	 * @property {string|false} map.annotation           - does PostCSS should set
	 *                                                     annotation comment to map
	 * @property {string} map.from                       - override `from` in map’s
	 *                                                     `sources`
	 */

	/**
	 * Contains plugins to process CSS. Create one `Processor` instance,
	 * initialize its plugins, and then use that instance on numerous CSS files.
	 *
	 * @example
	 * const processor = postcss([autoprefixer, precss]);
	 * processor.process(css1).then(result => console.log(result.css));
	 * processor.process(css2).then(result => console.log(result.css));
	 */
	var Processor = function () {

	  /**
	   * @param {Array.<Plugin|pluginFunction>|Processor} plugins - PostCSS
	   *        plugins. See {@link Processor#use} for plugin format.
	   */
	  function Processor() {
	    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    _classCallCheck(this, Processor);

	    /**
	     * @member {string} - Current PostCSS version.
	     *
	     * @example
	     * if ( result.processor.version.split('.')[0] !== '5' ) {
	     *   throw new Error('This plugin works only with PostCSS 5');
	     * }
	     */
	    this.version = '5.2.0';
	    /**
	     * @member {pluginFunction[]} - Plugins added to this processor.
	     *
	     * @example
	     * const processor = postcss([autoprefixer, precss]);
	     * processor.plugins.length //=> 2
	     */
	    this.plugins = this.normalize(plugins);
	  }

	  /**
	   * Adds a plugin to be used as a CSS processor.
	   *
	   * PostCSS plugin can be in 4 formats:
	   * * A plugin created by {@link postcss.plugin} method.
	   * * A function. PostCSS will pass the function a @{link Root}
	   *   as the first argument and current {@link Result} instance
	   *   as the second.
	   * * An object with a `postcss` method. PostCSS will use that method
	   *   as described in #2.
	   * * Another {@link Processor} instance. PostCSS will copy plugins
	   *   from that instance into this one.
	   *
	   * Plugins can also be added by passing them as arguments when creating
	   * a `postcss` instance (see [`postcss(plugins)`]).
	   *
	   * Asynchronous plugins should return a `Promise` instance.
	   *
	   * @param {Plugin|pluginFunction|Processor} plugin - PostCSS plugin
	   *                                                   or {@link Processor}
	   *                                                   with plugins
	   *
	   * @example
	   * const processor = postcss()
	   *   .use(autoprefixer)
	   *   .use(precss);
	   *
	   * @return {Processes} current processor to make methods chain
	   */


	  _createClass(Processor, [{
	    key: 'use',
	    value: function use(plugin) {
	      this.plugins = this.plugins.concat(this.normalize([plugin]));
	      return this;
	    }

	    /**
	     * Parses source CSS and returns a {@link LazyResult} Promise proxy.
	     * Because some plugins can be asynchronous it doesn’t make
	     * any transformations. Transformations will be applied
	     * in the {@link LazyResult} methods.
	     *
	     * @param {string|toString|Result} css - String with input CSS or
	     *                                       any object with a `toString()`
	     *                                       method, like a Buffer.
	     *                                       Optionally, send a {@link Result}
	     *                                       instance and the processor will
	     *                                       take the {@link Root} from it.
	     * @param {processOptions} [opts]      - options
	     *
	     * @return {LazyResult} Promise proxy
	     *
	     * @example
	     * processor.process(css, { from: 'a.css', to: 'a.out.css' })
	     *   .then(result => {
	     *      console.log(result.css);
	     *   });
	     */

	  }, {
	    key: 'process',
	    value: function process(css) {
	      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      return new _lazyResult2.default(this, css, opts);
	    }
	  }, {
	    key: 'normalize',
	    value: function normalize(plugins) {
	      var normalized = [];
	      plugins.forEach(function (i) {
	        if (i.postcss) i = i.postcss;

	        if ((typeof i === 'undefined' ? 'undefined' : _typeof(i)) === 'object' && Array.isArray(i.plugins)) {
	          normalized = normalized.concat(i.plugins);
	        } else if (typeof i === 'function') {
	          normalized.push(i);
	        } else {
	          throw new Error(i + ' is not a PostCSS plugin');
	        }
	      });
	      return normalized;
	    }
	  }]);

	  return Processor;
	}();

	exports.default = Processor;
	module.exports = exports['default'];

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _warning = __webpack_require__(425);

	var _warning2 = _interopRequireDefault(_warning);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @typedef  {object} Message
	 * @property {string} type   - message type
	 * @property {string} plugin - source PostCSS plugin name
	 */

	/**
	 * Provides the result of the PostCSS transformations.
	 *
	 * A Result instance is returned by {@link LazyResult#then}
	 * or {@link Root#toResult} methods.
	 *
	 * @example
	 * postcss([cssnext]).process(css).then(function (result) {
	 *    console.log(result.css);
	 * });
	 *
	 * @example
	 * var result2 = postcss.parse(css).toResult();
	 */
	var Result = function () {

	  /**
	   * @param {Processor} processor - processor used for this transformation.
	   * @param {Root}      root      - Root node after all transformations.
	   * @param {processOptions} opts - options from the {@link Processor#process}
	   *                                or {@link Root#toResult}
	   */
	  function Result(processor, root, opts) {
	    _classCallCheck(this, Result);

	    /**
	     * @member {Processor} - The Processor instance used
	     *                       for this transformation.
	     *
	     * @example
	     * for ( let plugin of result.processor.plugins) {
	     *   if ( plugin.postcssPlugin === 'postcss-bad' ) {
	     *     throw 'postcss-good is incompatible with postcss-bad';
	     *   }
	     * });
	     */
	    this.processor = processor;
	    /**
	     * @member {Message[]} - Contains messages from plugins
	     *                       (e.g., warnings or custom messages).
	     *                       Each message should have type
	     *                       and plugin properties.
	     *
	     * @example
	     * postcss.plugin('postcss-min-browser', () => {
	     *   return (root, result) => {
	     *     var browsers = detectMinBrowsersByCanIUse(root);
	     *     result.messages.push({
	     *       type:    'min-browser',
	     *       plugin:  'postcss-min-browser',
	     *       browsers: browsers
	     *     });
	     *   };
	     * });
	     */
	    this.messages = [];
	    /**
	     * @member {Root} - Root node after all transformations.
	     *
	     * @example
	     * root.toResult().root == root;
	     */
	    this.root = root;
	    /**
	     * @member {processOptions} - Options from the {@link Processor#process}
	     *                            or {@link Root#toResult} call
	     *                            that produced this Result instance.
	     *
	     * @example
	     * root.toResult(opts).opts == opts;
	     */
	    this.opts = opts;
	    /**
	     * @member {string} - A CSS string representing of {@link Result#root}.
	     *
	     * @example
	     * postcss.parse('a{}').toResult().css //=> "a{}"
	     */
	    this.css = undefined;
	    /**
	     * @member {SourceMapGenerator} - An instance of `SourceMapGenerator`
	     *                                class from the `source-map` library,
	     *                                representing changes
	     *                                to the {@link Result#root} instance.
	     *
	     * @example
	     * result.map.toJSON() //=> { version: 3, file: 'a.css', … }
	     *
	     * @example
	     * if ( result.map ) {
	     *   fs.writeFileSync(result.opts.to + '.map', result.map.toString());
	     * }
	     */
	    this.map = undefined;
	  }

	  /**
	   * Returns for @{link Result#css} content.
	   *
	   * @example
	   * result + '' === result.css
	   *
	   * @return {string} string representing of {@link Result#root}
	   */


	  _createClass(Result, [{
	    key: 'toString',
	    value: function toString() {
	      return this.css;
	    }

	    /**
	     * Creates an instance of {@link Warning} and adds it
	     * to {@link Result#messages}.
	     *
	     * @param {string} text        - warning message
	     * @param {Object} [opts]      - warning options
	     * @param {Node}   opts.node   - CSS node that caused the warning
	     * @param {string} opts.word   - word in CSS source that caused the warning
	     * @param {number} opts.index  - index in CSS node string that caused
	     *                               the warning
	     * @param {string} opts.plugin - name of the plugin that created
	     *                               this warning. {@link Result#warn} fills
	     *                               this property automatically.
	     *
	     * @return {Warning} created warning
	     */

	  }, {
	    key: 'warn',
	    value: function warn(text) {
	      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      if (!opts.plugin) {
	        if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
	          opts.plugin = this.lastPlugin.postcssPlugin;
	        }
	      }

	      var warning = new _warning2.default(text, opts);
	      this.messages.push(warning);

	      return warning;
	    }

	    /**
	     * Returns warnings from plugins. Filters {@link Warning} instances
	     * from {@link Result#messages}.
	     *
	     * @example
	     * result.warnings().forEach(warn => {
	     *   console.warn(warn.toString());
	     * });
	     *
	     * @return {Warning[]} warnings from plugins
	     */

	  }, {
	    key: 'warnings',
	    value: function warnings() {
	      return this.messages.filter(function (i) {
	        return i.type === 'warning';
	      });
	    }

	    /**
	     * An alias for the {@link Result#css} property.
	     * Use it with syntaxes that generate non-CSS output.
	     * @type {string}
	     *
	     * @example
	     * result.css === result.content;
	     */

	  }, {
	    key: 'content',
	    get: function get() {
	      return this.css;
	    }
	  }]);

	  return Result;
	}();

	exports.default = Result;
	module.exports = exports['default'];

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _tokenize = __webpack_require__(111);

	var _tokenize2 = _interopRequireDefault(_tokenize);

	var _input = __webpack_require__(107);

	var _input2 = _interopRequireDefault(_input);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var HIGHLIGHT_THEME = {
	    'brackets': [36, 39], // cyan
	    'string': [31, 39], // red
	    'at-word': [31, 39], // red
	    'comment': [90, 39], // gray
	    '{': [32, 39], // green
	    '}': [32, 39], // green
	    ':': [1, 22], // bold
	    ';': [1, 22], // bold
	    '(': [1, 22], // bold
	    ')': [1, 22] // bold
	};

	function code(color) {
	    return '\x1B[' + color + 'm';
	}

	function terminalHighlight(css) {
	    var tokens = (0, _tokenize2.default)(new _input2.default(css), { ignoreErrors: true });
	    var result = [];
	    tokens.forEach(function (token) {
	        var color = HIGHLIGHT_THEME[token[0]];
	        if (color) {
	            result.push(token[1].split(/\r?\n/).map(function (i) {
	                return code(color[0]) + i + code(color[1]);
	            }).join('\n'));
	        } else {
	            result.push(token[1]);
	        }
	    });
	    return result.join('');
	}

	exports.default = terminalHighlight;
	module.exports = exports['default'];

/***/ },
/* 425 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Represents a plugin’s warning. It can be created using {@link Node#warn}.
	 *
	 * @example
	 * if ( decl.important ) {
	 *     decl.warn(result, 'Avoid !important', { word: '!important' });
	 * }
	 */
	var Warning = function () {

	  /**
	   * @param {string} text        - warning message
	   * @param {Object} [opts]      - warning options
	   * @param {Node}   opts.node   - CSS node that caused the warning
	   * @param {string} opts.word   - word in CSS source that caused the warning
	   * @param {number} opts.index  - index in CSS node string that caused
	   *                               the warning
	   * @param {string} opts.plugin - name of the plugin that created
	   *                               this warning. {@link Result#warn} fills
	   *                               this property automatically.
	   */
	  function Warning(text) {
	    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, Warning);

	    /**
	     * @member {string} - Type to filter warnings from
	     *                    {@link Result#messages}. Always equal
	     *                    to `"warning"`.
	     *
	     * @example
	     * const nonWarning = result.messages.filter(i => i.type !== 'warning')
	     */
	    this.type = 'warning';
	    /**
	     * @member {string} - The warning message.
	     *
	     * @example
	     * warning.text //=> 'Try to avoid !important'
	     */
	    this.text = text;

	    if (opts.node && opts.node.source) {
	      var pos = opts.node.positionBy(opts);
	      /**
	       * @member {number} - Line in the input file
	       *                    with this warning’s source
	       *
	       * @example
	       * warning.line //=> 5
	       */
	      this.line = pos.line;
	      /**
	       * @member {number} - Column in the input file
	       *                    with this warning’s source.
	       *
	       * @example
	       * warning.column //=> 6
	       */
	      this.column = pos.column;
	    }

	    for (var opt in opts) {
	      this[opt] = opts[opt];
	    }
	  }

	  /**
	   * Returns a warning position and message.
	   *
	   * @example
	   * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'
	   *
	   * @return {string} warning position and message
	   */


	  _createClass(Warning, [{
	    key: 'toString',
	    value: function toString() {
	      if (this.node) {
	        return this.node.error(this.text, {
	          plugin: this.plugin,
	          index: this.index,
	          word: this.word
	        }).message;
	      } else if (this.plugin) {
	        return this.plugin + ': ' + this.text;
	      } else {
	        return this.text;
	      }
	    }

	    /**
	     * @memberof Warning#
	     * @member {string} plugin - The name of the plugin that created
	     *                           it will fill this property automatically.
	     *                           this warning. When you call {@link Node#warn}
	     *
	     * @example
	     * warning.plugin //=> 'postcss-important'
	     */

	    /**
	     * @memberof Warning#
	     * @member {Node} node - Contains the CSS node that caused the warning.
	     *
	     * @example
	     * warning.node.toString() //=> 'color: white !important'
	     */

	  }]);

	  return Warning;
	}();

	exports.default = Warning;
	module.exports = exports['default'];

/***/ },
/* 426 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	'use strict';

	var camelize = __webpack_require__(426);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;

/***/ },
/* 428 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;

/***/ },
/* 429 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(433);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(196);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ },
/* 432 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ },
/* 433 */
/***/ function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(429);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(197),
	    isObject = __webpack_require__(436);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ },
/* 436 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 437 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 438 */
/***/ function(module, exports) {

	'use strict';
	module.exports = false;


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	/**
	 * These properties should not be copied or inherited from. This is only needed
	 * for all non blob URL's as the a blob URL does not include a hash, only the
	 * origin.
	 *
	 * @type {Object}
	 * @private
	 */
	var ignore = { hash: 1, query: 1 }
	  , URL;

	/**
	 * The location object differs when your code is loaded through a normal page,
	 * Worker or through a worker using a blob. And with the blobble begins the
	 * trouble as the location object will contain the URL of the blob, not the
	 * location of the page where our code is loaded in. The actual origin is
	 * encoded in the `pathname` so we can thankfully generate a good "default"
	 * location from it so we can generate proper relative URL's again.
	 *
	 * @param {Object} loc Optional default location object.
	 * @returns {Object} lolcation object.
	 * @api public
	 */
	module.exports = function lolcation(loc) {
	  loc = loc || global.location || {};
	  URL = URL || __webpack_require__(112);

	  var finaldestination = {}
	    , type = typeof loc
	    , key;

	  if ('blob:' === loc.protocol) {
	    finaldestination = new URL(unescape(loc.pathname), {});
	  } else if ('string' === type) {
	    finaldestination = new URL(loc, {});
	    for (key in ignore) delete finaldestination[key];
	  } else if ('object' === type) for (key in loc) {
	    if (key in ignore) continue;
	    finaldestination[key] = loc[key];
	  }

	  return finaldestination;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(113)(module), (function() { return this; }())))

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(440);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(311);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 442 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(442);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(4);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(1)))

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__resourceQuery) {var url = __webpack_require__(441);
	var SockJS = __webpack_require__(381);
	var stripAnsi = __webpack_require__(407);
	var scriptElements = document.getElementsByTagName("script");
	var scriptHost = scriptElements[scriptElements.length-1].getAttribute("src").replace(/\/[^\/]+$/, "");

	// If this bundle is inlined, use the resource query to get the correct url.
	// Else, get the url from the <script> this file was called with.
	var urlParts = url.parse( true ?
		__resourceQuery.substr(1) :
		(scriptHost ? scriptHost : "/")
	);

	var sock = null;
	var hot = false;
	var initial = true;
	var currentHash = "";

	var onSocketMsg = {
		hot: function() {
			hot = true;
			console.log("[WDS] Hot Module Replacement enabled.");
		},
		invalid: function() {
			console.log("[WDS] App updated. Recompiling...");
		},
		hash: function(hash) {
			currentHash = hash;
		},
		"still-ok": function() {
			console.log("[WDS] Nothing changed.")
		},
		ok: function() {
			if(initial) return initial = false;
			reloadApp();
		},
		warnings: function(warnings) {
			console.log("[WDS] Warnings while compiling.");
			for(var i = 0; i < warnings.length; i++)
				console.warn(stripAnsi(warnings[i]));
			if(initial) return initial = false;
			reloadApp();
		},
		errors: function(errors) {
			console.log("[WDS] Errors while compiling.");
			for(var i = 0; i < errors.length; i++)
				console.error(stripAnsi(errors[i]));
			if(initial) return initial = false;
			reloadApp();
		},
		"proxy-error": function(errors) {
			console.log("[WDS] Proxy error.");
			for(var i = 0; i < errors.length; i++)
				console.error(stripAnsi(errors[i]));
			if(initial) return initial = false;
			reloadApp();
		}
	};

	var newConnection = function() {
		sock = new SockJS(url.format({
			protocol: urlParts.protocol,
			auth: urlParts.auth,
			hostname: (urlParts.hostname === '0.0.0.0') ? window.location.hostname : urlParts.hostname,
			port: urlParts.port,
			pathname: urlParts.path === '/' ? "/sockjs-node" : urlParts.path
		}));

		sock.onclose = function() {
			console.error("[WDS] Disconnected!");

			// Try to reconnect.
			sock = null;
			setTimeout(function () {
				newConnection();
			}, 2000);
		};

		sock.onmessage = function(e) {
			// This assumes that all data sent via the websocket is JSON.
			var msg = JSON.parse(e.data);
			onSocketMsg[msg.type](msg.data);
		};
	};

	newConnection();

	function reloadApp() {
		if(hot) {
			console.log("[WDS] App hot update...");
			window.postMessage("webpackHotUpdate" + currentHash, "*");
		} else {
			console.log("[WDS] App updated. Reloading...");
			window.location.reload();
		}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, "?http://localhost:3000"))

/***/ },
/* 445 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals window __webpack_hash__ */
	if(true) {
		var lastData;
		var upToDate = function upToDate() {
			return lastData.indexOf(__webpack_require__.h()) >= 0;
		};
		var check = function check() {
			module.hot.check(true, function(err, updatedModules) {
				if(err) {
					if(module.hot.status() in {
							abort: 1,
							fail: 1
						}) {
						console.warn("[HMR] Cannot apply update. Need to do a full reload!");
						console.warn("[HMR] " + err.stack || err.message);
						window.location.reload();
					} else {
						console.warn("[HMR] Update failed: " + err.stack || err.message);
					}
					return;
				}

				if(!updatedModules) {
					console.warn("[HMR] Cannot find update. Need to do a full reload!");
					console.warn("[HMR] (Probably because of restarting the webpack-dev-server)");
					window.location.reload();
					return;
				}

				if(!upToDate()) {
					check();
				}

				__webpack_require__(447)(updatedModules, updatedModules);

				if(upToDate()) {
					console.log("[HMR] App is up to date.");
				}

			});
		};
		var addEventListener = window.addEventListener ? function(eventName, listener) {
			window.addEventListener(eventName, listener, false);
		} : function(eventName, listener) {
			window.attachEvent("on" + eventName, listener);
		};
		addEventListener("message", function(event) {
			if(typeof event.data === "string" && event.data.indexOf("webpackHotUpdate") === 0) {
				lastData = event.data;
				if(!upToDate() && module.hot.status() === "idle") {
					console.log("[HMR] Checking for updates on the server...");
					check();
				}
			}
		});
		console.log("[HMR] Waiting for update signal from WDS...");
	} else {
		throw new Error("[HMR] Hot Module Replacement is disabled.");
	}


/***/ },
/* 447 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(updatedModules, renewedModules) {
		var unacceptedModules = updatedModules.filter(function(moduleId) {
			return renewedModules && renewedModules.indexOf(moduleId) < 0;
		});

		if(unacceptedModules.length > 0) {
			console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
			unacceptedModules.forEach(function(moduleId) {
				console.warn("[HMR]  - " + moduleId);
			});
		}

		if(!renewedModules || renewedModules.length === 0) {
			console.log("[HMR] Nothing hot updated.");
		} else {
			console.log("[HMR] Updated modules:");
			renewedModules.forEach(function(moduleId) {
				console.log("[HMR]  - " + moduleId);
			});
		}
	};


/***/ }
/******/ ]);